/*! For license information please see main.js.LICENSE.txt */
!function(){var e,t,n={184:function(e,t){var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var a=i.apply(null,n);a&&e.push(a)}}else if("object"===o){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var s in n)r.call(n,s)&&n[s]&&e.push(s)}}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},521:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".bzoF8XR9RxjfjbyBtsoc {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: rgb(235, 207, 198);\r\n}\r\n","",{version:3,sources:["webpack://./client/assets/styles/App.module.scss"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,oCAAoC;AACtC",sourcesContent:[".container {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: rgb(235, 207, 198);\r\n}\r\n"],sourceRoot:""}]),a.locals={container:"bzoF8XR9RxjfjbyBtsoc"},t.Z=a},716:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".aFqoMILeVCAL82Xus9Ij {\r\n    cursor: pointer;\r\n    height: fit-content;\r\n    width: fit-content;\r\n    border-radius: 5px;\r\n    padding: 0 0.2em;\r\n    margin-left: 0.4em;\r\n    transform: perspective(200px);\r\n    transition: 0.2s;\r\n    border: 1px solid transparent;\r\n    background-color: white;\r\n}\r\n\r\n.aFqoMILeVCAL82Xus9Ij:hover {\r\n    border: 1px solid gray;\r\n    background-color: gray;\r\n}\r\n\r\n.hKwvz1BIjBj7fpM8SP7e {\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n    color: #5D4037;\r\n}\r\n\r\n.f7XHPXnyt8_Mc16_GQIX:hover {\r\n    transform: perspective(200px) rotateY(10deg);\r\n}\r\n\r\n.kqtYhAEu04L7q6tckCfT:hover {\r\n    transform: perspective(200px) rotateY(-10deg);\r\n}\r\n\r\n.f7XHPXnyt8_Mc16_GQIX:active {\r\n    transform: perspective(200px) rotateY(0deg);\r\n}\r\n\r\n.kqtYhAEu04L7q6tckCfT:active {\r\n    transform: perspective(200px) rotateY(0deg);\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Button.module.scss"],names:[],mappings:"AAAA;IACI,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,6BAA6B;IAC7B,gBAAgB;IAChB,6BAA6B;IAC7B,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,6CAA6C;AACjD;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C",sourcesContent:[".button {\r\n    cursor: pointer;\r\n    height: fit-content;\r\n    width: fit-content;\r\n    border-radius: 5px;\r\n    padding: 0 0.2em;\r\n    margin-left: 0.4em;\r\n    transform: perspective(200px);\r\n    transition: 0.2s;\r\n    border: 1px solid transparent;\r\n    background-color: white;\r\n}\r\n\r\n.button:hover {\r\n    border: 1px solid gray;\r\n    background-color: gray;\r\n}\r\n\r\n.title {\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n    color: #5D4037;\r\n}\r\n\r\n.buttonRight:hover {\r\n    transform: perspective(200px) rotateY(10deg);\r\n}\r\n\r\n.buttonLeft:hover {\r\n    transform: perspective(200px) rotateY(-10deg);\r\n}\r\n\r\n.buttonRight:active {\r\n    transform: perspective(200px) rotateY(0deg);\r\n}\r\n\r\n.buttonLeft:active {\r\n    transform: perspective(200px) rotateY(0deg);\r\n}"],sourceRoot:""}]),a.locals={button:"aFqoMILeVCAL82Xus9Ij",title:"hKwvz1BIjBj7fpM8SP7e",buttonRight:"f7XHPXnyt8_Mc16_GQIX",buttonLeft:"kqtYhAEu04L7q6tckCfT"},t.Z=a},805:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,":root {\r\n  --card-margin: 2%;\r\n}\r\n\r\n.WzX9t01SRNjDJApDADzy {\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100vw;\r\n  padding: 0 5vw;\r\n}\r\n\r\n.KCBuNvOy6wwbRebzpkUA {\r\n  box-sizing: border-box;\r\n  flex-grow: 0;\r\n  flex-shrink: 1;\r\n  aspect-ratio: 2/3;\r\n  position: relative;\r\n  margin: var(--card-margin);\r\n  cursor: pointer;\r\n}\r\n\r\n.KCBuNvOy6wwbRebzpkUA>* {\r\n  box-shadow: 0 0 50px 10px black;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  border: 1px solid grey;\r\n  pointer-events: none;\r\n}\r\n\r\n.MV2XLdNmA5mOzDB5pwy1 {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  top: 1.5%;\r\n  left: 2%;\r\n  width: 96%;\r\n  height: 97%;\r\n  border-radius: 5px;\r\n  margin: 0;\r\n  border: 1px solid grey;\r\n  pointer-events: none;\r\n}\r\n\r\n.KCBuNvOy6wwbRebzpkUA:hover>*,\r\n.KCBuNvOy6wwbRebzpkUA:hover>*>.MV2XLdNmA5mOzDB5pwy1 {\r\n  border-color: white;\r\n}\r\n\r\n.oTlyCKlmR1Srk5oIqZbV {\r\n  width: 1px;\r\n  min-width: 100%;\r\n  min-height: 100%;\r\n  object-fit: cover;\r\n  z-index: -100;\r\n  transition: 0.05s;\r\n\r\n  filter: brightness(70%);\r\n  transform: scale(1.4) translateX(-1%) translateY(-1%);\r\n  pointer-events: none;\r\n}\r\n\r\n.vufzoboFpb4eZo2wbvgG {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  bottom: 0;\r\n  z-index: 10;\r\n  width: 90%;\r\n  padding: 2% 5%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.SiyOuqzOImrpNh3d3xvw {\r\n  flex-basis: 80%;\r\n  flex-shrink: 0;\r\n  color: white;\r\n  font-size: 2em;\r\n  pointer-events: none;\r\n  white-space: nowrap;\r\n}\r\n\r\n.vc0DnqejxtKdL7QzmUSA {\r\n  color: white;\r\n  font-size: 1.5em;\r\n  opacity: 0;\r\n  height: 0;\r\n  transition: 0.3s;\r\n}\r\n\r\n.KCBuNvOy6wwbRebzpkUA:hover .vc0DnqejxtKdL7QzmUSA {\r\n  height: 1.3em;\r\n  opacity: 1;\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  .KCBuNvOy6wwbRebzpkUA {\r\n    flex-basis: calc((100% - var(--card-margin)*4) / 2);\r\n    max-height: 25vh;\r\n  }\r\n\r\n  .WzX9t01SRNjDJApDADzy {\r\n    padding: 0 5vw;\r\n  }\r\n\r\n  :root {\r\n    --card-margin: 4%;\r\n  }\r\n\r\n  @media screen and (max-width: 400px) {\r\n    .WzX9t01SRNjDJApDADzy {\r\n      padding: 0vw;\r\n    }\r\n  }\r\n}\r\n\r\n@media (orientation: landscape) {\r\n  .KCBuNvOy6wwbRebzpkUA {\r\n    flex-basis: calc((100% - var(--card-margin)*8) / 4);\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    .WzX9t01SRNjDJApDADzy {\r\n      padding: 0 5vw;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1000px) {\r\n    .WzX9t01SRNjDJApDADzy {\r\n      padding: 0 10vw;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1300px) {\r\n    .WzX9t01SRNjDJApDADzy {\r\n      padding: 0 15vw;\r\n    }\r\n  }\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Card.module.scss"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,+BAA+B;EAC/B,gBAAgB;EAChB,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,UAAU;EACV,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;;EAEE,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,iBAAiB;;EAEjB,uBAAuB;EACvB,qDAAqD;EACrD,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,UAAU;EACV,cAAc;EACd,gBAAgB;EAChB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,YAAY;EACZ,cAAc;EACd,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,UAAU;EACV,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;EACE;IACE,mDAAmD;IACnD,gBAAgB;EAClB;;EAEA;IACE,cAAc;EAChB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE;MACE,YAAY;IACd;EACF;AACF;;AAEA;EACE;IACE,mDAAmD;EACrD;;EAEA;IACE;MACE,cAAc;IAChB;EACF;;EAEA;IACE;MACE,eAAe;IACjB;EACF;;EAEA;IACE;MACE,eAAe;IACjB;EACF;AACF",sourcesContent:[":root {\r\n  --card-margin: 2%;\r\n}\r\n\r\n.container {\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100vw;\r\n  padding: 0 5vw;\r\n}\r\n\r\n.card {\r\n  box-sizing: border-box;\r\n  flex-grow: 0;\r\n  flex-shrink: 1;\r\n  aspect-ratio: 2/3;\r\n  position: relative;\r\n  margin: var(--card-margin);\r\n  cursor: pointer;\r\n}\r\n\r\n.card>* {\r\n  box-shadow: 0 0 50px 10px black;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  border: 1px solid grey;\r\n  pointer-events: none;\r\n}\r\n\r\n.innerBorder {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  top: 1.5%;\r\n  left: 2%;\r\n  width: 96%;\r\n  height: 97%;\r\n  border-radius: 5px;\r\n  margin: 0;\r\n  border: 1px solid grey;\r\n  pointer-events: none;\r\n}\r\n\r\n.card:hover>*,\r\n.card:hover>*>.innerBorder {\r\n  border-color: white;\r\n}\r\n\r\n.img {\r\n  width: 1px;\r\n  min-width: 100%;\r\n  min-height: 100%;\r\n  object-fit: cover;\r\n  z-index: -100;\r\n  transition: 0.05s;\r\n\r\n  filter: brightness(70%);\r\n  transform: scale(1.4) translateX(-1%) translateY(-1%);\r\n  pointer-events: none;\r\n}\r\n\r\n.info {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  bottom: 0;\r\n  z-index: 10;\r\n  width: 90%;\r\n  padding: 2% 5%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.title {\r\n  flex-basis: 80%;\r\n  flex-shrink: 0;\r\n  color: white;\r\n  font-size: 2em;\r\n  pointer-events: none;\r\n  white-space: nowrap;\r\n}\r\n\r\n.year {\r\n  color: white;\r\n  font-size: 1.5em;\r\n  opacity: 0;\r\n  height: 0;\r\n  transition: 0.3s;\r\n}\r\n\r\n.card:hover .year {\r\n  height: 1.3em;\r\n  opacity: 1;\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  .card {\r\n    flex-basis: calc((100% - var(--card-margin)*4) / 2);\r\n    max-height: 25vh;\r\n  }\r\n\r\n  .container {\r\n    padding: 0 5vw;\r\n  }\r\n\r\n  :root {\r\n    --card-margin: 4%;\r\n  }\r\n\r\n  @media screen and (max-width: 400px) {\r\n    .container {\r\n      padding: 0vw;\r\n    }\r\n  }\r\n}\r\n\r\n@media (orientation: landscape) {\r\n  .card {\r\n    flex-basis: calc((100% - var(--card-margin)*8) / 4);\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    .container {\r\n      padding: 0 5vw;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1000px) {\r\n    .container {\r\n      padding: 0 10vw;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1300px) {\r\n    .container {\r\n      padding: 0 15vw;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]),a.locals={container:"WzX9t01SRNjDJApDADzy",card:"KCBuNvOy6wwbRebzpkUA",innerBorder:"MV2XLdNmA5mOzDB5pwy1",img:"oTlyCKlmR1Srk5oIqZbV",info:"vufzoboFpb4eZo2wbvgG",title:"SiyOuqzOImrpNh3d3xvw",year:"vc0DnqejxtKdL7QzmUSA"},t.Z=a},711:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".Y42s502qzO86toIMhDLI {\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.Y42s502qzO86toIMhDLI::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.xu8vU4jDF4n8ASYucUhh {\r\n    font-size: 2.5em;\r\n}\r\n\r\n.OFUoFhdSiTtc6pizPvGc {\r\n    margin-top: 1em;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1em;\r\n}\r\n\r\n.bmnTW5pa3PiRowUg5E6I {\r\n    text-decoration: none;\r\n    list-style: none;\r\n\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0 0.3em;\r\n\r\n    border-top: 2px solid gray;\r\n\r\n}\r\n\r\n.cZaTL_TdPxXos567M9ul {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.VGGqNBhTv6BjNFDxCMoP {\r\n    color: rgb(10, 141, 97);\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n}\r\n\r\n.ySVTQfPzm84W536QViBF {\r\n    padding-left: 0.2em;\r\n    font-size: 2em;\r\n}\r\n\r\n.yd_7I18TkOSo5iHfgMFX {\r\n    align-self: center;\r\n    cursor: pointer;\r\n    font-size: 1.7em;\r\n    background-color: red;\r\n    border-radius: 0.5em;\r\n}\r\n\r\n.yd_7I18TkOSo5iHfgMFX:hover {\r\n    background-color: rgb(216, 102, 102);\r\n}\r\n\r\n.hLBrUgDx33po4W3xd9cw {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.tmch7NYaNIGtq_BwrmNS {\r\n    flex-basis: 50%;\r\n    flex-grow: 1;\r\n    margin-right: 2em;\r\n    font-size: 2em;\r\n    height: 4em;\r\n\r\n    background-color: transparent;\r\n}\r\n\r\n.FQCUuhZtvVCi__s_X3_g {\r\n    font-size: 1.5em;\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Comments.module.scss"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,aAAa;IACb,eAAe;IACf,QAAQ;AACZ;;AAEA;IACI,qBAAqB;IACrB,gBAAgB;;IAEhB,gBAAgB;IAChB,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;;IAEhB,0BAA0B;;AAE9B;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,gBAAgB;IAChB,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,cAAc;IACd,WAAW;;IAEX,6BAA6B;AACjC;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[".container {\r\n    width: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.container::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.title {\r\n    font-size: 2.5em;\r\n}\r\n\r\n.commentsContainer {\r\n    margin-top: 1em;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1em;\r\n}\r\n\r\n.comment {\r\n    text-decoration: none;\r\n    list-style: none;\r\n\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0 0.3em;\r\n\r\n    border-top: 2px solid gray;\r\n\r\n}\r\n\r\n.data {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.author {\r\n    color: rgb(10, 141, 97);\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n}\r\n\r\n.body {\r\n    padding-left: 0.2em;\r\n    font-size: 2em;\r\n}\r\n\r\n.button {\r\n    align-self: center;\r\n    cursor: pointer;\r\n    font-size: 1.7em;\r\n    background-color: red;\r\n    border-radius: 0.5em;\r\n}\r\n\r\n.button:hover {\r\n    background-color: rgb(216, 102, 102);\r\n}\r\n\r\n.addComment {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.newComment {\r\n    flex-basis: 50%;\r\n    flex-grow: 1;\r\n    margin-right: 2em;\r\n    font-size: 2em;\r\n    height: 4em;\r\n\r\n    background-color: transparent;\r\n}\r\n\r\n.reminder {\r\n    font-size: 1.5em;\r\n}"],sourceRoot:""}]),a.locals={container:"Y42s502qzO86toIMhDLI",title:"xu8vU4jDF4n8ASYucUhh",commentsContainer:"OFUoFhdSiTtc6pizPvGc",comment:"bmnTW5pa3PiRowUg5E6I",data:"cZaTL_TdPxXos567M9ul",author:"VGGqNBhTv6BjNFDxCMoP",body:"ySVTQfPzm84W536QViBF",button:"yd_7I18TkOSo5iHfgMFX",addComment:"hLBrUgDx33po4W3xd9cw",newComment:"tmch7NYaNIGtq_BwrmNS",reminder:"FQCUuhZtvVCi__s_X3_g"},t.Z=a},770:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".NE0IVZX0YA17LguiGPsr {\r\n  display: flex;\r\n  z-index: 100;\r\n  height: fit-content;\r\n  font-size: 2em;\r\n  position: fixed;\r\n}\r\n\r\n.pji_V_zkwYGBpqrS2q8b {\r\n  background-color: beige;\r\n  height: min-content;\r\n  padding: 0 1vw;\r\n}\r\n\r\n.gAPuOHwDsCPYXRdmcdty {\r\n  cursor: pointer;\r\n}\r\n\r\n.gAPuOHwDsCPYXRdmcdty:nth-child(1) {\r\n  text-align: center;\r\n  background-color: beige;\r\n}\r\n\r\n.gAPuOHwDsCPYXRdmcdty:hover .VnHJVZZDYzB9IWa1quAY,\r\n.pji_V_zkwYGBpqrS2q8b:hover .VnHJVZZDYzB9IWa1quAY {\r\n  width: fit-content;\r\n  height: 40vh;\r\n}\r\n\r\n.VnHJVZZDYzB9IWa1quAY {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 0;\r\n  width: max-content;\r\n  margin: 0;\r\n  overflow-y: scroll;\r\n  transition: 0.5s;\r\n  background-color: white;\r\n  padding: 0vh 2vh;\r\n}\r\n\r\n.FtOK1pzt__a2Ov5gCJpw {\r\n  list-style: none;\r\n}\r\n\r\n.FtOK1pzt__a2Ov5gCJpw:hover {\r\n  background-color: gray;\r\n}\r\n\r\n.HAgai20pTpC97OaiBJXb {\r\n  background-color: gray;\r\n  color: bisque;\r\n  list-style: none;\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Dropdown.module.scss"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,mBAAmB;EACnB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;AACzB;;AAEA;;EAEE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,kBAAkB;EAClB,SAAS;EACT,kBAAkB;EAClB,gBAAgB;EAChB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,gBAAgB;AAClB",sourcesContent:[".container {\r\n  display: flex;\r\n  z-index: 100;\r\n  height: fit-content;\r\n  font-size: 2em;\r\n  position: fixed;\r\n}\r\n\r\n.title {\r\n  background-color: beige;\r\n  height: min-content;\r\n  padding: 0 1vw;\r\n}\r\n\r\n.button {\r\n  cursor: pointer;\r\n}\r\n\r\n.button:nth-child(1) {\r\n  text-align: center;\r\n  background-color: beige;\r\n}\r\n\r\n.button:hover .list,\r\n.title:hover .list {\r\n  width: fit-content;\r\n  height: 40vh;\r\n}\r\n\r\n.list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 0;\r\n  width: max-content;\r\n  margin: 0;\r\n  overflow-y: scroll;\r\n  transition: 0.5s;\r\n  background-color: white;\r\n  padding: 0vh 2vh;\r\n}\r\n\r\n.notSelected {\r\n  list-style: none;\r\n}\r\n\r\n.notSelected:hover {\r\n  background-color: gray;\r\n}\r\n\r\n.selected {\r\n  background-color: gray;\r\n  color: bisque;\r\n  list-style: none;\r\n}"],sourceRoot:""}]),a.locals={container:"NE0IVZX0YA17LguiGPsr",title:"pji_V_zkwYGBpqrS2q8b",button:"gAPuOHwDsCPYXRdmcdty",list:"VnHJVZZDYzB9IWa1quAY",notSelected:"FtOK1pzt__a2Ov5gCJpw",selected:"HAgai20pTpC97OaiBJXb"},t.Z=a},921:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".oihci9LjwRkOJ497zlNO {\r\n    margin-top: 30vh;\r\n    align-self: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1em;\r\n    width: min-content;\r\n}\r\n\r\n.RSf3M3uI3NfXjUVzZS1g {\r\n    flex-basis: 100%;\r\n    font-size: 3em;\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    gap: 2em;\r\n}\r\n\r\n.plRdioED7fgdbfVOzG9o {\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.UcJq2wIOpS_qaSV420RI {\r\n    font-size: 2em;\r\n}\r\n\r\n.qZ4yBQHS19XPxnfs9glD {\r\n    max-width: 80vw;\r\n    font-size: 2em;\r\n}\r\n","",{version:3,sources:["webpack://./client/assets/styles/components/Forms.module.scss"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,QAAQ;IACR,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,0BAA0B;IAC1B,QAAQ;AACZ;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,cAAc;AAClB",sourcesContent:[".container {\r\n    margin-top: 30vh;\r\n    align-self: center;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1em;\r\n    width: min-content;\r\n}\r\n\r\n.title {\r\n    flex-basis: 100%;\r\n    font-size: 3em;\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    gap: 2em;\r\n}\r\n\r\n.form {\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.label {\r\n    font-size: 2em;\r\n}\r\n\r\n.input {\r\n    max-width: 80vw;\r\n    font-size: 2em;\r\n}\r\n"],sourceRoot:""}]),a.locals={container:"oihci9LjwRkOJ497zlNO",title:"RSf3M3uI3NfXjUVzZS1g",form:"plRdioED7fgdbfVOzG9o",label:"UcJq2wIOpS_qaSV420RI",input:"qZ4yBQHS19XPxnfs9glD"},t.Z=a},553:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"._th4YeWA1ZXDV1pID3wy {\r\n  display: flex;\r\n  width: 100vw;\r\n  flex-wrap: nowrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  z-index: 300;\r\n  background-color: rgb(58, 55, 55);\r\n  height: 8vh;\r\n}\r\n\r\n.vSUJB_Zn_RxyFzW1WBbQ {\r\n  color: white;\r\n  margin-left: 2vw;\r\n  font-size: 3em;\r\n  text-decoration: none;\r\n}\r\n\r\n.jX6nZi5efhh2UGGRxkip {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1vw;\r\n}\r\n\r\n.FA5JutR4X7eYMZGRb1Mh {\r\n  background-color: gray;\r\n  height: 80%;\r\n  font-size: 1.5em;\r\n  width: fit-content;\r\n  color: white;\r\n}\r\n\r\n.FA5JutR4X7eYMZGRb1Mh::placeholder {\r\n  color: white;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.kE9YkBxrX_ILn6Hjq_Bt {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1em;\r\n  margin-right: 1em;\r\n}\r\n\r\n.EwDCZe3wDLm27XajMl6Y {\r\n  font-size: 2em;\r\n  text-decoration: none;\r\n  color: white;\r\n  transition: 0.5s;\r\n}\r\n\r\n.EwDCZe3wDLm27XajMl6Y:hover {\r\n  color: grey;\r\n}\r\n\r\n.UFYyCc76dFIcmiBjFVJZ {\r\n  font-size: 1.5em;\r\n  color: white;\r\n}\r\n\r\n.BNwXPWG2eJdl2hWTq9Yo {\r\n  font-size: 1.8;\r\n  color: aquamarine;\r\n  transition: 0.5s;\r\n}\r\n\r\n.BNwXPWG2eJdl2hWTq9Yo:hover {\r\n  color: azure;\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Navbar.module.scss"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,iBAAiB;EACjB,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;EACZ,iCAAiC;EACjC,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,kBAAkB;AACpB;;;AAGA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd",sourcesContent:[".container {\r\n  display: flex;\r\n  width: 100vw;\r\n  flex-wrap: nowrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  z-index: 300;\r\n  background-color: rgb(58, 55, 55);\r\n  height: 8vh;\r\n}\r\n\r\n.title {\r\n  color: white;\r\n  margin-left: 2vw;\r\n  font-size: 3em;\r\n  text-decoration: none;\r\n}\r\n\r\n.form {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1vw;\r\n}\r\n\r\n.input {\r\n  background-color: gray;\r\n  height: 80%;\r\n  font-size: 1.5em;\r\n  width: fit-content;\r\n  color: white;\r\n}\r\n\r\n.input::placeholder {\r\n  color: white;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.login {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1em;\r\n  margin-right: 1em;\r\n}\r\n\r\n.link {\r\n  font-size: 2em;\r\n  text-decoration: none;\r\n  color: white;\r\n  transition: 0.5s;\r\n}\r\n\r\n.link:hover {\r\n  color: grey;\r\n}\r\n\r\n.loggedin {\r\n  font-size: 1.5em;\r\n  color: white;\r\n}\r\n\r\n.username {\r\n  font-size: 1.8;\r\n  color: aquamarine;\r\n  transition: 0.5s;\r\n}\r\n\r\n.username:hover {\r\n  color: azure;\r\n}"],sourceRoot:""}]),a.locals={container:"_th4YeWA1ZXDV1pID3wy",title:"vSUJB_Zn_RxyFzW1WBbQ",form:"jX6nZi5efhh2UGGRxkip",input:"FA5JutR4X7eYMZGRb1Mh",login:"kE9YkBxrX_ILn6Hjq_Bt",link:"EwDCZe3wDLm27XajMl6Y",loggedin:"UFYyCc76dFIcmiBjFVJZ",username:"BNwXPWG2eJdl2hWTq9Yo"},t.Z=a},757:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".iSAn4PCu4z6LMDijgtTg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  transition-delay: 0.1s;\r\n  overflow: hidden;\r\n\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n\r\n  justify-content: space-between;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  z-index: 200;\r\n}\r\n\r\n.kagGsq8KIyUCpJGviqVG {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: min-content;\r\n}\r\n\r\n.pXnlQFVIijgRKusHHNwp {\r\n  flex-basis: 100%;\r\n  flex-shrink: 0;\r\n  text-align: center;\r\n  margin-bottom: 4vh;\r\n  text-shadow: 0 0 1em black;\r\n  font-size: 4em;\r\n}\r\n\r\n.tQXCvuIKM3_QV1o5G1z8 {\r\n  flex-basis: 90%;\r\n  flex-grow: 0;\r\n}\r\n\r\n.HXOIg8lASa8IRQTF8j5V {\r\n  flex-basis: 10%;\r\n  flex-shrink: 0;\r\n  display: flex;\r\n  justify-content: left;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  z-index: 500;\r\n}\r\n\r\n.J9MRPks_Z5cnIRiokXK7 {\r\n  flex-basis: 100%;\r\n  align-self: center;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.E5iC9gNv6XYl5UAYwt9Q {\r\n  max-width: 50px;\r\n  animation: duou4Dbbav4wpZMXLbCA 2s infinite;\r\n}\r\n\r\n.Dp7upmOICTO7vRm0XUju {\r\n  transition: 0.8s;\r\n  transition-delay: 0s;\r\n  opacity: 0;\r\n}\r\n\r\n.bM_DxXW9DRFlKrlSfv1O {\r\n  transition: 0.8s;\r\n  transition-delay: 0.3s;\r\n  opacity: 1;\r\n}\r\n\r\n@keyframes duou4Dbbav4wpZMXLbCA {\r\n  0% {\r\n    transform: translateY(11vh);\r\n  }\r\n\r\n  50% {\r\n    transform: translateY(13vh);\r\n  }\r\n\r\n  100% {\r\n    transform: translateY(11vh);\r\n  }\r\n}","",{version:3,sources:["webpack://./client/assets/styles/components/Panel.module.scss"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,YAAY;EACZ,aAAa;;EAEb,sBAAsB;EACtB,gBAAgB;;EAEhB,2BAA2B;EAC3B,4BAA4B;EAC5B,sBAAsB;;EAEtB,8BAA8B;EAC9B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;;EAEnB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,0BAA0B;EAC1B,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,eAAe;EACf,cAAc;EACd,aAAa;EACb,qBAAqB;EACrB,gBAAgB;EAChB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,2CAAgC;AAClC;;AAEA;EACE,gBAAgB;EAChB,oBAAoB;EACpB,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE;IACE,2BAA2B;EAC7B;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,2BAA2B;EAC7B;AACF",sourcesContent:[".panel {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  transition-delay: 0.1s;\r\n  overflow: hidden;\r\n\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n\r\n  justify-content: space-between;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  z-index: 200;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: min-content;\r\n}\r\n\r\n.title {\r\n  flex-basis: 100%;\r\n  flex-shrink: 0;\r\n  text-align: center;\r\n  margin-bottom: 4vh;\r\n  text-shadow: 0 0 1em black;\r\n  font-size: 4em;\r\n}\r\n\r\n.cards {\r\n  flex-basis: 90%;\r\n  flex-grow: 0;\r\n}\r\n\r\n.buttonContainer {\r\n  flex-basis: 10%;\r\n  flex-shrink: 0;\r\n  display: flex;\r\n  justify-content: left;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  z-index: 500;\r\n}\r\n\r\n.arrowContainer {\r\n  flex-basis: 100%;\r\n  align-self: center;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.arrow {\r\n  max-width: 50px;\r\n  animation: moveArrow 2s infinite;\r\n}\r\n\r\n.passiveContainer {\r\n  transition: 0.8s;\r\n  transition-delay: 0s;\r\n  opacity: 0;\r\n}\r\n\r\n.activeContainer {\r\n  transition: 0.8s;\r\n  transition-delay: 0.3s;\r\n  opacity: 1;\r\n}\r\n\r\n@keyframes moveArrow {\r\n  0% {\r\n    transform: translateY(11vh);\r\n  }\r\n\r\n  50% {\r\n    transform: translateY(13vh);\r\n  }\r\n\r\n  100% {\r\n    transform: translateY(11vh);\r\n  }\r\n}"],sourceRoot:""}]),a.locals={panel:"iSAn4PCu4z6LMDijgtTg",container:"kagGsq8KIyUCpJGviqVG",title:"pXnlQFVIijgRKusHHNwp",cards:"tQXCvuIKM3_QV1o5G1z8",buttonContainer:"HXOIg8lASa8IRQTF8j5V",arrowContainer:"J9MRPks_Z5cnIRiokXK7",arrow:"E5iC9gNv6XYl5UAYwt9Q",moveArrow:"duou4Dbbav4wpZMXLbCA",passiveContainer:"Dp7upmOICTO7vRm0XUju",activeContainer:"bM_DxXW9DRFlKrlSfv1O"},t.Z=a},293:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"body {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n* {\r\n  margin: 0;\r\n}\r\n","",{version:3,sources:["webpack://./client/assets/styles/index.scss"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,kBAAkB;EAClB,MAAM;EACN,OAAO;AACT;;AAEA;EACE,SAAS;AACX",sourcesContent:["body {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n* {\r\n  margin: 0;\r\n}\r\n"],sourceRoot:""}]),t.Z=a},447:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".wUe7KGy2CoLsAlIzcCcg {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}","",{version:3,sources:["webpack://./client/assets/styles/pages/Homepage.module.scss"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,gBAAgB;AAClB",sourcesContent:[".container {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}"],sourceRoot:""}]),a.locals={container:"wUe7KGy2CoLsAlIzcCcg"},t.Z=a},876:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.vu_dJbu6deYHZIjUNpWt {\r\n  width: 100%;\r\n  height: 92vh;\r\n  margin: 0 0 4vh 0;\r\n  padding: 4vh 10vw 0 10vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 3%;\r\n  justify-content: left;\r\n  align-items: flex-start;\r\n  overflow: hidden;\r\n}\r\n\r\n.wAjZPsMuo_eZWkSAzq3z {\r\n  flex-basis: min-content;\r\n  flex-shrink: 1;\r\n  height: min-content;\r\n  display: flex;\r\n  gap: 5%;\r\n}\r\n\r\n.jXqHFgDrdOSdxLyVEnqW {\r\n  flex-basis: 20%;\r\n  flex-grow: 0;\r\n}\r\n\r\n.PoWQXntGe6uhwcOqP2bH {\r\n  flex-basis: 80%;\r\n  flex-grow: 0;\r\n\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.tSw5X6PToTesbpLE6tgv {\r\n  display: flex;\r\n}\r\n\r\n.zjSESWc_ZFPYPenTS4Mh {\r\n  flex-basis: 20%;\r\n  flex-shrink: 0;\r\n  font-size: 1.7em;\r\n}\r\n\r\n.KJgyPHuLqkaD49wYJ3yt {\r\n  flex-basis: 80%;\r\n  font-size: 1.7em;\r\n}\r\n\r\n.WSD0z1d8XZbrTz6KbQM8 {\r\n  display: inline-flex;\r\n  margin-right: 2vw;\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  .vu_dJbu6deYHZIjUNpWt {\r\n    margin: 0 0 2vh 0;\r\n    padding: 2vh 2vw 0 2vw;\r\n  }\r\n}","",{version:3,sources:["webpack://./client/assets/styles/pages/Moviepage.module.scss"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,wBAAwB;EACxB,aAAa;EACb,sBAAsB;EACtB,OAAO;EACP,qBAAqB;EACrB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,cAAc;EACd,mBAAmB;EACnB,aAAa;EACb,OAAO;AACT;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,eAAe;EACf,YAAY;;EAEZ,gBAAgB;EAChB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;EACpB,iBAAiB;AACnB;;AAEA;EACE;IACE,iBAAiB;IACjB,sBAAsB;EACxB;AACF",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.container {\r\n  width: 100%;\r\n  height: 92vh;\r\n  margin: 0 0 4vh 0;\r\n  padding: 4vh 10vw 0 10vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 3%;\r\n  justify-content: left;\r\n  align-items: flex-start;\r\n  overflow: hidden;\r\n}\r\n\r\n.movieContainer {\r\n  flex-basis: min-content;\r\n  flex-shrink: 1;\r\n  height: min-content;\r\n  display: flex;\r\n  gap: 5%;\r\n}\r\n\r\n.cardContainer {\r\n  flex-basis: 20%;\r\n  flex-grow: 0;\r\n}\r\n\r\n.info {\r\n  flex-basis: 80%;\r\n  flex-grow: 0;\r\n\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.oneInfo {\r\n  display: flex;\r\n}\r\n\r\n.label {\r\n  flex-basis: 20%;\r\n  flex-shrink: 0;\r\n  font-size: 1.7em;\r\n}\r\n\r\n.description {\r\n  flex-basis: 80%;\r\n  font-size: 1.7em;\r\n}\r\n\r\n.genre {\r\n  display: inline-flex;\r\n  margin-right: 2vw;\r\n}\r\n\r\n@media (orientation: portrait) {\r\n  .container {\r\n    margin: 0 0 2vh 0;\r\n    padding: 2vh 2vw 0 2vw;\r\n  }\r\n}"],sourceRoot:""}]),a.locals={container:"vu_dJbu6deYHZIjUNpWt",movieContainer:"wAjZPsMuo_eZWkSAzq3z",cardContainer:"jXqHFgDrdOSdxLyVEnqW",info:"PoWQXntGe6uhwcOqP2bH",oneInfo:"tSw5X6PToTesbpLE6tgv",label:"zjSESWc_ZFPYPenTS4Mh",description:"KJgyPHuLqkaD49wYJ3yt",genre:"WSD0z1d8XZbrTz6KbQM8"},t.Z=a},909:function(e,t,n){"use strict";var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,".td90lcdBucoQRlLmHAnA {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.E9VuLDD7ljkwYrA9NjoN {\r\n    padding-top: 5vh;\r\n    padding-bottom: 10vh;\r\n    height: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.E9VuLDD7ljkwYrA9NjoN::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.eOiGktZEy5nRIAKNTq0G {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: fit-content;\r\n    padding-top: 2vh;\r\n    padding-bottom: 0.5em;\r\n    background-image: linear-gradient(to bottom, rgba(255, 0, 0, 0), white);\r\n    z-index: 200;\r\n\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./client/assets/styles/pages/MoviesPage.module.scss"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,oBAAoB;IACpB,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,OAAO;IACP,YAAY;IACZ,mBAAmB;IACnB,gBAAgB;IAChB,qBAAqB;IACrB,uEAAuE;IACvE,YAAY;;IAEZ,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB",sourcesContent:[".container {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.cards {\r\n    padding-top: 5vh;\r\n    padding-bottom: 10vh;\r\n    height: 100%;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.cards::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.buttons {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: fit-content;\r\n    padding-top: 2vh;\r\n    padding-bottom: 0.5em;\r\n    background-image: linear-gradient(to bottom, rgba(255, 0, 0, 0), white);\r\n    z-index: 200;\r\n\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n}"],sourceRoot:""}]),a.locals={container:"td90lcdBucoQRlLmHAnA",cards:"E9VuLDD7ljkwYrA9NjoN",buttons:"eOiGktZEy5nRIAKNTq0G"},t.Z=a},645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},448:function(e,t,n){"use strict";var r=n(294),i=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),w=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),_=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),I=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var B=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var P=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var j,F=Object.assign;function L(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var M=!1;function z(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function V(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case w:return"Portal";case S:return"Profiler";case C:return"StrictMode";case I:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function H(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function G(e,t){X(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&H(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function oe(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,ke=null,Ce=null;function Se(e){if(e=bi(e)){if("function"!=typeof we)throw Error(o(280));var t=e.stateNode;t&&(t=Ei(t),we(e.stateNode,e.type,t))}}function xe(e){ke?Ce?Ce.push(e):Ce=[e]:ke=e}function _e(){if(ke){var e=ke,t=Ce;if(Ce=ke=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Oe(e,t){return e(t)}function Ie(){}var Ne=!1;function Te(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Oe(e,t,n)}finally{Ne=!1,(null!==ke||null!==Ce)&&(Ie(),_e())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=Ei(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Be=!1;if(c)try{var Pe={};Object.defineProperty(Pe,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Pe,Pe),window.removeEventListener("test",Pe,Pe)}catch(ce){Be=!1}function Re(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var je=!1,Fe=null,Le=!1,Me=null,ze={onError:function(e){je=!0,Fe=e}};function Ve(e,t,n,r,i,o,a,s,l){je=!1,Fe=null,Re.apply(ze,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(qe(e)!==e)throw Error(o(188))}function Ye(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return Ue(i),e;if(a===r)return Ue(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var $e=i.unstable_scheduleCallback,He=i.unstable_cancelCallback,Ze=i.unstable_shouldYield,Ke=i.unstable_requestPaint,Xe=i.unstable_now,Ge=i.unstable_getCurrentPriorityLevel,Je=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=ft(s):0!=(o&=a)&&(r=ft(o))}else 0!=(a=n&~i)?r=ft(a):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function At(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Et,wt,kt,Ct,St,xt=!1,_t=[],Ot=null,It=null,Nt=null,Tt=new Map,Dt=new Map,Bt=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":It=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function jt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Ft(e){var t=gi(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void St(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function Mt(e,t,n){Lt(e)&&n.delete(t)}function zt(){xt=!1,null!==Ot&&Lt(Ot)&&(Ot=null),null!==It&&Lt(It)&&(It=null),null!==Nt&&Lt(Nt)&&(Nt=null),Tt.forEach(Mt),Dt.forEach(Mt)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,zt)))}function qt(e){function t(t){return Vt(t,e)}if(0<_t.length){Vt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&Vt(Ot,e),null!==It&&Vt(It,e),null!==Nt&&Vt(Nt,e),Tt.forEach(t),Dt.forEach(t),n=0;n<Bt.length;n++)(r=Bt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Bt.length&&null===(n=Bt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Bt.shift()}var Qt=A.ReactCurrentBatchConfig,Ut=!0;function Yt(e,t,n,r){var i=bt,o=Qt.transition;Qt.transition=null;try{bt=1,$t(e,t,n,r)}finally{bt=i,Qt.transition=o}}function Wt(e,t,n,r){var i=bt,o=Qt.transition;Qt.transition=null;try{bt=4,$t(e,t,n,r)}finally{bt=i,Qt.transition=o}}function $t(e,t,n,r){if(Ut){var i=Zt(e,t,n,r);if(null===i)Ur(e,t,r,Ht,n),Rt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Ot=jt(Ot,e,t,n,r,i),!0;case"dragenter":return It=jt(It,e,t,n,r,i),!0;case"mouseover":return Nt=jt(Nt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Tt.set(o,jt(Tt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Dt.set(o,jt(Dt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Pt.indexOf(e)){for(;null!==i;){var o=bi(i);if(null!==o&&Et(o),null===(o=Zt(e,t,n,r))&&Ur(e,t,r,Ht,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Ht=null;function Zt(e,t,n,r){if(Ht=null,null!==(e=gi(e=Ee(r))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ht=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ge()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Gt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Gt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Jt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),fn=F({},un,{view:0,detail:0}),dn=on(fn),pn=F({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(pn),mn=on(F({},pn,{dataTransfer:0})),vn=on(F({},fn,{relatedTarget:0})),yn=on(F({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=F({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),An=on(F({},un,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Sn(){return Cn}var xn=F({},fn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=on(xn),On=on(F({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=on(F({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Nn=on(F({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=F({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=on(Tn),Bn=[9,13,27,32],Pn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var jn=c&&"TextEvent"in window&&!Rn,Fn=c&&(!Pn||Rn&&8<Rn&&11>=Rn),Ln=String.fromCharCode(32),Mn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Qn[e.type]:"textarea"===t}function Yn(e,t,n,r){xe(r),0<(t=Wr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,$n=null;function Hn(e){Lr(e,0)}function Zn(e){if($(Ai(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Gn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),$n=Wn=null)}function nr(e){if("value"===e.propertyName&&Zn($n)){var t=[];Yn(t,$n,e,Ee(e)),Te(Hn,t)}}function rr(e,t,n){"focusin"===e?(tr(),$n=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn($n)}function or(e,t){if("click"===e)return Zn(t)}function ar(e,t){if("input"===e||"change"===e)return Zn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!f.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=H();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=H((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=cr(n,o);var a=cr(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==H(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Wr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Er(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},kr={},Cr={};function Sr(e){if(kr[e])return kr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return kr[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var xr=Sr("animationend"),_r=Sr("animationiteration"),Or=Sr("animationstart"),Ir=Sr("transitionend"),Nr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Nr.set(e,t),l(t,[e])}for(var Br=0;Br<Tr.length;Br++){var Pr=Tr[Br];Dr(Pr.toLowerCase(),"on"+(Pr[0].toUpperCase()+Pr.slice(1)))}Dr(xr,"onAnimationEnd"),Dr(_r,"onAnimationIteration"),Dr(Or,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(Ir,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,l,u){if(Ve.apply(this,arguments),je){if(!je)throw Error(o(198));var c=Fe;je=!1,Fe=null,Le||(Le=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Fr(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Fr(i,s,u),o=l}}}if(Le)throw e=Me,Le=!1,Me=null,e}function Mr(e,t){var n=t[mi];void 0===n&&(n=t[mi]=new Set);var r=e+"__bubble";n.has(r)||(Qr(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Qr(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Vr]){e[Vr]=!0,a.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,zr("selectionchange",!1,t))}}function Qr(e,t,n,r){switch(Kt(t)){case 1:var i=Yt;break;case 4:i=Wt;break;default:i=$t}n=i.bind(null,t,n,e),i=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=gi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}Te((function(){var r=o,i=Ee(n),a=[];e:{var s=Nr.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=_n;break;case"focusin":u="focus",l=vn;break;case"focusout":u="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=In;break;case xr:case _r:case Or:l=yn;break;case Ir:l=Nn;break;case"scroll":l=dn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=On}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Yr(h,m,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ae||!(u=n.relatedTarget||n.fromElement)||!gi(u)&&!u[hi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?gi(u):null)&&(u!==(f=qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:Ai(l),p=null==u?s:Ai(u),(s=new c(m,h+"leave",l,n,i)).target=f,s.relatedTarget=p,m=null,gi(i)===r&&((c=new c(d,h+"enter",u,n,i)).target=p,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(d=u,h=0,p=c=l;p;p=$r(p))h++;for(p=0,m=d;m;m=$r(m))p++;for(;0<h-p;)c=$r(c),h--;for(;0<p-h;)d=$r(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=$r(c),d=$r(d)}c=null}else c=null;null!==l&&Hr(a,s,l,c,!1),null!==u&&null!==f&&Hr(a,f,u,c,!0)}if("select"===(l=(s=r?Ai(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var v=Kn;else if(Un(s))if(Xn)v=ar;else{v=ir;var y=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=or);switch(v&&(v=v(e,r))?Yn(a,v,n,i):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&ee(s,"number",s.value)),y=r?Ai(r):window,e){case"focusin":(Un(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(a,n,i);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(a,n,i)}var g;if(Pn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else qn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==b?"onCompositionEnd"===b&&qn&&(g=en()):(Gt="value"in(Xt=i)?Xt.value:Xt.textContent,qn=!0)),0<(y=Wr(r,b)).length&&(b=new An(b,e,null,n,i),a.push({event:b,listeners:y}),(g||null!==(g=Vn(n)))&&(b.data=g))),(g=jn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Mn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Mn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Pn&&zn(e,t)?(e=en(),Jt=Gt=Xt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(i=new An("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=g)}Lr(a,t)}))}function Yr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=De(e,n))&&r.unshift(Yr(e,o,i)),null!=(o=De(e,t))&&r.push(Yr(e,o,i))),e=e.return}return r}function $r(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Hr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=De(n,o))&&a.unshift(Yr(n,l,s)):i||null!=(l=De(n,o))&&a.push(Yr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Zr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(Kr,"")}function Gr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);qt(t)}function ui(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ci(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fi=Math.random().toString(36).slice(2),di="__reactFiber$"+fi,pi="__reactProps$"+fi,hi="__reactContainer$"+fi,mi="__reactEvents$"+fi,vi="__reactListeners$"+fi,yi="__reactHandles$"+fi;function gi(e){var t=e[di];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hi]||n[di]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ci(e);null!==e;){if(n=e[di])return n;e=ci(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[di]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ai(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Ei(e){return e[pi]||null}var wi=[],ki=-1;function Ci(e){return{current:e}}function Si(e){0>ki||(e.current=wi[ki],wi[ki]=null,ki--)}function xi(e,t){ki++,wi[ki]=e.current,e.current=t}var _i={},Oi=Ci(_i),Ii=Ci(!1),Ni=_i;function Ti(e,t){var n=e.type.contextTypes;if(!n)return _i;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Di(e){return null!=e.childContextTypes}function Bi(){Si(Ii),Si(Oi)}function Pi(e,t,n){if(Oi.current!==_i)throw Error(o(168));xi(Oi,t),xi(Ii,n)}function Ri(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,Q(e)||"Unknown",i));return F({},n,r)}function ji(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_i,Ni=Oi.current,xi(Oi,e),xi(Ii,Ii.current),!0}function Fi(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ri(e,t,Ni),r.__reactInternalMemoizedMergedChildContext=e,Si(Ii),Si(Oi),xi(Oi,e)):Si(Ii),xi(Ii,n)}var Li=null,Mi=!1,zi=!1;function Vi(e){null===Li?Li=[e]:Li.push(e)}function qi(){if(!zi&&null!==Li){zi=!0;var e=0,t=bt;try{var n=Li;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Li=null,Mi=!1}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),$e(Je,qi),t}finally{bt=t,zi=!1}}return null}var Qi=[],Ui=0,Yi=null,Wi=0,$i=[],Hi=0,Zi=null,Ki=1,Xi="";function Gi(e,t){Qi[Ui++]=Wi,Qi[Ui++]=Yi,Yi=e,Wi=t}function Ji(e,t,n){$i[Hi++]=Ki,$i[Hi++]=Xi,$i[Hi++]=Zi,Zi=e;var r=Ki;e=Xi;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Ki=1<<32-at(t)+i|n<<i|r,Xi=o+e}else Ki=1<<o|n<<i|r,Xi=e}function eo(e){null!==e.return&&(Gi(e,1),Ji(e,1,0))}function to(e){for(;e===Yi;)Yi=Qi[--Ui],Qi[Ui]=null,Wi=Qi[--Ui],Qi[Ui]=null;for(;e===Zi;)Zi=$i[--Hi],$i[Hi]=null,Xi=$i[--Hi],$i[Hi]=null,Ki=$i[--Hi],$i[Hi]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ui(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Zi?{id:Ki,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Tu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function uo(e){if(io){var t=ro;if(t){var n=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ui(n.nextSibling);var r=no;t&&so(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!io)return co(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(lo(e))throw po(),Error(o(418));for(;t;)ao(e,t),t=ui(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ui(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ui(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ui(e.nextSibling)}function ho(){ro=no=null,io=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var vo=A.ReactCurrentBatchConfig;function yo(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var go=Ci(null),bo=null,Ao=null,Eo=null;function wo(){Eo=Ao=bo=null}function ko(e){var t=go.current;Si(go),e._currentValue=t}function Co(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function So(e,t){bo=e,Eo=Ao=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(As=!0),e.firstContext=null)}function xo(e){var t=e._currentValue;if(Eo!==e)if(e={context:e,memoizedValue:t,next:null},null===Ao){if(null===bo)throw Error(o(308));Ao=e,bo.dependencies={lanes:0,firstContext:e}}else Ao=Ao.next=e;return t}var _o=null;function Oo(e){null===_o?_o=[e]:_o.push(e)}function Io(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,Oo(t)):(n.next=i.next,i.next=n),t.interleaved=n,No(e,r)}function No(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var To=!1;function Do(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Bo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Po(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ro(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ol)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,No(e,n)}return null===(i=r.interleaved)?(t.next=t,Oo(r)):(t.next=i.next,i.next=t),r.interleaved=t,No(e,n)}function jo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Fo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Lo(e,t,n,r){var i=e.updateQueue;To=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===a?o=u:a.next=u,a=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==o){var f=i.baseState;for(a=0,c=u=l=null,s=o;;){var d=s.lane,p=s.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,m=s;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=F({},f,d);break e;case 2:To=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(d=i.effects)?i.effects=[s]:d.push(s))}else p={eventTime:p,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=p,l=f):c=c.next=p,a|=d;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(d=s).next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}if(null===c&&(l=f),i.baseState=l,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);jl|=a,e.lanes=a,e.memoizedState=f}}function Mo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var zo=(new r.Component).refs;function Vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var qo={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=Po(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=Ro(e,o,i))&&(nu(t,e,i,r),jo(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),i=tu(e),o=Po(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Ro(e,o,i))&&(nu(t,e,i,r),jo(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),i=Po(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Ro(e,i,r))&&(nu(t,e,r,n),jo(t,e,r))}};function Qo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function Uo(e,t,n){var r=!1,i=_i,o=t.contextType;return"object"==typeof o&&null!==o?o=xo(o):(i=Di(t)?Ni:Oi.current,o=(r=null!=(r=t.contextTypes))?Ti(e,i):_i),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=qo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Yo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&qo.enqueueReplaceState(t,t.state,null)}function Wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=zo,Do(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=xo(o):(o=Di(t)?Ni:Oi.current,i.context=Ti(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&qo.enqueueReplaceState(i,i.state,null),Lo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function $o(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===zo&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Ho(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zo(e){return(0,e._init)(e._payload)}function Ko(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Fu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===D&&Zo(o)===t.type)?((r=i(t,n.props)).ref=$o(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=$o(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Lu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ru(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=$o(e,null,t),n.return=e,n;case w:return(t=Lu(t,e.mode,n)).return=e,t;case D:return d(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Ru(t,e.mode,n,null)).return=e,t;Ho(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===i?u(e,t,n,r):null;case w:return n.key===i?c(e,t,n,r):null;case D:return p(e,t,(i=n._init)(n._payload),r)}if(te(n)||R(n))return null!==i?null:f(e,t,n,r,null);Ho(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case D:return h(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||R(r))return f(t,e=e.get(n)||null,r,i,null);Ho(t,r)}return null}function m(i,o,s,l){for(var u=null,c=null,f=o,m=o=0,v=null;null!==f&&m<s.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(i,f,s[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(i,f),o=a(y,o,m),null===c?u=y:c.sibling=y,c=y,f=v}if(m===s.length)return n(i,f),io&&Gi(i,m),u;if(null===f){for(;m<s.length;m++)null!==(f=d(i,s[m],l))&&(o=a(f,o,m),null===c?u=f:c.sibling=f,c=f);return io&&Gi(i,m),u}for(f=r(i,f);m<s.length;m++)null!==(v=h(f,i,m,s[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=a(v,o,m),null===c?u=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(i,e)})),io&&Gi(i,m),u}function v(i,s,l,u){var c=R(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var f=c=null,m=s,v=s=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(i,m,g.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(i,m),s=a(b,s,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(i,m),io&&Gi(i,v),c;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(i,g.value,u))&&(s=a(g,s,v),null===f?c=g:f.sibling=g,f=g);return io&&Gi(i,v),c}for(m=r(i,m);!g.done;v++,g=l.next())null!==(g=h(m,i,v,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),s=a(g,s,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(i,e)})),io&&Gi(i,v),c}return function e(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===k&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case E:e:{for(var u=a.key,c=o;null!==c;){if(c.key===u){if((u=a.type)===k){if(7===c.tag){n(r,c.sibling),(o=i(c,a.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===D&&Zo(u)===c.type){n(r,c.sibling),(o=i(c,a.props)).ref=$o(r,c,a),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===k?((o=Ru(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Pu(a.type,a.key,a.props,null,r.mode,l)).ref=$o(r,o,a),l.return=r,r=l)}return s(r);case w:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Lu(a,r.mode,l)).return=r,r=o}return s(r);case D:return e(r,o,(c=a._init)(a._payload),l)}if(te(a))return m(r,o,a,l);if(R(a))return v(r,o,a,l);Ho(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Fu(a,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var Xo=Ko(!0),Go=Ko(!1),Jo={},ea=Ci(Jo),ta=Ci(Jo),na=Ci(Jo);function ra(e){if(e===Jo)throw Error(o(174));return e}function ia(e,t){switch(xi(na,t),xi(ta,e),xi(ea,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Si(ea),xi(ea,t)}function oa(){Si(ea),Si(ta),Si(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(xi(ta,e),xi(ea,n))}function sa(e){ta.current===e&&(Si(ea),Si(ta))}var la=Ci(0);function ua(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=A.ReactCurrentDispatcher,pa=A.ReactCurrentBatchConfig,ha=0,ma=null,va=null,ya=null,ga=!1,ba=!1,Aa=0,Ea=0;function wa(){throw Error(o(321))}function ka(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Ca(e,t,n,r,i,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?ss:ls,e=n(r,i),ba){a=0;do{if(ba=!1,Aa=0,25<=a)throw Error(o(301));a+=1,ya=va=null,t.updateQueue=null,da.current=us,e=n(r,i)}while(ba)}if(da.current=as,t=null!==va&&null!==va.next,ha=0,ya=va=ma=null,ga=!1,t)throw Error(o(300));return e}function Sa(){var e=0!==Aa;return Aa=0,e}function xa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function _a(){if(null===va){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ya?ma.memoizedState:ya.next;if(null!==t)ya=t,va=e;else{if(null===e)throw Error(o(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function Oa(e,t){return"function"==typeof t?t(e):t}function Ia(e){var t=_a(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=va,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,u=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=d,s=r):u=u.next=d,ma.lanes|=f,jl|=f}c=c.next}while(null!==c&&c!==a);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(As=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,ma.lanes|=a,jl|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Na(e){var t=_a(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,t.memoizedState)||(As=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ta(){}function Da(e,t){var n=ma,r=_a(),i=t(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,As=!0),r=r.queue,Ua(Ra.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,Ma(9,Pa.bind(null,n,r,i,t),void 0,null),null===Il)throw Error(o(349));0!=(30&ha)||Ba(n,t,i)}return i}function Ba(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Pa(e,t,n,r){t.value=n,t.getSnapshot=r,ja(t)&&Fa(e)}function Ra(e,t,n){return n((function(){ja(t)&&Fa(e)}))}function ja(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Fa(e){var t=No(e,1);null!==t&&nu(t,e,1,-1)}function La(e){var t=xa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oa,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,ma,e),[t.memoizedState,e]}function Ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function za(){return _a().memoizedState}function Va(e,t,n,r){var i=xa();ma.flags|=e,i.memoizedState=Ma(1|t,n,void 0,void 0===r?null:r)}function qa(e,t,n,r){var i=_a();r=void 0===r?null:r;var o=void 0;if(null!==va){var a=va.memoizedState;if(o=a.destroy,null!==r&&ka(r,a.deps))return void(i.memoizedState=Ma(t,n,o,r))}ma.flags|=e,i.memoizedState=Ma(1|t,n,o,r)}function Qa(e,t){return Va(8390656,8,e,t)}function Ua(e,t){return qa(2048,8,e,t)}function Ya(e,t){return qa(4,2,e,t)}function Wa(e,t){return qa(4,4,e,t)}function $a(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ha(e,t,n){return n=null!=n?n.concat([e]):null,qa(4,4,$a.bind(null,t,e),n)}function Za(){}function Ka(e,t){var n=_a();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ka(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=_a();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ka(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ga(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,As=!0),e.memoizedState=n):(sr(n,t)||(n=mt(),ma.lanes|=n,jl|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{bt=n,pa.transition=r}}function es(){return _a().memoizedState}function ts(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?is(t,n):null!==(n=Io(e,t,n,r))&&(nu(n,e,r,eu()),os(n,t,r))}function ns(e,t,n){var r=tu(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))is(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=t.interleaved;return null===l?(i.next=i,Oo(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Io(e,t,i,r))&&(nu(n,e,r,i=eu()),os(n,t,r))}}function rs(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function is(e,t){ba=ga=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function os(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var as={readContext:xo,useCallback:wa,useContext:wa,useEffect:wa,useImperativeHandle:wa,useInsertionEffect:wa,useLayoutEffect:wa,useMemo:wa,useReducer:wa,useRef:wa,useState:wa,useDebugValue:wa,useDeferredValue:wa,useTransition:wa,useMutableSource:wa,useSyncExternalStore:wa,useId:wa,unstable_isNewReconciler:!1},ss={readContext:xo,useCallback:function(e,t){return xa().memoizedState=[e,void 0===t?null:t],e},useContext:xo,useEffect:Qa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Va(4194308,4,$a.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Va(4194308,4,e,t)},useInsertionEffect:function(e,t){return Va(4,2,e,t)},useMemo:function(e,t){var n=xa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xa().memoizedState=e},useState:La,useDebugValue:Za,useDeferredValue:function(e){return xa().memoizedState=e},useTransition:function(){var e=La(!1),t=e[0];return e=Ja.bind(null,e[1]),xa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,i=xa();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Il)throw Error(o(349));0!=(30&ha)||Ba(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Qa(Ra.bind(null,r,a,e),[e]),r.flags|=2048,Ma(9,Pa.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=xa(),t=Il.identifierPrefix;if(io){var n=Xi;t=":"+t+"R"+(n=(Ki&~(1<<32-at(Ki)-1)).toString(32)+n),0<(n=Aa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ea++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:xo,useCallback:Ka,useContext:xo,useEffect:Ua,useImperativeHandle:Ha,useInsertionEffect:Ya,useLayoutEffect:Wa,useMemo:Xa,useReducer:Ia,useRef:za,useState:function(){return Ia(Oa)},useDebugValue:Za,useDeferredValue:function(e){return Ga(_a(),va.memoizedState,e)},useTransition:function(){return[Ia(Oa)[0],_a().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1},us={readContext:xo,useCallback:Ka,useContext:xo,useEffect:Ua,useImperativeHandle:Ha,useInsertionEffect:Ya,useLayoutEffect:Wa,useMemo:Xa,useReducer:Na,useRef:za,useState:function(){return Na(Oa)},useDebugValue:Za,useDeferredValue:function(e){var t=_a();return null===va?t.memoizedState=e:Ga(t,va.memoizedState,e)},useTransition:function(){return[Na(Oa)[0],_a().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1};function cs(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function fs(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ds(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=Po(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ul||(Ul=!0,Yl=r),ds(0,t)},n}function ms(e,t,n){(n=Po(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){ds(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ds(0,t),"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Su.bind(null,e,t,n),t.then(e,e))}function ys(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gs(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Po(-1,1)).tag=2,Ro(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bs=A.ReactCurrentOwner,As=!1;function Es(e,t,n,r){t.child=null===e?Go(t,null,n,r):Xo(t,e.child,n,r)}function ws(e,t,n,r,i){n=n.render;var o=t.ref;return So(t,i),r=Ca(e,t,n,r,o,i),n=Sa(),null===e||As?(io&&n&&eo(t),t.flags|=1,Es(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Us(e,t,i))}function ks(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Du(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cs(e,t,o,r,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return Us(e,t,i)}return t.flags|=1,(e=Bu(o,r)).ref=t.ref,e.return=t,t.child=e}function Cs(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===t.ref){if(As=!1,t.pendingProps=r=o,0==(e.lanes&i))return t.lanes=e.lanes,Us(e,t,i);0!=(131072&e.flags)&&(As=!0)}}return _s(e,t,n,r,i)}function Ss(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xi(Bl,Dl),Dl|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xi(Bl,Dl),Dl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,xi(Bl,Dl),Dl|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,xi(Bl,Dl),Dl|=r;return Es(e,t,i,n),t.child}function xs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _s(e,t,n,r,i){var o=Di(n)?Ni:Oi.current;return o=Ti(t,o),So(t,i),n=Ca(e,t,n,r,o,i),r=Sa(),null===e||As?(io&&r&&eo(t),t.flags|=1,Es(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Us(e,t,i))}function Os(e,t,n,r,i){if(Di(n)){var o=!0;ji(t)}else o=!1;if(So(t,i),null===t.stateNode)Qs(e,t),Uo(t,n,r),Wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?xo(u):Ti(t,u=Di(n)?Ni:Oi.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&Yo(t,a,r,u),To=!1;var d=t.memoizedState;a.state=d,Lo(t,r,a,i),l=t.memoizedState,s!==r||d!==l||Ii.current||To?("function"==typeof c&&(Vo(t,n,c,r),l=t.memoizedState),(s=To||Qo(t,n,s,r,d,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Bo(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:yo(t.type,s),a.props=u,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?xo(l):Ti(t,l=Di(n)?Ni:Oi.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==l)&&Yo(t,a,r,l),To=!1,d=t.memoizedState,a.state=d,Lo(t,r,a,i);var h=t.memoizedState;s!==f||d!==h||Ii.current||To?("function"==typeof p&&(Vo(t,n,p,r),h=t.memoizedState),(u=To||Qo(t,n,u,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Is(e,t,n,r,o,i)}function Is(e,t,n,r,i,o){xs(e,t);var a=0!=(128&t.flags);if(!r&&!a)return i&&Fi(t,n,!1),Us(e,t,o);r=t.stateNode,bs.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,s,o)):Es(e,t,s,o),t.memoizedState=r.state,i&&Fi(t,n,!0),t.child}function Ns(e){var t=e.stateNode;t.pendingContext?Pi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Pi(0,t.context,!1),ia(e,t.containerInfo)}function Ts(e,t,n,r,i){return ho(),mo(i),t.flags|=256,Es(e,t,n,r),t.child}var Ds,Bs,Ps,Rs={dehydrated:null,treeContext:null,retryLane:0};function js(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fs(e,t,n){var r,i=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),xi(la,1&a),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=ju(l,i,0,null),e=Ru(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=js(n),t.memoizedState=Rs,e):Ls(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,s){if(n)return 256&t.flags?(t.flags&=-257,Ms(e,t,s,r=fs(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=ju({mode:"visible",children:r.children},i,0,null),(a=Ru(a,i,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,s),t.child.memoizedState=js(s),t.memoizedState=Rs,a);if(0==(1&t.mode))return Ms(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Ms(e,t,s,r=fs(a=Error(o(419)),r,void 0))}if(l=0!=(s&e.childLanes),As||l){if(null!==(r=Il)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,No(e,i),nu(r,e,i,-1))}return mu(),Ms(e,t,s,r=fs(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=ui(i.nextSibling),no=t,io=!0,oo=null,null!==e&&($i[Hi++]=Ki,$i[Hi++]=Xi,$i[Hi++]=Zi,Ki=e.id,Xi=e.overflow,Zi=t),(t=Ls(t,r.children)).flags|=4096,t)}(e,t,l,i,r,a,n);if(s){s=i.fallback,l=t.mode,r=(a=e.child).sibling;var u={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=u,t.deletions=null):(i=Bu(a,u)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=Bu(r,s):(s=Ru(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?js(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Rs,i}return e=(s=e.child).sibling,i=Bu(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Ls(e,t){return(t=ju({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ms(e,t,n,r){return null!==r&&mo(r),Xo(t,e.child,null,n),(e=Ls(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Co(e.return,t,n)}function Vs(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function qs(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Es(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zs(e,n,t);else if(19===e.tag)zs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xi(la,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ua(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Vs(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ua(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Vs(t,!0,n,null,o);break;case"together":Vs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Qs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Us(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ys(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ws(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function $s(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ws(t),null;case 1:case 17:return Di(t.type)&&Bi(),Ws(t),null;case 3:return r=t.stateNode,oa(),Si(Ii),Si(Oi),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(au(oo),oo=null))),Ws(t),null;case 5:sa(t);var i=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Bs(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Ws(t),null}if(e=ra(ea.current),fo(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[di]=t,r[pi]=a,e=0!=(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(i=0;i<Rr.length;i++)Mr(Rr[i],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":K(r,a),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Mr("invalid",r);break;case"textarea":ie(r,a),Mr("invalid",r)}for(var l in ge(n,a),i=null,a)if(a.hasOwnProperty(l)){var u=a[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==a.suppressHydrationWarning&&Gr(r.textContent,u,e),i=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Gr(r.textContent,u,e),i=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Mr("scroll",r)}switch(n){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[di]=t,e[pi]=r,Ds(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),i=r;break;case"iframe":case"object":case"embed":Mr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Rr.length;i++)Mr(Rr[i],e);i=r;break;case"source":Mr("error",e),i=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),i=r;break;case"details":Mr("toggle",e),i=r;break;case"input":K(e,r),i=Z(e,r),Mr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=F({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Mr("invalid",e)}for(a in ge(n,i),u=i)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?ve(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Mr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ws(t),null;case 6:if(e&&null!=t.stateNode)Ps(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ea.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[di]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Gr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Gr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[di]=t,t.stateNode=r}return Ws(t),null;case 13:if(Si(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,a=!1;else if(a=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[di]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ws(t),a=!1}else null!==oo&&(au(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Pl&&(Pl=3):mu())),null!==t.updateQueue&&(t.flags|=4),Ws(t),null);case 4:return oa(),null===e&&qr(t.stateNode.containerInfo),Ws(t),null;case 10:return ko(t.type._context),Ws(t),null;case 19:if(Si(la),null===(a=t.memoizedState))return Ws(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)Ys(a,!1);else{if(0!==Pl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ua(e))){for(t.flags|=128,Ys(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xi(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>ql&&(t.flags|=128,r=!0,Ys(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ua(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ys(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Ws(t),null}else 2*Xe()-a.renderingStartTime>ql&&1073741824!==n&&(t.flags|=128,r=!0,Ys(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=la.current,xi(la,r?1&n|2:1&n),t):(Ws(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Dl)&&(Ws(t),6&t.subtreeFlags&&(t.flags|=8192)):Ws(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Hs(e,t){switch(to(t),t.tag){case 1:return Di(t.type)&&Bi(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),Si(Ii),Si(Oi),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(Si(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Si(la),null;case 4:return oa(),null;case 10:return ko(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Ds=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Bs=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ra(ea.current);var o,a=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),a=[];break;case"select":i=F({},i,{value:void 0}),r=F({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(o in l)!l.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&l[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(a||(a=[]),a.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Mr("scroll",e),a||l===u||(a=[])):(a=a||[]).push(c,u))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Ps=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zs=!1,Ks=!1,Xs="function"==typeof WeakSet?WeakSet:Set,Gs=null;function Js(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&el(t,n,o)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[di],delete t[pi],delete t[mi],delete t[vi],delete t[yi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Ks||Js(n,t);case 6:var r=cl,i=fl;cl=null,dl(e,t,n),fl=i,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),qt(e)):li(cl,n.stateNode));break;case 4:r=cl,i=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=i;break;case 0:case 11:case 14:case 15:if(!Ks&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&el(n,t,a),i=i.next}while(i!==r)}dl(e,t,n);break;case 1:if(!Ks&&(Js(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Ks=(r=Ks)||null!==n.memoizedState,dl(e,t,n),Ks=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xs),t.forEach((function(t){var r=Ou.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(o(160));pl(a,s,i),cl=null,fl=!1;var u=i.alternate;null!==u&&(u.return=null),i.return=null}catch(e){Cu(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Cu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:ml(t,e),yl(e),512&r&&null!==n&&Js(n,n.return);break;case 5:if(ml(t,e),yl(e),512&r&&null!==n&&Js(n,n.return),32&e.flags){var i=e.stateNode;try{de(i,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(i,a),be(l,s);var c=be(l,a);for(s=0;s<u.length;s+=2){var f=u[s],d=u[s+1];"style"===f?ve(i,d):"dangerouslySetInnerHTML"===f?fe(i,d):"children"===f?de(i,d):b(i,f,d,c)}switch(l){case"input":G(i,a);break;case"textarea":oe(i,a);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(i,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[pi]=a}catch(t){Cu(e,e.return,t)}}break;case 6:if(ml(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){Cu(e,e.return,t)}}break;case 3:if(ml(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:ml(t,e),yl(e);break;case 13:ml(t,e),yl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Vl=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Ks=(c=Ks)||f,ml(t,e),Ks=c):ml(t,e),yl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Gs=e,f=e.child;null!==f;){for(d=Gs=f;null!==Gs;){switch(h=(p=Gs).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Js(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:Js(p,p.return);break;case 22:if(null!==p.memoizedState){El(d);continue}}null!==h?(h.return=p,Gs=h):El(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{i=d.stateNode,c?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,s=null!=(u=d.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",s))}catch(t){Cu(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:ml(t,e),yl(e),4&r&&hl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(de(i,""),r.flags&=-33),ul(e,sl(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(o(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Gs=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Gs;){var i=Gs,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Zs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Ks;s=Zs;var u=Ks;if(Zs=a,(Ks=l)&&!u)for(Gs=i;null!==Gs;)l=(a=Gs).child,22===a.tag&&null!==a.memoizedState?wl(i):null!==l?(l.return=a,Gs=l):wl(i);for(;null!==o;)Gs=o,bl(o,t,n),o=o.sibling;Gs=i,Zs=s,Ks=u}Al(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Gs=o):Al(e)}}function Al(e){for(;null!==Gs;){var t=Gs;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ks||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ks)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:yo(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Mo(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Mo(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&qt(d)}}}break;default:throw Error(o(163))}Ks||512&t.flags&&il(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Gs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gs=n;break}Gs=t.return}}function El(e){for(;null!==Gs;){var t=Gs;if(t===e){Gs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gs=n;break}Gs=t.return}}function wl(e){for(;null!==Gs;){var t=Gs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Cu(t,i,e)}}var o=t.return;try{il(t)}catch(e){Cu(t,o,e)}break;case 5:var a=t.return;try{il(t)}catch(e){Cu(t,a,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Gs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Gs=s;break}Gs=t.return}}var kl,Cl=Math.ceil,Sl=A.ReactCurrentDispatcher,xl=A.ReactCurrentOwner,_l=A.ReactCurrentBatchConfig,Ol=0,Il=null,Nl=null,Tl=0,Dl=0,Bl=Ci(0),Pl=0,Rl=null,jl=0,Fl=0,Ll=0,Ml=null,zl=null,Vl=0,ql=1/0,Ql=null,Ul=!1,Yl=null,Wl=null,$l=!1,Hl=null,Zl=0,Kl=0,Xl=null,Gl=-1,Jl=0;function eu(){return 0!=(6&Ol)?Xe():-1!==Gl?Gl:Gl=Xe()}function tu(e){return 0==(1&e.mode)?1:0!=(2&Ol)&&0!==Tl?Tl&-Tl:null!==vo.transition?(0===Jl&&(Jl=mt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function nu(e,t,n,r){if(50<Kl)throw Kl=0,Xl=null,Error(o(185));yt(e,n,r),0!=(2&Ol)&&e===Il||(e===Il&&(0==(2&Ol)&&(Fl|=n),4===Pl&&su(e,Tl)),ru(e,r),1===n&&0===Ol&&0==(1&t.mode)&&(ql=Xe()+500,Mi&&qi()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,l=i[a];-1===l?0!=(s&n)&&0==(s&r)||(i[a]=pt(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=dt(e,e===Il?Tl:0);if(0===r)null!==n&&He(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&He(n),1===t)0===e.tag?function(e){Mi=!0,Vi(e)}(lu.bind(null,e)):Vi(lu.bind(null,e)),ai((function(){0==(6&Ol)&&qi()})),n=null;else{switch(At(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Iu(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Gl=-1,Jl=0,0!=(6&Ol))throw Error(o(327));var n=e.callbackNode;if(wu()&&e.callbackNode!==n)return null;var r=dt(e,e===Il?Tl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var i=Ol;Ol|=2;var a=hu();for(Il===e&&Tl===t||(Ql=null,ql=Xe()+500,du(e,t));;)try{gu();break}catch(t){pu(e,t)}wo(),Sl.current=a,Ol=i,null!==Nl?t=0:(Il=null,Tl=0,t=Pl)}if(0!==t){if(2===t&&0!==(i=ht(e))&&(r=i,t=ou(e,i)),1===t)throw n=Rl,du(e,0),su(e,r),ru(e,Xe()),n;if(6===t)su(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=vu(e,r))&&0!==(a=ht(e))&&(r=a,t=ou(e,a)),1===t))throw n=Rl,du(e,0),su(e,r),ru(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Eu(e,zl,Ql);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Vl+500-Xe())){if(0!==dt(e,0))break;if(((i=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(Eu.bind(null,e,zl,Ql),t);break}Eu(e,zl,Ql);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)){e.timeoutHandle=ri(Eu.bind(null,e,zl,Ql),r);break}Eu(e,zl,Ql);break;default:throw Error(o(329))}}}return ru(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function ou(e,t){var n=Ml;return e.current.memoizedState.isDehydrated&&(du(e,t).flags|=256),2!==(e=vu(e,t))&&(t=zl,zl=n,null!==t&&au(t)),e}function au(e){null===zl?zl=e:zl.push.apply(zl,e)}function su(e,t){for(t&=~Ll,t&=~Fl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(0!=(6&Ol))throw Error(o(327));wu();var t=dt(e,0);if(0==(1&t))return ru(e,Xe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ou(e,r))}if(1===n)throw n=Rl,du(e,0),su(e,t),ru(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Eu(e,zl,Ql),ru(e,Xe()),null}function uu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&(ql=Xe()+500,Mi&&qi())}}function cu(e){null!==Hl&&0===Hl.tag&&0==(6&Ol)&&wu();var t=Ol;Ol|=1;var n=_l.transition,r=bt;try{if(_l.transition=null,bt=1,e)return e()}finally{bt=r,_l.transition=n,0==(6&(Ol=t))&&qi()}}function fu(){Dl=Bl.current,Si(Bl)}function du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Nl)for(n=Nl.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Bi();break;case 3:oa(),Si(Ii),Si(Oi),fa();break;case 5:sa(r);break;case 4:oa();break;case 13:case 19:Si(la);break;case 10:ko(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Il=e,Nl=e=Bu(e.current,null),Tl=Dl=t,Pl=0,Rl=null,Ll=Fl=jl=0,zl=Ml=null,null!==_o){for(t=0;t<_o.length;t++)if(null!==(r=(n=_o[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}_o=null}return e}function pu(e,t){for(;;){var n=Nl;try{if(wo(),da.current=as,ga){for(var r=ma.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ga=!1}if(ha=0,ya=va=ma=null,ba=!1,Aa=0,xl.current=null,null===n||null===n.return){Pl=1,Rl=t,Nl=null;break}e:{var a=e,s=n.return,l=n,u=t;if(t=Tl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=l,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ys(s);if(null!==h){h.flags&=-257,gs(h,s,l,0,t),1&h.mode&&vs(a,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(u),t.updateQueue=v}else m.add(u);break e}if(0==(1&t)){vs(a,c,t),mu();break e}u=Error(o(426))}else if(io&&1&l.mode){var y=ys(s);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gs(y,s,l,0,t),mo(cs(u,l));break e}}a=u=cs(u,l),4!==Pl&&(Pl=2),null===Ml?Ml=[a]:Ml.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Fo(a,hs(0,u,t));break e;case 1:l=u;var g=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Wl||!Wl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Fo(a,ms(a,l,t));break e}}a=a.return}while(null!==a)}Au(n)}catch(e){t=e,Nl===n&&null!==n&&(Nl=n=n.return);continue}break}}function hu(){var e=Sl.current;return Sl.current=as,null===e?as:e}function mu(){0!==Pl&&3!==Pl&&2!==Pl||(Pl=4),null===Il||0==(268435455&jl)&&0==(268435455&Fl)||su(Il,Tl)}function vu(e,t){var n=Ol;Ol|=2;var r=hu();for(Il===e&&Tl===t||(Ql=null,du(e,t));;)try{yu();break}catch(t){pu(e,t)}if(wo(),Ol=n,Sl.current=r,null!==Nl)throw Error(o(261));return Il=null,Tl=0,Pl}function yu(){for(;null!==Nl;)bu(Nl)}function gu(){for(;null!==Nl&&!Ze();)bu(Nl)}function bu(e){var t=kl(e.alternate,e,Dl);e.memoizedProps=e.pendingProps,null===t?Au(e):Nl=t,xl.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=$s(n,t,Dl)))return void(Nl=n)}else{if(null!==(n=Hs(n,t)))return n.flags&=32767,void(Nl=n);if(null===e)return Pl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===Pl&&(Pl=5)}function Eu(e,t,n){var r=bt,i=_l.transition;try{_l.transition=null,bt=1,function(e,t,n,r){do{wu()}while(null!==Hl);if(0!=(6&Ol))throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===Il&&(Nl=Il=null,Tl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||$l||($l=!0,Iu(tt,(function(){return wu(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=_l.transition,_l.transition=null;var s=bt;bt=1;var l=Ol;Ol|=4,xl.current=null,function(e,t){if(ei=Ut,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==i&&3!==d.nodeType||(l=s+i),d!==a||0!==r&&3!==d.nodeType||(u=s+r),3===d.nodeType&&(s+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===i&&(l=s),p===a&&++f===r&&(u=s),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Ut=!1,Gs=t;null!==Gs;)if(e=(t=Gs).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Gs=e;else for(;null!==Gs;){t=Gs;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:yo(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(o(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gs=e;break}Gs=t.return}m=tl,tl=!1}(e,n),vl(n,e),hr(ti),Ut=!!ei,ti=ei=null,e.current=n,gl(n,e,i),Ke(),Ol=l,bt=s,_l.transition=a}else e.current=n;if($l&&($l=!1,Hl=e,Zl=i),0===(a=e.pendingLanes)&&(Wl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Ul)throw Ul=!1,e=Yl,Yl=null,e;0!=(1&Zl)&&0!==e.tag&&wu(),0!=(1&(a=e.pendingLanes))?e===Xl?Kl++:(Kl=0,Xl=e):Kl=0,qi()}(e,t,n,r)}finally{_l.transition=i,bt=r}return null}function wu(){if(null!==Hl){var e=At(Zl),t=_l.transition,n=bt;try{if(_l.transition=null,bt=16>e?16:e,null===Hl)var r=!1;else{if(e=Hl,Hl=null,Zl=0,0!=(6&Ol))throw Error(o(331));var i=Ol;for(Ol|=4,Gs=e.current;null!==Gs;){var a=Gs,s=a.child;if(0!=(16&Gs.flags)){var l=a.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Gs=c;null!==Gs;){var f=Gs;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Gs=d;else for(;null!==Gs;){var p=(f=Gs).sibling,h=f.return;if(ol(f),f===c){Gs=null;break}if(null!==p){p.return=h,Gs=p;break}Gs=h}}}var m=a.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Gs=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Gs=s;else e:for(;null!==Gs;){if(0!=(2048&(a=Gs).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Gs=g;break e}Gs=a.return}}var b=e.current;for(Gs=b;null!==Gs;){var A=(s=Gs).child;if(0!=(2064&s.subtreeFlags)&&null!==A)A.return=s,Gs=A;else e:for(s=b;null!==Gs;){if(0!=(2048&(l=Gs).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Cu(l,l.return,e)}if(l===s){Gs=null;break e}var E=l.sibling;if(null!==E){E.return=l.return,Gs=E;break e}Gs=l.return}}if(Ol=i,qi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,_l.transition=t}}return!1}function ku(e,t,n){e=Ro(e,t=hs(0,t=cs(n,t),1),1),t=eu(),null!==e&&(yt(e,1,t),ru(e,t))}function Cu(e,t,n){if(3===e.tag)ku(e,e,n);else for(;null!==t;){if(3===t.tag){ku(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){t=Ro(t,e=ms(t,e=cs(n,e),1),1),e=eu(),null!==t&&(yt(t,1,e),ru(t,e));break}}t=t.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Il===e&&(Tl&n)===n&&(4===Pl||3===Pl&&(130023424&Tl)===Tl&&500>Xe()-Vl?du(e,0):Ll|=n),ru(e,t)}function xu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=eu();null!==(e=No(e,t))&&(yt(e,t,n),ru(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xu(e,n)}function Ou(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),xu(e,n)}function Iu(e,t){return $e(e,t)}function Nu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tu(e,t,n,r){return new Nu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)Du(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return Ru(n.children,i,a,t);case C:s=8,i|=8;break;case S:return(e=Tu(12,n,t,2|i)).elementType=S,e.lanes=a,e;case I:return(e=Tu(13,n,t,i)).elementType=I,e.lanes=a,e;case N:return(e=Tu(19,n,t,i)).elementType=N,e.lanes=a,e;case B:return ju(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:s=10;break e;case _:s=9;break e;case O:s=11;break e;case T:s=14;break e;case D:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Tu(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function Ru(e,t,n,r){return(e=Tu(7,e,r,t)).lanes=n,e}function ju(e,t,n,r){return(e=Tu(22,e,r,t)).elementType=B,e.lanes=n,e.stateNode={isHidden:!1},e}function Fu(e,t,n){return(e=Tu(6,e,null,t)).lanes=n,e}function Lu(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Mu(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function zu(e,t,n,r,i,o,a,s,l){return e=new Mu(e,t,n,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Tu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Do(o),e}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function qu(e){if(!e)return _i;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Di(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Di(n))return Ri(e,n,t)}return t}function Qu(e,t,n,r,i,o,a,s,l){return(e=zu(n,r,!0,e,0,o,0,s,l)).context=qu(null),n=e.current,(o=Po(r=eu(),i=tu(n))).callback=null!=t?t:null,Ro(n,o,i),e.current.lanes=i,yt(e,i,r),ru(e,r),e}function Uu(e,t,n,r){var i=t.current,o=eu(),a=tu(i);return n=qu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Po(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ro(i,t,a))&&(nu(e,i,a,o),jo(e,i,a)),a}function Yu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $u(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}kl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ii.current)As=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return As=!1,function(e,t,n){switch(t.tag){case 3:Ns(t),ho();break;case 5:aa(t);break;case 1:Di(t.type)&&ji(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;xi(go,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xi(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fs(e,t,n):(xi(la,1&la.current),null!==(e=Us(e,t,n))?e.sibling:null);xi(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return qs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),xi(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,Ss(e,t,n)}return Us(e,t,n)}(e,t,n);As=0!=(131072&e.flags)}else As=!1,io&&0!=(1048576&t.flags)&&Ji(t,Wi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Qs(e,t),e=t.pendingProps;var i=Ti(t,Oi.current);So(t,n),i=Ca(null,t,r,e,i,n);var a=Sa();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Di(r)?(a=!0,ji(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Do(t),i.updater=qo,t.stateNode=i,i._reactInternals=t,Wo(t,r,e,n),t=Is(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),Es(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Qs(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===T)return 14}return 2}(r),e=yo(r,e),i){case 0:t=_s(null,t,r,e,n);break e;case 1:t=Os(null,t,r,e,n);break e;case 11:t=ws(null,t,r,e,n);break e;case 14:t=ks(null,t,r,yo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,_s(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 1:return r=t.type,i=t.pendingProps,Os(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 3:e:{if(Ns(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Bo(e,t),Lo(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Ts(e,t,r,n,i=cs(Error(o(423)),t));break e}if(r!==i){t=Ts(e,t,r,n,i=cs(Error(o(424)),t));break e}for(ro=ui(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Go(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===i){t=Us(e,t,n);break e}Es(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&uo(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(t.flags|=32),xs(e,t),Es(e,t,s,n),t.child;case 6:return null===e&&uo(t),null;case 13:return Fs(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):Es(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,ws(e,t,r,i=t.elementType===r?i:yo(r,i),n);case 7:return Es(e,t,t.pendingProps,n),t.child;case 8:case 12:return Es(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,xi(go,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!Ii.current){t=Us(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===a.tag){(u=Po(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),Co(a.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Co(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}Es(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,So(t,n),r=r(i=xo(i)),t.flags|=1,Es(e,t,r,n),t.child;case 14:return i=yo(r=t.type,t.pendingProps),ks(e,t,r,i=yo(r.type,i),n);case 15:return Cs(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:yo(r,i),Qs(e,t),t.tag=1,Di(r)?(e=!0,ji(t)):e=!1,So(t,n),Uo(t,r,i),Wo(t,r,i,n),Is(null,t,r,!0,e,n);case 19:return qs(e,t,n);case 22:return Ss(e,t,n)}throw Error(o(156,t.tag))};var Hu="function"==typeof reportError?reportError:function(e){console.error(e)};function Zu(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=Yu(a);s.call(e)}}Uu(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=Yu(a);o.call(e)}}var a=Qu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=a,e[hi]=a.current,qr(8===e.nodeType?e.parentNode:e),cu(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Yu(l);s.call(e)}}var l=zu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=l,e[hi]=l.current,qr(8===e.nodeType?e.parentNode:e),cu((function(){Uu(t,l,n,r)})),l}(n,t,e,i,r);return Yu(a)}Ku.prototype.render=Zu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Uu(e,t,null,null)},Ku.prototype.unmount=Zu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Uu(null,e,null,null)})),t[hi]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Bt.length&&0!==t&&t<Bt[n].priority;n++);Bt.splice(n,0,e),0===n&&Ft(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ru(t,Xe()),0==(6&Ol)&&(ql=Xe()+500,qi()))}break;case 13:cu((function(){var t=No(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),$u(e,1)}},wt=function(e){if(13===e.tag){var t=No(e,134217728);null!==t&&nu(t,e,134217728,eu()),$u(e,134217728)}},kt=function(e){if(13===e.tag){var t=tu(e),n=No(e,t);null!==n&&nu(n,e,t,eu()),$u(e,t)}},Ct=function(){return bt},St=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(G(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Ei(r);if(!i)throw Error(o(90));$(r),G(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=uu,Ie=cu;var tc={usingClientEntryPoint:!1,Events:[bi,Ai,Ei,xe,_e,uu]},nc={findFiberByHostInstance:gi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(rc),ot=ic}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(o(200));return Vu(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(o(299));var n=!1,r="",i=Hu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=zu(e,1,!1,null,0,n,0,r,i),e[hi]=t.current,qr(8===e.nodeType?e.parentNode:e),new Zu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ye(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Gu(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=Hu;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Qu(t,null,e,1,null!=n?n:null,i,0,a,s),e[hi]=t.current,qr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Ku(t)},t.render=function(e,t,n){if(!Gu(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Gu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var A=b.prototype=new g;A.constructor=b,m(A,y.prototype),A.isPureReactComponent=!0;var E=Array.isArray,w=Object.prototype.hasOwnProperty,k={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,i)&&!C.hasOwnProperty(i)&&(o[i]=t[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:e,key:a,ref:s,props:o,_owner:k.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===o?"."+O(l,0):o,E(a)?(i="",null!=e&&(i=e.replace(_,"$&/")+"/"),I(a,t,i,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(_,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",E(e))for(var u=0;u<e.length;u++){var c=o+O(s=e[u],u);l+=I(s,t,i,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=I(s=s.value,t,i,c=o+O(s,u++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function N(e,t,n){if(null==e)return e;var r=[],i=0;return I(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},B={transition:null},P={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:B,ReactCurrentOwner:k};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=a,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=m({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)w.call(t,u)&&!C.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=B.transition;B.transition={};try{e()}finally{B.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>o(l,n))u<i&&0>o(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<i&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function E(e){if(v=!1,A(e),!m)if(null!==r(u))m=!0,B(w);else{var t=r(c);null!==t&&P(E,t.startTime-e)}}function w(e,n){m=!1,v&&(v=!1,g(x),x=-1),h=!0;var o=p;try{for(A(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!I());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var s=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?d.callback=s:d===r(u)&&i(u),A(n)}else i(u);d=r(u)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&P(E,f.startTime-n),l=!1}return l}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,C=!1,S=null,x=-1,_=5,O=-1;function I(){return!(t.unstable_now()-O<_)}function N(){if(null!==S){var e=t.unstable_now();O=e;var n=!0;try{n=S(!0,e)}finally{n?k():(C=!1,S=null)}}else C=!1}if("function"==typeof b)k=function(){b(N)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,D=T.port2;T.port1.onmessage=N,k=function(){D.postMessage(null)}}else k=function(){y(N,0)};function B(e){S=e,C||(C=!0,k())}function P(e,n){x=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,B(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:f++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(v?(g(x),x=-1):v=!0,P(E,o-a))):(e.sortIndex=s,n(u,e),m||h||(m=!0,B(w))),e},t.unstable_shouldYield=I,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)},379:function(e){"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,f="".concat(u," ").concat(c);o[u]=c+1;var d=n(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:function(e){"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},104:function(e){var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,i),o.exports}i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((function(e){a[e]=function(){return n[e]}}));return a.default=function(){return n},i.d(o,a),o},i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e}(),i.nc=void 0,function(){"use strict";var e=i(745),t=i(294),n=i.t(t,2),r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},a.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function l(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}function u(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}function c(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create;var f="Invariant Violation",d=Object.setPrototypeOf,p=void 0===d?function(e,t){return e.__proto__=t,e}:d,h=function(e){function t(n){void 0===n&&(n=f);var r=e.call(this,"number"==typeof n?f+": "+n+" (see https://github.com/apollographql/invariant-packages)":n)||this;return r.framesToPop=1,r.name=f,p(r,t.prototype),r}return o(t,e),t}(Error);function m(e,t){if(!e)throw new h(t)}var v,y=["debug","log","warn","error","silent"],g=y.indexOf("log");function b(e){return function(){if(y.indexOf(e)>=g){var t=console[e]||console.log;return t.apply(console,arguments)}}}function A(e){try{return e()}catch(e){}}(v=m||(m={})).debug=b("debug"),v.log=b("log"),v.warn=b("warn"),v.error=b("error");var E=A((function(){return globalThis}))||A((function(){return window}))||A((function(){return self}))||A((function(){return global}))||A((function(){return A.constructor("return this")()})),w="__",k=[w,w].join("DEV"),C=function(){try{return Boolean(__DEV__)}catch(e){return Object.defineProperty(E,k,{value:"production"!==A((function(){return"production"})),enumerable:!1,configurable:!0,writable:!0}),E[k]}}();function S(e){try{return e()}catch(e){}}var x=S((function(){return globalThis}))||S((function(){return window}))||S((function(){return self}))||S((function(){return global}))||S((function(){return S.constructor("return this")()})),_=!1;function O(e,t){if(!Boolean(e))throw new Error(t)}function I(e){return N(e,[])}function N(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const n=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:N(t,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const n=Math.min(10,e.length),r=e.length-n,i=[];for(let r=0;r<n;++r)i.push(N(e[r],t));return 1===r?i.push("... 1 more item"):r>1&&i.push(`... ${r} more items`),"["+i.join(", ")+"]"}(e,n);return function(e,t){const n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const r=n.map((([e,n])=>e+": "+N(n,t)));return"{ "+r.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}!x||S((function(){return"production"}))||S((function(){return process}))||(Object.defineProperty(x,"process",{value:{env:{NODE_ENV:"production"}},configurable:!0,enumerable:!1,writable:!0}),_=!0);class T{constructor(e,t="GraphQL request",n={line:1,column:1}){"string"==typeof e||O(!1,`Body must be a string. Received: ${I(e)}.`),this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||O(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||O(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}_&&(delete x.process,_=!1),__DEV__?m("boolean"==typeof C,C):m("boolean"==typeof C,38);var D="function"==typeof WeakMap&&"ReactNative"!==A((function(){return navigator.product})),B="function"==typeof WeakSet,P="function"==typeof Symbol&&"function"==typeof Symbol.for,R=P&&Symbol.asyncIterator,j="function"==typeof A((function(){return window.document.createElement})),F=A((function(){return navigator.userAgent.indexOf("jsdom")>=0}))||!1,L=j&&!F,M=P?Symbol.for("__APOLLO_CONTEXT__"):"__APOLLO_CONTEXT__";function z(){var e=t.createContext[M];return e||(Object.defineProperty(t.createContext,M,{value:e=t.createContext({}),enumerable:!1,writable:!1,configurable:!0}),e.displayName="ApolloContext"),e}var V,q=function(e){var n=e.client,r=e.children,i=z();return t.createElement(i.Consumer,null,(function(e){return void 0===e&&(e={}),n&&e.client!==n&&(e=Object.assign({},e,{client:n})),__DEV__?m(e.client,'ApolloProvider was not passed a client instance. Make sure you pass in your client via the "client" prop.'):m(e.client,28),t.createElement(i.Provider,{value:e},r)}))};function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Q.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(V||(V={}));const U="popstate";function Y(e,t){if(!1===e||null==e)throw new Error(t)}function W(e){return{usr:e.state,key:e.key}}function $(e,t,n,r){return void 0===n&&(n=null),Q({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?Z(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function H(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function Z(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function K(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:window.location.href,n="string"==typeof e?e:H(e);return Y(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}var X;function G(e,t,n){void 0===n&&(n="/");let r=se(("string"==typeof t?Z(t):t).pathname||"/",n);if(null==r)return null;let i=J(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(i);let o=null;for(let e=0;null==o&&e<i.length;++e)o=ie(i[e],ae(r));return o}function J(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let i=(e,i,o)=>{let a={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};a.relativePath.startsWith("/")&&(Y(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let s=de([r,a.relativePath]),l=n.concat(a);e.children&&e.children.length>0&&(Y(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+s+'".'),J(e.children,t,l,s)),(null!=e.path||e.index)&&t.push({path:s,score:re(s,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of ee(e.path))i(e,t,n);else i(e,t)})),t}function ee(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,i=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return i?[o,""]:[o];let a=ee(r.join("/")),s=[];return s.push(...a.map((e=>""===e?o:[o,e].join("/")))),i&&s.push(...a),s.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(X||(X={}));const te=/^:\w+$/,ne=e=>"*"===e;function re(e,t){let n=e.split("/"),r=n.length;return n.some(ne)&&(r+=-2),t&&(r+=2),n.filter((e=>!ne(e))).reduce(((e,t)=>e+(te.test(t)?3:""===t?1:10)),r)}function ie(e,t){let{routesMeta:n}=e,r={},i="/",o=[];for(let e=0;e<n.length;++e){let a=n[e],s=e===n.length-1,l="/"===i?t:t.slice(i.length)||"/",u=oe({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},l);if(!u)return null;Object.assign(r,u.params);let c=a.route;o.push({params:r,pathname:de([i,u.pathname]),pathnameBase:pe(de([i,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(i=de([i,u.pathnameBase]))}return o}function oe(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),le("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?i+="\\/*$":""!==e&&"/"!==e&&(i+="(?:(?=\\/|$))"),[new RegExp(i,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),s=i.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";a=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return le(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(s[n]||"",t),e}),{}),pathname:o,pathnameBase:a,pattern:e}}function ae(e){try{return decodeURI(e)}catch(t){return le(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function se(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function le(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function ue(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function ce(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function fe(e,t,n,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=Z(e):(i=Q({},e),Y(!i.pathname||!i.pathname.includes("?"),ue("?","pathname","search",i)),Y(!i.pathname||!i.pathname.includes("#"),ue("#","pathname","hash",i)),Y(!i.search||!i.search.includes("#"),ue("#","search","hash",i)));let o,a=""===e||""===i.pathname,s=a?"/":i.pathname;if(r||null==s)o=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}o=e>=0?t[e]:"/"}let l=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?Z(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:he(r),hash:me(i)}}(i,o),u=s&&"/"!==s&&s.endsWith("/"),c=(a||"."===s)&&n.endsWith("/");return l.pathname.endsWith("/")||!u&&!c||(l.pathname+="/"),l}const de=e=>e.join("/").replace(/\/\/+/g,"/"),pe=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),he=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",me=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class ve extends Error{}class ye{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function ge(e){return e instanceof ye}const be=["post","put","patch","delete"],Ae=(new Set(be),["get",...be]);function Ee(){return Ee=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ee.apply(this,arguments)}new Set(Ae),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;"function"==typeof Object.is&&Object.is;const{useState:we,useEffect:ke,useLayoutEffect:Ce,useDebugValue:Se}=n;"undefined"==typeof window||void 0===window.document||window.document.createElement,n.useSyncExternalStore;const xe=t.createContext(null),_e=t.createContext(null),Oe=t.createContext(null),Ie=t.createContext(null),Ne=t.createContext(null),Te=t.createContext({outlet:null,matches:[]}),De=t.createContext(null);function Be(){return null!=t.useContext(Ne)}function Pe(){return Be()||Y(!1),t.useContext(Ne).location}function Re(){Be()||Y(!1);let{basename:e,navigator:n}=t.useContext(Ie),{matches:r}=t.useContext(Te),{pathname:i}=Pe(),o=JSON.stringify(ce(r).map((e=>e.pathnameBase))),a=t.useRef(!1);t.useEffect((()=>{a.current=!0}));let s=t.useCallback((function(t,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof t)return void n.go(t);let s=fe(t,JSON.parse(o),i,"path"===r.relative);"/"!==e&&(s.pathname="/"===s.pathname?e:de([e,s.pathname])),(r.replace?n.replace:n.push)(s,r.state,r)}),[e,n,o,i]);return s}function je(){let{matches:e}=t.useContext(Te),n=e[e.length-1];return n?n.params:{}}function Fe(e,n){let{relative:r}=void 0===n?{}:n,{matches:i}=t.useContext(Te),{pathname:o}=Pe(),a=JSON.stringify(ce(i).map((e=>e.pathnameBase)));return t.useMemo((()=>fe(e,JSON.parse(a),o,"path"===r)),[e,a,o,r])}function Le(){let e=function(){var e;let n=t.useContext(De),r=function(e){let n=t.useContext(Oe);return n||Y(!1),n}(qe.UseRouteError),i=function(e){let n=function(e){let n=t.useContext(Te);return n||Y(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||Y(!1),r.route.id}(qe.UseRouteError);return n||(null==(e=r.errors)?void 0:e[i])}(),n=ge(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,i="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:i},a={padding:"2px 4px",backgroundColor:i};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unhandled Thrown Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,t.createElement("p",null,"💿 Hey developer 👋"),t.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",t.createElement("code",{style:a},"errorElement")," props on ",t.createElement("code",{style:a},"<Route>")))}class Me extends t.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(Te.Provider,{value:this.props.routeContext},t.createElement(De.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ze(e){let{routeContext:n,match:r,children:i}=e,o=t.useContext(xe);return o&&r.route.errorElement&&(o._deepestRenderedBoundaryId=r.route.id),t.createElement(Te.Provider,{value:n},i)}var Ve,qe,Qe;function Ue(e){Y(!1)}function Ye(e){let{basename:n="/",children:r=null,location:i,navigationType:o=V.Pop,navigator:a,static:s=!1}=e;Be()&&Y(!1);let l=n.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:l,navigator:a,static:s})),[l,a,s]);"string"==typeof i&&(i=Z(i));let{pathname:c="/",search:f="",hash:d="",state:p=null,key:h="default"}=i,m=t.useMemo((()=>{let e=se(c,l);return null==e?null:{pathname:e,search:f,hash:d,state:p,key:h}}),[l,c,f,d,p,h]);return null==m?null:t.createElement(Ie.Provider,{value:u},t.createElement(Ne.Provider,{children:r,value:{location:m,navigationType:o}}))}function We(e){let{children:n,location:r}=e,i=t.useContext(_e);return function(e,n){Be()||Y(!1);let{navigator:r}=t.useContext(Ie),i=t.useContext(Oe),{matches:o}=t.useContext(Te),a=o[o.length-1],s=a?a.params:{},l=(a&&a.pathname,a?a.pathnameBase:"/");a&&a.route;let u,c=Pe();if(n){var f;let e="string"==typeof n?Z(n):n;"/"===l||(null==(f=e.pathname)?void 0:f.startsWith(l))||Y(!1),u=e}else u=c;let d=u.pathname||"/",p=G(e,{pathname:"/"===l?d:d.slice(l.length)||"/"}),h=function(e,n,r){if(void 0===n&&(n=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}let i=e,o=null==r?void 0:r.errors;if(null!=o){let e=i.findIndex((e=>e.route.id&&(null==o?void 0:o[e.route.id])));e>=0||Y(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,a,s)=>{let l=a.route.id?null==o?void 0:o[a.route.id]:null,u=r?a.route.errorElement||t.createElement(Le,null):null,c=n.concat(i.slice(0,s+1)),f=()=>t.createElement(ze,{match:a,routeContext:{outlet:e,matches:c}},l?u:void 0!==a.route.element?a.route.element:e);return r&&(a.route.errorElement||0===s)?t.createElement(Me,{location:r.location,component:u,error:l,children:f(),routeContext:{outlet:null,matches:c}}):f()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:de([l,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?l:de([l,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,i||void 0);return n&&h?t.createElement(Ne.Provider,{value:{location:Ee({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:V.Pop}},h):h}(i&&!n?i.router.routes:He(n),r)}!function(e){e.UseRevalidator="useRevalidator"}(Ve||(Ve={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(qe||(qe={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(Qe||(Qe={})),new Promise((()=>{}));class $e extends t.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,i=Qe.pending;if(n instanceof Promise)if(this.state.error){Qe.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?void 0!==r._error?Qe.error:void 0!==r._data?Qe.success:Qe.pending:(Qe.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else Qe.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(i===Qe.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(i===Qe.error&&!t)throw r._error;if(i===Qe.error)return React.createElement(AwaitContext.Provider,{value:r,children:t});if(i===Qe.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function He(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,i)=>{if(!t.isValidElement(e))return;if(e.type===t.Fragment)return void r.push.apply(r,He(e.props.children,n));e.type!==Ue&&Y(!1),e.props.index&&e.props.children&&Y(!1);let o=[...n,i],a={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(a.children=He(e.props.children,o)),r.push(a)})),r}function Ze(){return Ze=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ze.apply(this,arguments)}const Ke=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function Xe(e){let{basename:n,children:r,window:i}=e,o=t.useRef();null==o.current&&(o.current=function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:i=document.defaultView,v5Compat:o=!1}=r,a=i.history,s=V.Pop,l=null;function u(){s=V.Pop,l&&l({action:s,location:c.location})}let c={get action(){return s},get location(){return e(i,a)},listen(e){if(l)throw new Error("A history only accepts one active listener");return i.addEventListener(U,u),l=e,()=>{i.removeEventListener(U,u),l=null}},createHref(e){return t(i,e)},encodeLocation(e){let t=K("string"==typeof e?e:H(e));return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){s=V.Push;let r=$(c.location,e,t);n&&n(r,e);let u=W(r),f=c.createHref(r);try{a.pushState(u,"",f)}catch(e){i.location.assign(f)}o&&l&&l({action:s,location:c.location})},replace:function(e,t){s=V.Replace;let r=$(c.location,e,t);n&&n(r,e);let i=W(r),u=c.createHref(r);a.replaceState(i,"",u),o&&l&&l({action:s,location:c.location})},go(e){return a.go(e)}};return c}((function(e,t){let{pathname:n,search:r,hash:i}=e.location;return $("",{pathname:n,search:r,hash:i},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:H(t)}),null,e)}({window:i,v5Compat:!0}));let a=o.current,[s,l]=t.useState({action:a.action,location:a.location});return t.useLayoutEffect((()=>a.listen(l)),[a]),t.createElement(Ye,{basename:n,children:r,location:s.location,navigationType:s.action,navigator:a})}const Ge=t.forwardRef((function(e,n){let{onClick:r,relative:i,reloadDocument:o,replace:a,state:s,target:l,to:u,preventScrollReset:c}=e,f=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,Ke),d=function(e,n){let{relative:r}=void 0===n?{}:n;Be()||Y(!1);let{basename:i,navigator:o}=t.useContext(Ie),{hash:a,pathname:s,search:l}=Fe(e,{relative:r}),u=s;return"/"!==i&&(u="/"===s?i:de([i,s])),o.createHref({pathname:u,search:l,hash:a})}(u,{relative:i}),p=function(e,n){let{target:r,replace:i,state:o,preventScrollReset:a,relative:s}=void 0===n?{}:n,l=Re(),u=Pe(),c=Fe(e,{relative:s});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==i?i:H(u)===H(c);l(e,{replace:n,state:o,preventScrollReset:a,relative:s})}}),[u,l,c,i,o,r,e,a,s])}(u,{replace:a,state:s,target:l,preventScrollReset:c,relative:i});return t.createElement("a",Ze({},f,{href:d,onClick:o?r:function(e){r&&r(e),e.defaultPrevented||p(e)},ref:n,target:l}))}));var Je,et;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(Je||(Je={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(et||(et={}));class tt{constructor(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}}class nt{constructor(e,t,n,r,i,o){this.kind=e,this.start=t,this.end=n,this.line=r,this.column=i,this.value=o,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}}const rt={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},it=new Set(Object.keys(rt));function ot(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&it.has(t)}var at,st,lt;!function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"}(at||(at={})),(lt=st||(st={})).NAME="Name",lt.DOCUMENT="Document",lt.OPERATION_DEFINITION="OperationDefinition",lt.VARIABLE_DEFINITION="VariableDefinition",lt.SELECTION_SET="SelectionSet",lt.FIELD="Field",lt.ARGUMENT="Argument",lt.FRAGMENT_SPREAD="FragmentSpread",lt.INLINE_FRAGMENT="InlineFragment",lt.FRAGMENT_DEFINITION="FragmentDefinition",lt.VARIABLE="Variable",lt.INT="IntValue",lt.FLOAT="FloatValue",lt.STRING="StringValue",lt.BOOLEAN="BooleanValue",lt.NULL="NullValue",lt.ENUM="EnumValue",lt.LIST="ListValue",lt.OBJECT="ObjectValue",lt.OBJECT_FIELD="ObjectField",lt.DIRECTIVE="Directive",lt.NAMED_TYPE="NamedType",lt.LIST_TYPE="ListType",lt.NON_NULL_TYPE="NonNullType",lt.SCHEMA_DEFINITION="SchemaDefinition",lt.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",lt.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",lt.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",lt.FIELD_DEFINITION="FieldDefinition",lt.INPUT_VALUE_DEFINITION="InputValueDefinition",lt.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",lt.UNION_TYPE_DEFINITION="UnionTypeDefinition",lt.ENUM_TYPE_DEFINITION="EnumTypeDefinition",lt.ENUM_VALUE_DEFINITION="EnumValueDefinition",lt.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",lt.DIRECTIVE_DEFINITION="DirectiveDefinition",lt.SCHEMA_EXTENSION="SchemaExtension",lt.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",lt.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",lt.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",lt.UNION_TYPE_EXTENSION="UnionTypeExtension",lt.ENUM_TYPE_EXTENSION="EnumTypeExtension",lt.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";const ut=Object.freeze({});function ct(e,t,n=rt){const r=new Map;for(const e of Object.values(st))r.set(e,ft(t,e));let i,o,a,s=Array.isArray(e),l=[e],u=-1,c=[],f=e;const d=[],p=[];do{u++;const e=u===l.length,y=e&&0!==c.length;if(e){if(o=0===p.length?void 0:d[d.length-1],f=a,a=p.pop(),y)if(s){f=f.slice();let e=0;for(const[t,n]of c){const r=t-e;null===n?(f.splice(r,1),e++):f[r]=n}}else{f=Object.defineProperties({},Object.getOwnPropertyDescriptors(f));for(const[e,t]of c)f[e]=t}u=i.index,l=i.keys,c=i.edits,s=i.inArray,i=i.prev}else if(a){if(o=s?u:l[u],f=a[o],null==f)continue;d.push(o)}let g;if(!Array.isArray(f)){var h,m;ot(f)||O(!1,`Invalid AST Node: ${I(f)}.`);const n=e?null===(h=r.get(f.kind))||void 0===h?void 0:h.leave:null===(m=r.get(f.kind))||void 0===m?void 0:m.enter;if(g=null==n?void 0:n.call(t,f,o,a,d,p),g===ut)break;if(!1===g){if(!e){d.pop();continue}}else if(void 0!==g&&(c.push([o,g]),!e)){if(!ot(g)){d.pop();continue}f=g}}var v;void 0===g&&y&&c.push([o,f]),e?d.pop():(i={inArray:s,index:u,keys:l,edits:c,prev:i},s=Array.isArray(f),l=s?f:null!==(v=n[f.kind])&&void 0!==v?v:[],u=-1,c=[],a&&p.push(a),a=f)}while(void 0!==i);return 0!==c.length?c[c.length-1][1]:e}function ft(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function dt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ht(e,t,n){return t&&pt(e.prototype,t),n&&pt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var mt=function(){return"function"==typeof Symbol},vt=function(e){return mt()&&Boolean(Symbol[e])},yt=function(e){return vt(e)?Symbol[e]:"@@"+e};mt()&&!vt("observable")&&(Symbol.observable=Symbol("observable"));var gt=yt("iterator"),bt=yt("observable"),At=yt("species");function Et(e,t){var n=e[t];if(null!=n){if("function"!=typeof n)throw new TypeError(n+" is not a function");return n}}function wt(e){var t=e.constructor;return void 0!==t&&null===(t=t[At])&&(t=void 0),void 0!==t?t:Dt}function kt(e){return e instanceof Dt}function Ct(e){Ct.log?Ct.log(e):setTimeout((function(){throw e}))}function St(e){Promise.resolve().then((function(){try{e()}catch(e){Ct(e)}}))}function xt(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var n=Et(t,"unsubscribe");n&&n.call(t)}}catch(e){Ct(e)}}function _t(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function Ot(e,t,n){e._state="running";var r=e._observer;try{var i=Et(r,t);switch(t){case"next":i&&i.call(r,n);break;case"error":if(_t(e),!i)throw n;i.call(r,n);break;case"complete":_t(e),i&&i.call(r)}}catch(e){Ct(e)}"closed"===e._state?xt(e):"running"===e._state&&(e._state="ready")}function It(e,t,n){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:n}],void St((function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var n=0;n<t.length&&(Ot(e,t[n].type,t[n].value),"closed"!==e._state);++n);}}(e)}))):void Ot(e,t,n);e._queue.push({type:t,value:n})}}var Nt=function(){function e(e,t){this._cleanup=void 0,this._observer=e,this._queue=void 0,this._state="initializing";var n=new Tt(this);try{this._cleanup=t.call(void 0,n)}catch(e){n.error(e)}"initializing"===this._state&&(this._state="ready")}return e.prototype.unsubscribe=function(){"closed"!==this._state&&(_t(this),xt(this))},ht(e,[{key:"closed",get:function(){return"closed"===this._state}}]),e}(),Tt=function(){function e(e){this._subscription=e}var t=e.prototype;return t.next=function(e){It(this._subscription,"next",e)},t.error=function(e){It(this._subscription,"error",e)},t.complete=function(){It(this._subscription,"complete")},ht(e,[{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),Dt=function(){function e(t){if(!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}var t=e.prototype;return t.subscribe=function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new Nt(e,this._subscriber)},t.forEach=function(e){var t=this;return new Promise((function(n,r){if("function"==typeof e)var i=t.subscribe({next:function(t){try{e(t,o)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});else r(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),n()}}))},t.map=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(wt(this))((function(n){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))},t.filter=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(wt(this))((function(n){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))},t.reduce=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=wt(this),r=arguments.length>1,i=!1,o=arguments[1],a=o;return new n((function(n){return t.subscribe({next:function(t){var o=!i;if(i=!0,!o||r)try{a=e(a,t)}catch(e){return n.error(e)}else a=t},error:function(e){n.error(e)},complete:function(){if(!i&&!r)return n.error(new TypeError("Cannot reduce an empty sequence"));n.next(a),n.complete()}})}))},t.concat=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=wt(this);return new i((function(t){var r,o=0;return function e(a){r=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){o===n.length?(r=void 0,t.complete()):e(i.from(n[o++]))}})}(e),function(){r&&(r.unsubscribe(),r=void 0)}}))},t.flatMap=function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=wt(this);return new n((function(r){var i=[],o=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return r.error(e)}var o=n.from(t).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),a()}});i.push(o)},error:function(e){r.error(e)},complete:function(){a()}});function a(){o.closed&&0===i.length&&r.complete()}return function(){i.forEach((function(e){return e.unsubscribe()})),o.unsubscribe()}}))},t[bt]=function(){return this},e.from=function(t){var n="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var r=Et(t,bt);if(r){var i=r.call(t);if(Object(i)!==i)throw new TypeError(i+" is not an object");return kt(i)&&i.constructor===n?i:new n((function(e){return i.subscribe(e)}))}if(vt("iterator")&&(r=Et(t,gt)))return new n((function(e){St((function(){if(!e.closed){for(var n,i=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return dt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(r.call(t));!(n=i()).done;){var o=n.value;if(e.next(o),e.closed)return}e.complete()}}))}));if(Array.isArray(t))return new n((function(e){St((function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}}))}));throw new TypeError(t+" is not observable")},e.of=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i="function"==typeof this?this:e;return new i((function(e){St((function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}}))}))},ht(e,null,[{key:At,get:function(){return this}}]),e}();function Bt(e){return null!==e&&"object"==typeof e}function Pt(e,t){var n=t,r=[];return e.definitions.forEach((function(e){if("OperationDefinition"===e.kind)throw __DEV__?new h("Found a ".concat(e.operation," operation").concat(e.name?" named '".concat(e.name.value,"'"):"",". ")+"No operations are allowed when using a fragment as a query. Only fragments are allowed."):new h(43);"FragmentDefinition"===e.kind&&r.push(e)})),void 0===n&&(__DEV__?m(1===r.length,"Found ".concat(r.length," fragments. `fragmentName` must be provided when there is not exactly 1 fragment.")):m(1===r.length,44),n=r[0].name.value),a(a({},e),{definitions:c([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:n}}]}}],e.definitions,!0)})}function Rt(e){void 0===e&&(e=[]);var t={};return e.forEach((function(e){t[e.name.value]=e})),t}function jt(e,t){switch(e.kind){case"InlineFragment":return e;case"FragmentSpread":var n=e.name.value;if("function"==typeof t)return t(n);var r=t&&t[n];return __DEV__?m(r,"No fragment named ".concat(n)):m(r,45),r||null;default:return null}}function Ft(e){return{__ref:String(e)}}function Lt(e){return Boolean(e&&"object"==typeof e&&"string"==typeof e.__ref)}function Mt(e,t,n,r){if(function(e){return"IntValue"===e.kind}(n)||function(e){return"FloatValue"===e.kind}(n))e[t.value]=Number(n.value);else if(function(e){return"BooleanValue"===e.kind}(n)||function(e){return"StringValue"===e.kind}(n))e[t.value]=n.value;else if(function(e){return"ObjectValue"===e.kind}(n)){var i={};n.fields.map((function(e){return Mt(i,e.name,e.value,r)})),e[t.value]=i}else if(function(e){return"Variable"===e.kind}(n)){var o=(r||{})[n.name.value];e[t.value]=o}else if(function(e){return"ListValue"===e.kind}(n))e[t.value]=n.values.map((function(e){var n={};return Mt(n,t,e,r),n[t.value]}));else if(function(e){return"EnumValue"===e.kind}(n))e[t.value]=n.value;else{if(!function(e){return"NullValue"===e.kind}(n))throw __DEV__?new h('The inline argument "'.concat(t.value,'" of kind "').concat(n.kind,'"')+"is not supported. Use variables instead of inline arguments to overcome this limitation."):new h(54);e[t.value]=null}}mt()&&Object.defineProperty(Dt,Symbol("extensions"),{value:{symbol:bt,hostReportError:Ct},configurable:!0});var zt=["connection","include","skip","client","rest","export"],Vt=Object.assign((function(e,t,n){if(t&&n&&n.connection&&n.connection.key){if(n.connection.filter&&n.connection.filter.length>0){var r=n.connection.filter?n.connection.filter:[];r.sort();var i={};return r.forEach((function(e){i[e]=t[e]})),"".concat(n.connection.key,"(").concat(qt(i),")")}return n.connection.key}var o=e;if(t){var a=qt(t);o+="(".concat(a,")")}return n&&Object.keys(n).forEach((function(e){-1===zt.indexOf(e)&&(n[e]&&Object.keys(n[e]).length?o+="@".concat(e,"(").concat(qt(n[e]),")"):o+="@".concat(e))})),o}),{setStringify:function(e){var t=qt;return qt=e,t}}),qt=function(e){return JSON.stringify(e,Qt)};function Qt(e,t){return Bt(t)&&!Array.isArray(t)&&(t=Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e}),{})),t}function Ut(e,t){if(e.arguments&&e.arguments.length){var n={};return e.arguments.forEach((function(e){var r=e.name,i=e.value;return Mt(n,r,i,t)})),n}return null}function Yt(e){return e.alias?e.alias.value:e.name.value}function Wt(e,t,n){if("string"==typeof e.__typename)return e.__typename;for(var r=0,i=t.selections;r<i.length;r++){var o=i[r];if($t(o)){if("__typename"===o.name.value)return e[Yt(o)]}else{var a=Wt(e,jt(o,n).selectionSet,n);if("string"==typeof a)return a}}}function $t(e){return"Field"===e.kind}function Ht(e){return"InlineFragment"===e.kind}function Zt(e){__DEV__?m(e&&"Document"===e.kind,'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql'):m(e&&"Document"===e.kind,46);var t=e.definitions.filter((function(e){return"FragmentDefinition"!==e.kind})).map((function(e){if("OperationDefinition"!==e.kind)throw __DEV__?new h('Schema type definitions not allowed in queries. Found: "'.concat(e.kind,'"')):new h(47);return e}));return __DEV__?m(t.length<=1,"Ambiguous GraphQL document: contains ".concat(t.length," operations")):m(t.length<=1,48),e}function Kt(e){return Zt(e),e.definitions.filter((function(e){return"OperationDefinition"===e.kind}))[0]}function Xt(e){return e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&e.name})).map((function(e){return e.name.value}))[0]||null}function Gt(e){return e.definitions.filter((function(e){return"FragmentDefinition"===e.kind}))}function Jt(e){var t=Kt(e);return __DEV__?m(t&&"query"===t.operation,"Must contain a query definition."):m(t&&"query"===t.operation,49),t}function en(e){var t;Zt(e);for(var n=0,r=e.definitions;n<r.length;n++){var i=r[n];if("OperationDefinition"===i.kind){var o=i.operation;if("query"===o||"mutation"===o||"subscription"===o)return i}"FragmentDefinition"!==i.kind||t||(t=i)}if(t)return t;throw __DEV__?new h("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment."):new h(53)}function tn(e){var t=Object.create(null),n=e&&e.variableDefinitions;return n&&n.length&&n.forEach((function(e){e.defaultValue&&Mt(t,e.variable.name,e.defaultValue)})),t}function nn(e,t){return t?t(e):Dt.of()}function rn(e){return"function"==typeof e?new sn(e):e}function on(e){return e.request.length<=1}var an=function(e){function t(t,n){var r=e.call(this,t)||this;return r.link=n,r}return o(t,e),t}(Error),sn=function(){function e(e){e&&(this.request=e)}return e.empty=function(){return new e((function(){return Dt.of()}))},e.from=function(t){return 0===t.length?e.empty():t.map(rn).reduce((function(e,t){return e.concat(t)}))},e.split=function(t,n,r){var i=rn(n),o=rn(r||new e(nn));return on(i)&&on(o)?new e((function(e){return t(e)?i.request(e)||Dt.of():o.request(e)||Dt.of()})):new e((function(e,n){return t(e)?i.request(e,n)||Dt.of():o.request(e,n)||Dt.of()}))},e.execute=function(e,t){return e.request(function(e,t){var n=a({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){n=a(a({},n),"function"==typeof e?e(n):e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return a({},n)}}),t}(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?Xt(t.query)||void 0:""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(t.indexOf(i)<0)throw __DEV__?new h("illegal argument: ".concat(i)):new h(26)}return e}(t))))||Dt.of()},e.concat=function(t,n){var r=rn(t);if(on(r))return __DEV__&&m.warn(new an("You are calling concat on a terminating link, which will have no effect",r)),r;var i=rn(n);return on(i)?new e((function(e){return r.request(e,(function(e){return i.request(e)||Dt.of()}))||Dt.of()})):new e((function(e,t){return r.request(e,(function(e){return i.request(e,t)||Dt.of()}))||Dt.of()}))},e.prototype.split=function(t,n,r){return this.concat(e.split(t,n,r||new e(nn)))},e.prototype.concat=function(t){return e.concat(this,t)},e.prototype.request=function(e,t){throw __DEV__?new h("request is not implemented"):new h(21)},e.prototype.onError=function(e,t){if(t&&t.error)return t.error(e),!1;throw e},e.prototype.setOnError=function(e){return this.onError=e,this},e}();function ln(e,t){var n=e.directives;return!n||!n.length||function(e){var t=[];return e&&e.length&&e.forEach((function(e){if(function(e){var t=e.name.value;return"skip"===t||"include"===t}(e)){var n=e.arguments,r=e.name.value;__DEV__?m(n&&1===n.length,"Incorrect number of arguments for the @".concat(r," directive.")):m(n&&1===n.length,40);var i=n[0];__DEV__?m(i.name&&"if"===i.name.value,"Invalid argument for the @".concat(r," directive.")):m(i.name&&"if"===i.name.value,41);var o=i.value;__DEV__?m(o&&("Variable"===o.kind||"BooleanValue"===o.kind),"Argument for the @".concat(r," directive must be a variable or a boolean value.")):m(o&&("Variable"===o.kind||"BooleanValue"===o.kind),42),t.push({directive:e,ifArgument:i})}})),t}(n).every((function(e){var n=e.directive,r=e.ifArgument,i=!1;return"Variable"===r.value.kind?(i=t&&t[r.value.name.value],__DEV__?m(void 0!==i,"Invalid variable referenced in @".concat(n.name.value," directive.")):m(void 0!==i,39)):i=r.value.value,"skip"===n.name.value?!i:i}))}function un(e,t,n){var r=new Set(e),i=r.size;return ct(t,{Directive:function(e){if(r.delete(e.name.value)&&(!n||!r.size))return ut}}),n?!r.size:r.size<i}function cn(e){return e&&un(["client","export"],e,!0)}var fn=function(e,t){var n;try{n=JSON.stringify(e)}catch(e){var r=__DEV__?new h("Network request failed. ".concat(t," is not serializable: ").concat(e.message)):new h(23);throw r.parseError=e,r}return n};function dn(e){var t={next:function(){return e.read()}};return R&&(t[Symbol.asyncIterator]=function(){return this}),t}function pn(e){var t,n,r,i,o=e;if(e.body&&(o=e.body),i=o,R&&i[Symbol.asyncIterator])return function(e){var t,n=e[Symbol.asyncIterator]();return(t={next:function(){return n.next()}})[Symbol.asyncIterator]=function(){return this},t}(o);if(function(e){return!!e.getReader}(o))return dn(o.getReader());if(function(e){return!!e.stream}(o))return dn(o.stream().getReader());if(function(e){return!!e.arrayBuffer}(o))return t=o.arrayBuffer(),n=!1,r={next:function(){return n?Promise.resolve({value:void 0,done:!0}):(n=!0,new Promise((function(e,n){t.then((function(t){e({value:t,done:!1})})).catch(n)})))}},R&&(r[Symbol.asyncIterator]=function(){return this}),r;if(function(e){return!!e.pipe}(o))return function(e){var t=null,n=null,r=!1,i=[],o=[];function a(e){if(!n){if(o.length){var t=o.shift();if(Array.isArray(t)&&t[0])return t[0]({value:e,done:!1})}i.push(e)}}function s(e){n=e,o.slice().forEach((function(t){t[1](e)})),!t||t()}function l(){r=!0,o.slice().forEach((function(e){e[0]({value:void 0,done:!0})})),!t||t()}t=function(){t=null,e.removeListener("data",a),e.removeListener("error",s),e.removeListener("end",l),e.removeListener("finish",l),e.removeListener("close",l)},e.on("data",a),e.on("error",s),e.on("end",l),e.on("finish",l),e.on("close",l);var u={next:function(){return new Promise((function(e,t){return n?t(n):i.length?e({value:i.shift(),done:!1}):r?e({value:void 0,done:!0}):void o.push([e,t])}))}};return R&&(u[Symbol.asyncIterator]=function(){return this}),u}(o);throw new Error("Unknown body type for responseIterator. Please pass a streamable response.")}var hn=function(e,t,n){var r=new Error(n);throw r.name="ServerError",r.response=e,r.statusCode=e.status,r.result=t,r},mn=Object.prototype.hasOwnProperty;function vn(e){var t={};return e.split("\n").forEach((function(e){var n=e.indexOf(":");if(n>-1){var r=e.slice(0,n).trim().toLowerCase(),i=e.slice(n+1).trim();t[r]=i}})),t}function yn(e,t){e.status>=300&&hn(e,function(){try{return JSON.parse(t)}catch(e){return t}}(),"Response not successful: Received status code ".concat(e.status));try{return JSON.parse(t)}catch(r){var n=r;throw n.name="ServerParseError",n.response=e,n.statusCode=e.status,n.bodyText=t,n}}function gn(e,t){var n,r;"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&(null===(n=t.next)||void 0===n||n.call(t,e.result)),null===(r=t.error)||void 0===r||r.call(t,e))}function bn(e){return 9===e||32===e}function An(e){return e>=48&&e<=57}function En(e){return e>=97&&e<=122||e>=65&&e<=90}function wn(e){return En(e)||95===e}function kn(e){var t;let n=Number.MAX_SAFE_INTEGER,r=null,i=-1;for(let t=0;t<e.length;++t){var o;const a=e[t],s=Cn(a);s!==a.length&&(r=null!==(o=r)&&void 0!==o?o:t,i=t,0!==t&&s<n&&(n=s))}return e.map(((e,t)=>0===t?e:e.slice(n))).slice(null!==(t=r)&&void 0!==t?t:0,i+1)}function Cn(e){let t=0;for(;t<e.length&&bn(e.charCodeAt(t));)++t;return t}const Sn=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function xn(e){return _n[e.charCodeAt(0)]}const _n=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function On(e){return ct(e,In)}const In={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>Nn(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=Dn("(",Nn(e.variableDefinitions,", "),")"),n=Nn([e.operation,Nn([e.name,t]),Nn(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:r})=>e+": "+t+Dn(" = ",n)+Dn(" ",Nn(r," "))},SelectionSet:{leave:({selections:e})=>Tn(e)},Field:{leave({alias:e,name:t,arguments:n,directives:r,selectionSet:i}){const o=Dn("",e,": ")+t;let a=o+Dn("(",Nn(n,", "),")");return a.length>80&&(a=o+Dn("(\n",Bn(Nn(n,"\n")),"\n)")),Nn([a,Nn(r," "),i]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+Dn(" ",Nn(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>Nn(["...",Dn("on ",e),Nn(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:r,selectionSet:i})=>`fragment ${e}${Dn("(",Nn(n,", "),")")} on ${t} ${Dn("",Nn(r," ")," ")}`+i},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?function(e,t){const n=e.replace(/"""/g,'\\"""'),r=n.split(/\r\n|[\n\r]/g),i=1===r.length,o=r.length>1&&r.slice(1).every((e=>0===e.length||bn(e.charCodeAt(0)))),a=n.endsWith('\\"""'),s=e.endsWith('"')&&!a,l=e.endsWith("\\"),u=s||l,c=!i||e.length>70||u||o||a;let f="";const d=i&&bn(e.charCodeAt(0));return(c&&!d||o)&&(f+="\n"),f+=n,(c||u)&&(f+="\n"),'"""'+f+'"""'}(e):`"${e.replace(Sn,xn)}"`},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+Nn(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+Nn(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+Dn("(",Nn(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>Dn("",e,"\n")+Nn(["schema",Nn(t," "),Tn(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>Dn("",e,"\n")+Nn(["scalar",t,Nn(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:r,fields:i})=>Dn("",e,"\n")+Nn(["type",t,Dn("implements ",Nn(n," & ")),Nn(r," "),Tn(i)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:r,directives:i})=>Dn("",e,"\n")+t+(Pn(n)?Dn("(\n",Bn(Nn(n,"\n")),"\n)"):Dn("(",Nn(n,", "),")"))+": "+r+Dn(" ",Nn(i," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:r,directives:i})=>Dn("",e,"\n")+Nn([t+": "+n,Dn("= ",r),Nn(i," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:r,fields:i})=>Dn("",e,"\n")+Nn(["interface",t,Dn("implements ",Nn(n," & ")),Nn(r," "),Tn(i)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:r})=>Dn("",e,"\n")+Nn(["union",t,Nn(n," "),Dn("= ",Nn(r," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:r})=>Dn("",e,"\n")+Nn(["enum",t,Nn(n," "),Tn(r)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>Dn("",e,"\n")+Nn([t,Nn(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:r})=>Dn("",e,"\n")+Nn(["input",t,Nn(n," "),Tn(r)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:r,locations:i})=>Dn("",e,"\n")+"directive @"+t+(Pn(n)?Dn("(\n",Bn(Nn(n,"\n")),"\n)"):Dn("(",Nn(n,", "),")"))+(r?" repeatable":"")+" on "+Nn(i," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>Nn(["extend schema",Nn(e," "),Tn(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>Nn(["extend scalar",e,Nn(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:r})=>Nn(["extend type",e,Dn("implements ",Nn(t," & ")),Nn(n," "),Tn(r)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:r})=>Nn(["extend interface",e,Dn("implements ",Nn(t," & ")),Nn(n," "),Tn(r)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>Nn(["extend union",e,Nn(t," "),Dn("= ",Nn(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>Nn(["extend enum",e,Nn(t," "),Tn(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>Nn(["extend input",e,Nn(t," "),Tn(n)]," ")}};function Nn(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function Tn(e){return Dn("{\n",Bn(Nn(e,"\n")),"\n}")}function Dn(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function Bn(e){return Dn("  ",e.replace(/\n/g,"\n  "))}function Pn(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}var Rn={http:{includeQuery:!0,includeExtensions:!1,preserveHeaderCase:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},jn=function(e,t){return t(e)};function Fn(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={},o={};n.forEach((function(e){i=a(a(a({},i),e.options),{headers:a(a({},i.headers),e.headers)}),e.credentials&&(i.credentials=e.credentials),o=a(a({},o),e.http)})),i.headers=Ln(i.headers,o.preserveHeaderCase);var s=e.operationName,l=e.extensions,u=e.variables,c=e.query,f={operationName:s,variables:u};return o.includeExtensions&&(f.extensions=l),o.includeQuery&&(f.query=t(c,On)),{options:i,body:f}}function Ln(e,t){if(!t){var n=Object.create(null);return Object.keys(Object(e)).forEach((function(t){n[t.toLowerCase()]=e[t]})),n}var r=Object.create(null);Object.keys(Object(e)).forEach((function(t){r[t.toLowerCase()]={originalName:t,value:e[t]}}));var i=Object.create(null);return Object.keys(r).forEach((function(e){i[r[e].originalName]=r[e].value})),i}function Mn(e){return new Dt((function(t){t.error(e)}))}var zn=A((function(){return fetch})),Vn=function(e){void 0===e&&(e={});var t=e.uri,n=void 0===t?"/graphql":t,r=e.fetch,i=e.print,o=void 0===i?jn:i,c=e.includeExtensions,f=e.preserveHeaderCase,d=e.useGETForQueries,p=e.includeUnusedVariables,m=void 0!==p&&p,v=s(e,["uri","fetch","print","includeExtensions","preserveHeaderCase","useGETForQueries","includeUnusedVariables"]);__DEV__&&function(e){if(!e&&"undefined"==typeof fetch)throw __DEV__?new h("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    "):new h(22)}(r||zn);var y={http:{includeExtensions:c,preserveHeaderCase:f},options:v.fetchOptions,credentials:v.credentials,headers:v.headers};return new sn((function(e){var t=function(e,t){return e.getContext().uri||("function"==typeof t?t(e):t||"/graphql")}(e,n),i=e.getContext(),s={};if(i.clientAwareness){var c=i.clientAwareness,f=c.name,p=c.version;f&&(s["apollographql-client-name"]=f),p&&(s["apollographql-client-version"]=p)}var h,v=a(a({},s),i.headers),g={http:i.http,options:i.fetchOptions,credentials:i.credentials,headers:v},b=Fn(e,o,Rn,y,g),E=b.options,w=b.body;if(w.variables&&!m){var k=new Set(Object.keys(w.variables));ct(e.query,{Variable:function(e,t,n){n&&"VariableDefinition"!==n.kind&&k.delete(e.name.value)}}),k.size&&(w.variables=a({},w.variables),k.forEach((function(e){delete w.variables[e]})))}if(!E.signal){var C=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}(),S=C.controller,x=C.signal;(h=S)&&(E.signal=x)}if(d&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(E.method="GET"),un(["defer"],e.query)&&(E.headers.accept="multipart/mixed; deferSpec=20220824, application/json"),"GET"===E.method){var _=function(e,t){var n=[],r=function(e,t){n.push("".concat(e,"=").concat(encodeURIComponent(t)))};if("query"in t&&r("query",t.query),t.operationName&&r("operationName",t.operationName),t.variables){var i=void 0;try{i=fn(t.variables,"Variables map")}catch(e){return{parseError:e}}r("variables",i)}if(t.extensions){var o=void 0;try{o=fn(t.extensions,"Extensions map")}catch(e){return{parseError:e}}r("extensions",o)}var a="",s=e,l=e.indexOf("#");-1!==l&&(a=e.substr(l),s=e.substr(0,l));var u=-1===s.indexOf("?")?"?":"&";return{newURI:s+u+n.join("&")+a}}(t,w),O=_.newURI,I=_.parseError;if(I)return Mn(I);t=O}else try{E.body=fn(w,"Payload")}catch(I){return Mn(I)}return new Dt((function(n){return(r||A((function(){return fetch}))||zn)(t,E).then((function(t){var r;e.setContext({response:t});var i=null===(r=t.headers)||void 0===r?void 0:r.get("content-type");return null!==i&&/^multipart\/mixed/i.test(i)?function(e,t){var n,r,i;return l(this,void 0,void 0,(function(){var o,a,s,l,c,f,d,p,h,m,v,y,g,b,A,E,w,k,C,S;return u(this,(function(u){switch(u.label){case 0:if(void 0===TextDecoder)throw new Error("TextDecoder must be defined in the environment: please import a polyfill.");o=new TextDecoder("utf-8"),a=null===(n=e.headers)||void 0===n?void 0:n.get("content-type"),s="boundary=",l=(null==a?void 0:a.includes(s))?null==a?void 0:a.substring((null==a?void 0:a.indexOf(s))+s.length).replace(/['"]/g,"").replace(/\;(.*)/gm,"").trim():"-",c="--".concat(l),f="",d=pn(e),p=!0,u.label=1;case 1:return p?[4,d.next()]:[3,3];case 2:for(h=u.sent(),m=h.value,v=h.done,y="string"==typeof m?m:o.decode(m),p=!v,g=(f+=y).indexOf(c);g>-1;){if(b=void 0,S=[f.slice(0,g),f.slice(g+c.length)],f=S[1],(b=S[0]).trim()){if(A=b.indexOf("\r\n\r\n"),E=vn(b.slice(0,A)),(w=E["content-type"])&&-1===w.toLowerCase().indexOf("application/json"))throw new Error("Unsupported patch content type: application/json is required.");k=b.slice(A);try{C=yn(e,k.replace("\r\n","")),(Object.keys(C).length>1||"data"in C||"incremental"in C||"errors"in C)&&(null===(r=t.next)||void 0===r||r.call(t,C))}catch(e){gn(e,t)}}g=f.indexOf(c)}return[3,1];case 3:return null===(i=t.complete)||void 0===i||i.call(t),[2]}}))}))}(t,n):function(e,t,n){var r;(r=t,function(e){return e.text().then((function(t){return yn(e,t)})).then((function(t){return e.status>=300&&hn(e,t,"Response not successful: Received status code ".concat(e.status)),Array.isArray(t)||mn.call(t,"data")||mn.call(t,"errors")||hn(e,t,"Server response was missing for query '".concat(Array.isArray(r)?r.map((function(e){return e.operationName})):r.operationName,"'.")),t}))})(e).then((function(e){var t,r;null===(t=n.next)||void 0===t||t.call(n,e),null===(r=n.complete)||void 0===r||r.call(n)})).catch((function(e){return gn(e,n)}))}(t,e,n)})).catch((function(e){return gn(e,n)})),function(){h&&h.abort()}}))}))},qn=sn.execute,Qn=function(e){function t(t){void 0===t&&(t={});var n=e.call(this,Vn(t).request)||this;return n.options=t,n}return o(t,e),t}(sn),Un=Object.prototype,Yn=Un.toString,Wn=Un.hasOwnProperty,$n=Function.prototype.toString,Hn=new Map;function Zn(e,t){try{return Kn(e,t)}finally{Hn.clear()}}function Kn(e,t){if(e===t)return!0;var n,r,i,o=Yn.call(e);if(o!==Yn.call(t))return!1;switch(o){case"[object Array]":if(e.length!==t.length)return!1;case"[object Object]":if(er(e,t))return!0;var a=Xn(e),s=Xn(t),l=a.length;if(l!==s.length)return!1;for(var u=0;u<l;++u)if(!Wn.call(t,a[u]))return!1;for(u=0;u<l;++u){var c=a[u];if(!Kn(e[c],t[c]))return!1}return!0;case"[object Error]":return e.name===t.name&&e.message===t.message;case"[object Number]":if(e!=e)return t!=t;case"[object Boolean]":case"[object Date]":return+e==+t;case"[object RegExp]":case"[object String]":return e=="".concat(t);case"[object Map]":case"[object Set]":if(e.size!==t.size)return!1;if(er(e,t))return!0;for(var f=e.entries(),d="[object Map]"===o;;){var p=f.next();if(p.done)break;var h=p.value,m=h[0],v=h[1];if(!t.has(m))return!1;if(d&&!Kn(v,t.get(m)))return!1}return!0;case"[object Uint16Array]":case"[object Uint8Array]":case"[object Uint32Array]":case"[object Int32Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object ArrayBuffer]":e=new Uint8Array(e),t=new Uint8Array(t);case"[object DataView]":var y=e.byteLength;if(y===t.byteLength)for(;y--&&e[y]===t[y];);return-1===y;case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":var g=$n.call(e);return g===$n.call(t)&&(r=Jn,!((i=(n=g).length-r.length)>=0&&n.indexOf(r,i)===i))}return!1}function Xn(e){return Object.keys(e).filter(Gn,e)}function Gn(e){return void 0!==this[e]}var Jn="{ [native code] }";function er(e,t){var n=Hn.get(e);if(n){if(n.has(t))return!0}else Hn.set(e,n=new Set);return n.add(t),!1}function tr(e){return Array.isArray(e)&&e.length>0}var nr=Object.prototype.hasOwnProperty;function rr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return ir(e)}function ir(e){var t=e[0]||{},n=e.length;if(n>1)for(var r=new ar,i=1;i<n;++i)t=r.merge(t,e[i]);return t}var or=function(e,t,n){return this.merge(e[n],t[n])},ar=function(){function e(e){void 0===e&&(e=or),this.reconciler=e,this.isObject=Bt,this.pastCopies=new Set}return e.prototype.merge=function(e,t){for(var n=this,r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];return Bt(t)&&Bt(e)?(Object.keys(t).forEach((function(i){if(nr.call(e,i)){var o=e[i];if(t[i]!==o){var a=n.reconciler.apply(n,c([e,t,i],r,!1));a!==o&&((e=n.shallowCopyForMerge(e))[i]=a)}}else(e=n.shallowCopyForMerge(e))[i]=t[i]})),e):t},e.prototype.shallowCopyForMerge=function(e){return Bt(e)&&(this.pastCopies.has(e)||(e=Array.isArray(e)?e.slice(0):a({__proto__:Object.getPrototypeOf(e)},e),this.pastCopies.add(e))),e},e}();function sr(e){return"incremental"in e}function lr(e,t){var n=e,r=new ar;return sr(t)&&tr(t.incremental)&&t.incremental.forEach((function(e){for(var t=e.data,i=e.path,o=i.length-1;o>=0;--o){var a=i[o],s=isNaN(+a)?{}:[];s[a]=t,t=s}n=r.merge(n,t)})),n}var ur=function(){return Object.create(null)},cr=Array.prototype,fr=cr.forEach,dr=cr.slice,pr=function(){function e(e,t){void 0===e&&(e=!0),void 0===t&&(t=ur),this.weakness=e,this.makeData=t}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return fr.call(e,(function(e){return t=t.getChildTrie(e)})),t.data||(t.data=this.makeData(dr.call(e)))},e.prototype.getChildTrie=function(t){var n=this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),r=n.get(t);return r||n.set(t,r=new e(this.weakness,this.makeData)),r},e}();function hr(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Object.create(null);return e.forEach((function(e){e&&Object.keys(e).forEach((function(t){var r=e[t];void 0!==r&&(n[t]=r)}))})),n}var mr=Object.prototype.hasOwnProperty;function vr(e){return null==e}var yr=Array.isArray;function gr(e,t){var n=e.__typename,r=e.id,i=e._id;if("string"==typeof n&&(t&&(t.keyObject=vr(r)?vr(i)?void 0:{_id:i}:{id:r}),vr(r)&&!vr(i)&&(r=i),!vr(r)))return"".concat(n,":").concat("number"==typeof r||"string"==typeof r?r:JSON.stringify(r))}var br={dataIdFromObject:gr,addTypename:!0,resultCaching:!0,canonizeResults:!1};function Ar(e){var t=e.canonizeResults;return void 0===t?br.canonizeResults:t}var Er=/^[_a-z][_0-9a-z]*/i;function wr(e){var t=e.match(Er);return t?t[0]:e}function kr(e,t,n){return!!Bt(t)&&(yr(t)?t.every((function(t){return kr(e,t,n)})):e.selections.every((function(e){if($t(e)&&ln(e,n)){var r=Yt(e);return mr.call(t,r)&&(!e.selectionSet||kr(e.selectionSet,t[r],n))}return!0})))}function Cr(e){return Bt(e)&&!Lt(e)&&!yr(e)}function Sr(e,t){var n=Rt(Gt(e));return{fragmentMap:n,lookupFragment:function(e){var r=n[e];return!r&&t&&(r=t.lookup(e)),r||null}}}var xr,_r,Or=function(){function e(){this.known=new(B?WeakSet:Set),this.pool=new pr(D),this.passes=new WeakMap,this.keysByJSON=new Map,this.empty=this.admit({})}return e.prototype.isKnown=function(e){return Bt(e)&&this.known.has(e)},e.prototype.pass=function(e){if(Bt(e)){var t=function(e){return Bt(e)?yr(e)?e.slice(0):a({__proto__:Object.getPrototypeOf(e)},e):e}(e);return this.passes.set(t,e),t}return e},e.prototype.admit=function(e){var t=this;if(Bt(e)){var n=this.passes.get(e);if(n)return n;switch(Object.getPrototypeOf(e)){case Array.prototype:if(this.known.has(e))return e;var r=e.map(this.admit,this);return(s=this.pool.lookupArray(r)).array||(this.known.add(s.array=r),__DEV__&&Object.freeze(r)),s.array;case null:case Object.prototype:if(this.known.has(e))return e;var i=Object.getPrototypeOf(e),o=[i],a=this.sortedKeys(e);o.push(a.json);var s,l=o.length;if(a.sorted.forEach((function(n){o.push(t.admit(e[n]))})),!(s=this.pool.lookupArray(o)).object){var u=s.object=Object.create(i);this.known.add(u),a.sorted.forEach((function(e,t){u[e]=o[l+t]})),__DEV__&&Object.freeze(u)}return s.object}}return e},e.prototype.sortedKeys=function(e){var t=Object.keys(e),n=this.pool.lookupArray(t);if(!n.keys){t.sort();var r=JSON.stringify(t);(n.keys=this.keysByJSON.get(r))||this.keysByJSON.set(r,n.keys={sorted:t,json:r})}return n.keys},e}(),Ir=Object.assign((function(e){if(Bt(e)){void 0===xr&&Nr();var t=xr.admit(e),n=_r.get(t);return void 0===n&&_r.set(t,n=JSON.stringify(t)),n}return JSON.stringify(e)}),{reset:Nr});function Nr(){xr=new Or,_r=new(D?WeakMap:Map)}function Tr(e,t,n){return new Dt((function(r){var i=r.next,o=r.error,a=r.complete,s=0,l=!1,u={then:function(e){return new Promise((function(t){return t(e())}))}};function c(e,t){return e?function(t){++s;var n=function(){return e(t)};u=u.then(n,n).then((function(e){--s,i&&i.call(r,e),l&&f.complete()}),(function(e){throw--s,e})).catch((function(e){o&&o.call(r,e)}))}:function(e){return t&&t.call(r,e)}}var f={next:c(t,i),error:c(n,o),complete:function(){l=!0,s||a&&a.call(r)}},d=e.subscribe(f);return function(){return d.unsubscribe()}}))}function Dr(e){return tr(Br(e))}function Br(e){var t=tr(e.errors)?e.errors.slice(0):[];return sr(e)&&tr(e.incremental)&&e.incremental.forEach((function(e){e.errors&&t.push.apply(t,e.errors)})),t}function Pr(e,t,n){var r=0;return e.forEach((function(n,i){t.call(this,n,i,e)&&(e[r++]=n)}),n),e.length=r,e}var Rr={kind:"Field",name:{kind:"Name",value:"__typename"}};function jr(e,t){return!e||e.selectionSet.selections.every((function(e){return"FragmentSpread"===e.kind&&jr(t[e.name.value],t)}))}function Fr(e){return jr(Kt(e)||function(e){__DEV__?m("Document"===e.kind,'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql'):m("Document"===e.kind,50),__DEV__?m(e.definitions.length<=1,"Fragment must have exactly one definition."):m(e.definitions.length<=1,51);var t=e.definitions[0];return __DEV__?m("FragmentDefinition"===t.kind,"Must be a fragment definition."):m("FragmentDefinition"===t.kind,52),t}(e),Rt(Gt(e)))?null:e}function Lr(e){return function(t){return e.some((function(e){return e.name&&e.name===t.name.value||e.test&&e.test(t)}))}}function Mr(e,t){var n=Object.create(null),r=[],i=Object.create(null),o=[],s=Fr(ct(t,{Variable:{enter:function(e,t,r){"VariableDefinition"!==r.kind&&(n[e.name.value]=!0)}},Field:{enter:function(t){if(e&&t.directives&&e.some((function(e){return e.remove}))&&t.directives&&t.directives.some(Lr(e)))return t.arguments&&t.arguments.forEach((function(e){"Variable"===e.value.kind&&r.push({name:e.value.name.value})})),t.selectionSet&&qr(t.selectionSet).forEach((function(e){o.push({name:e.name.value})})),null}},FragmentSpread:{enter:function(e){i[e.name.value]=!0}},Directive:{enter:function(t){if(Lr(e)(t))return null}}}));return s&&Pr(r,(function(e){return!!e.name&&!n[e.name]})).length&&(s=function(e,t){var n=function(e){return function(t){return e.some((function(e){return t.value&&"Variable"===t.value.kind&&t.value.name&&(e.name===t.value.name.value||e.test&&e.test(t))}))}}(e);return Fr(ct(t,{OperationDefinition:{enter:function(t){return a(a({},t),{variableDefinitions:t.variableDefinitions?t.variableDefinitions.filter((function(t){return!e.some((function(e){return e.name===t.variable.name.value}))})):[]})}},Field:{enter:function(t){if(e.some((function(e){return e.remove}))){var r=0;if(t.arguments&&t.arguments.forEach((function(e){n(e)&&(r+=1)})),1===r)return null}}},Argument:{enter:function(e){if(n(e))return null}}}))}(r,s)),s&&Pr(o,(function(e){return!!e.name&&!i[e.name]})).length&&(s=function(e,t){function n(t){if(e.some((function(e){return e.name===t.name.value})))return null}return Fr(ct(t,{FragmentSpread:{enter:n},FragmentDefinition:{enter:n}}))}(o,s)),s}var zr=Object.assign((function(e){return ct(e,{SelectionSet:{enter:function(e,t,n){if(!n||"OperationDefinition"!==n.kind){var r=e.selections;if(r&&!r.some((function(e){return $t(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var i=n;if(!($t(i)&&i.directives&&i.directives.some((function(e){return"export"===e.name.value}))))return a(a({},e),{selections:c(c([],r,!0),[Rr],!1)})}}}}})}),{added:function(e){return e===Rr}}),Vr={test:function(e){var t="connection"===e.name.value;return t&&(e.arguments&&e.arguments.some((function(e){return"key"===e.name.value}))||__DEV__&&m.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.")),t}};function qr(e){var t=[];return e.selections.forEach((function(e){($t(e)||Ht(e))&&e.selectionSet?qr(e.selectionSet).forEach((function(e){return t.push(e)})):"FragmentSpread"===e.kind&&t.push(e)})),t}function Qr(e){return"query"===en(e).operation?e:ct(e,{OperationDefinition:{enter:function(e){return a(a({},e),{operation:"query"})}}})}var Ur=new Map;function Yr(e){var t=Ur.get(e)||1;return Ur.set(e,t+1),"".concat(e,":").concat(t,":").concat(Math.random().toString(36).slice(2))}function Wr(e,t,n){var r=[];e.forEach((function(e){return e[t]&&r.push(e)})),r.forEach((function(e){return e[t](n)}))}function $r(e){function t(t){Object.defineProperty(e,t,{value:Dt})}return P&&Symbol.species&&t(Symbol.species),t("@@species"),e}function Hr(e){return e&&"function"==typeof e.then}var Zr=function(e){function t(t){var n=e.call(this,(function(e){return n.addObserver(e),function(){return n.removeObserver(e)}}))||this;return n.observers=new Set,n.promise=new Promise((function(e,t){n.resolve=e,n.reject=t})),n.handlers={next:function(e){null!==n.sub&&(n.latest=["next",e],n.notify("next",e),Wr(n.observers,"next",e))},error:function(e){var t=n.sub;null!==t&&(t&&setTimeout((function(){return t.unsubscribe()})),n.sub=null,n.latest=["error",e],n.reject(e),n.notify("error",e),Wr(n.observers,"error",e))},complete:function(){var e=n.sub;if(null!==e){var t=n.sources.shift();t?Hr(t)?t.then((function(e){return n.sub=e.subscribe(n.handlers)})):n.sub=t.subscribe(n.handlers):(e&&setTimeout((function(){return e.unsubscribe()})),n.sub=null,n.latest&&"next"===n.latest[0]?n.resolve(n.latest[1]):n.resolve(),n.notify("complete"),Wr(n.observers,"complete"))}}},n.nextResultListeners=new Set,n.cancel=function(e){n.reject(e),n.sources=[],n.handlers.complete()},n.promise.catch((function(e){})),"function"==typeof t&&(t=[new Dt(t)]),Hr(t)?t.then((function(e){return n.start(e)}),n.handlers.error):n.start(t),n}return o(t,e),t.prototype.start=function(e){void 0===this.sub&&(this.sources=Array.from(e),this.handlers.complete())},t.prototype.deliverLastMessage=function(e){if(this.latest){var t=this.latest[0],n=e[t];n&&n.call(e,this.latest[1]),null===this.sub&&"next"===t&&e.complete&&e.complete()}},t.prototype.addObserver=function(e){this.observers.has(e)||(this.deliverLastMessage(e),this.observers.add(e))},t.prototype.removeObserver=function(e){this.observers.delete(e)&&this.observers.size<1&&this.handlers.complete()},t.prototype.notify=function(e,t){var n=this.nextResultListeners;n.size&&(this.nextResultListeners=new Set,n.forEach((function(n){return n(e,t)})))},t.prototype.beforeNext=function(e){var t=!1;this.nextResultListeners.add((function(n,r){t||(t=!0,e(n,r))}))},t}(Dt);$r(Zr);var Kr,Xr=function(e){function t(n){var r,i,o=n.graphQLErrors,a=n.clientErrors,s=n.networkError,l=n.errorMessage,u=n.extraInfo,c=e.call(this,l)||this;return c.name="ApolloError",c.graphQLErrors=o||[],c.clientErrors=a||[],c.networkError=s||null,c.message=l||(i="",(tr((r=c).graphQLErrors)||tr(r.clientErrors))&&(r.graphQLErrors||[]).concat(r.clientErrors||[]).forEach((function(e){var t=e?e.message:"Error message not found.";i+="".concat(t,"\n")})),r.networkError&&(i+="".concat(r.networkError.message,"\n")),i=i.replace(/\n$/,"")),c.extraInfo=u,c.__proto__=t.prototype,c}return o(t,e),t}(Error);function Gr(e){return!!e&&e<7}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(Kr||(Kr={}));var Jr=Object.prototype.toString;function ei(e){return ti(e)}function ti(e,t){switch(Jr.call(e)){case"[object Array]":if((t=t||new Map).has(e))return t.get(e);var n=e.slice(0);return t.set(e,n),n.forEach((function(e,r){n[r]=ti(e,t)})),n;case"[object Object]":if((t=t||new Map).has(e))return t.get(e);var r=Object.create(Object.getPrototypeOf(e));return t.set(e,r),Object.keys(e).forEach((function(n){r[n]=ti(e[n],t)})),r;default:return e}}var ni=Object.assign,ri=Object.hasOwnProperty,ii=function(e){function t(t){var n=t.queryManager,r=t.queryInfo,i=t.options,o=e.call(this,(function(e){try{var t=e._subscription._observer;t&&!t.error&&(t.error=ai)}catch(e){}var n=!o.observers.size;o.observers.add(e);var r=o.last;return r&&r.error?e.error&&e.error(r.error):r&&r.result&&e.next&&e.next(r.result),n&&o.reobserve().catch((function(){})),function(){o.observers.delete(e)&&!o.observers.size&&o.tearDownQuery()}}))||this;o.observers=new Set,o.subscriptions=new Set,o.queryInfo=r,o.queryManager=n,o.isTornDown=!1;var s=n.defaultOptions.watchQuery,l=(void 0===s?{}:s).fetchPolicy,u=void 0===l?"cache-first":l,c=i.fetchPolicy,f=void 0===c?u:c,d=i.initialFetchPolicy,p=void 0===d?"standby"===f?u:f:d;o.options=a(a({},i),{initialFetchPolicy:p,fetchPolicy:f}),o.queryId=r.queryId||n.generateQueryId();var h=Kt(o.query);return o.queryName=h&&h.name&&h.name.value,o}return o(t,e),Object.defineProperty(t.prototype,"query",{get:function(){return this.queryManager.transform(this.options.query).document},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),t.prototype.result=function(){var e=this;return new Promise((function(t,n){var r={next:function(n){t(n),e.observers.delete(r),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){i.unsubscribe()}),0)},error:n},i=e.subscribe(r)}))},t.prototype.getCurrentResult=function(e){void 0===e&&(e=!0);var t=this.getLastResult(!0),n=this.queryInfo.networkStatus||t&&t.networkStatus||Kr.ready,r=a(a({},t),{loading:Gr(n),networkStatus:n}),i=this.options.fetchPolicy,o=void 0===i?"cache-first":i;if("network-only"===o||"no-cache"===o||"standby"===o||this.queryManager.transform(this.options.query).hasForcedResolvers);else{var s=this.queryInfo.getDiff();(s.complete||this.options.returnPartialData)&&(r.data=s.result),Zn(r.data,{})&&(r.data=void 0),s.complete?(delete r.partial,!s.complete||r.networkStatus!==Kr.loading||"cache-first"!==o&&"cache-only"!==o||(r.networkStatus=Kr.ready,r.loading=!1)):r.partial=!0,!__DEV__||s.complete||this.options.partialRefetch||r.loading||r.data||r.error||si(s.missing)}return e&&this.updateLastResult(r),r},t.prototype.isDifferentFromLastResult=function(e,t){return!this.last||!Zn(this.last.result,e)||t&&!Zn(this.last.variables,t)},t.prototype.getLast=function(e,t){var n=this.last;if(n&&n[e]&&(!t||Zn(n.variables,this.variables)))return n[e]},t.prototype.getLastResult=function(e){return this.getLast("result",e)},t.prototype.getLastError=function(e){return this.getLast("error",e)},t.prototype.resetLastResults=function(){delete this.last,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId)},t.prototype.refetch=function(e){var t,n={pollInterval:0},r=this.options.fetchPolicy;if(n.fetchPolicy="cache-and-network"===r?r:"no-cache"===r?"no-cache":"network-only",__DEV__&&e&&ri.call(e,"variables")){var i=Jt(this.query),o=i.variableDefinitions;o&&o.some((function(e){return"variables"===e.variable.name.value}))||__DEV__&&m.warn("Called refetch(".concat(JSON.stringify(e),") for query ").concat((null===(t=i.name)||void 0===t?void 0:t.value)||JSON.stringify(i),", which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?"))}return e&&!Zn(this.options.variables,e)&&(n.variables=this.options.variables=a(a({},this.options.variables),e)),this.queryInfo.resetLastWrite(),this.reobserve(n,Kr.refetch)},t.prototype.fetchMore=function(e){var t=this,n=a(a({},e.query?e:a(a(a(a({},this.options),{query:this.query}),e),{variables:a(a({},this.options.variables),e.variables)})),{fetchPolicy:"no-cache"}),r=this.queryManager.generateQueryId(),i=this.queryInfo,o=i.networkStatus;i.networkStatus=Kr.fetchMore,n.notifyOnNetworkStatusChange&&this.observe();var s=new Set;return this.queryManager.fetchQuery(r,n,Kr.fetchMore).then((function(a){return t.queryManager.removeQuery(r),i.networkStatus===Kr.fetchMore&&(i.networkStatus=o),t.queryManager.cache.batch({update:function(r){var i=e.updateQuery;i?r.updateQuery({query:t.query,variables:t.variables,returnPartialData:!0,optimistic:!1},(function(e){return i(e,{fetchMoreResult:a.data,variables:n.variables})})):r.writeQuery({query:n.query,variables:n.variables,data:a.data})},onWatchUpdated:function(e){s.add(e.query)}}),a})).finally((function(){s.has(t.query)||oi(t)}))},t.prototype.subscribeToMore=function(e){var t=this,n=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables,context:e.context}).subscribe({next:function(n){var r=e.updateQuery;r&&t.updateQuery((function(e,t){var i=t.variables;return r(e,{subscriptionData:n,variables:i})}))},error:function(t){e.onError?e.onError(t):__DEV__&&m.error("Unhandled GraphQL subscription error",t)}});return this.subscriptions.add(n),function(){t.subscriptions.delete(n)&&n.unsubscribe()}},t.prototype.setOptions=function(e){return this.reobserve(e)},t.prototype.setVariables=function(e){return Zn(this.variables,e)?this.observers.size?this.result():Promise.resolve():(this.options.variables=e,this.observers.size?this.reobserve({fetchPolicy:this.options.initialFetchPolicy,variables:e},Kr.setVariables):Promise.resolve())},t.prototype.updateQuery=function(e){var t=this.queryManager,n=e(t.cache.diff({query:this.options.query,variables:this.variables,returnPartialData:!0,optimistic:!1}).result,{variables:this.variables});n&&(t.cache.writeQuery({query:this.options.query,data:n,variables:this.variables}),t.broadcastQueries())},t.prototype.startPolling=function(e){this.options.pollInterval=e,this.updatePolling()},t.prototype.stopPolling=function(){this.options.pollInterval=0,this.updatePolling()},t.prototype.applyNextFetchPolicy=function(e,t){if(t.nextFetchPolicy){var n=t.fetchPolicy,r=void 0===n?"cache-first":n,i=t.initialFetchPolicy,o=void 0===i?r:i;"standby"===r||("function"==typeof t.nextFetchPolicy?t.fetchPolicy=t.nextFetchPolicy(r,{reason:e,options:t,observable:this,initialFetchPolicy:o}):t.fetchPolicy="variables-changed"===e?o:t.nextFetchPolicy)}return t.fetchPolicy},t.prototype.fetch=function(e,t){return this.queryManager.setObservableQuery(this),this.queryManager.fetchQueryObservable(this.queryId,e,t)},t.prototype.updatePolling=function(){var e=this;if(!this.queryManager.ssrMode){var t=this.pollingInfo,n=this.options.pollInterval;if(n){if(!t||t.interval!==n){__DEV__?m(n,"Attempted to start a polling query without a polling interval."):m(n,12),(t||(this.pollingInfo={})).interval=n;var r=function(){e.pollingInfo&&(Gr(e.queryInfo.networkStatus)?i():e.reobserve({fetchPolicy:"no-cache"===e.options.initialFetchPolicy?"no-cache":"network-only"},Kr.poll).then(i,i))},i=function(){var t=e.pollingInfo;t&&(clearTimeout(t.timeout),t.timeout=setTimeout(r,t.interval))};i()}}else t&&(clearTimeout(t.timeout),delete this.pollingInfo)}},t.prototype.updateLastResult=function(e,t){return void 0===t&&(t=this.variables),this.last=a(a({},this.last),{result:this.queryManager.assumeImmutableResults?e:ei(e),variables:t}),tr(e.errors)||delete this.last.error,this.last},t.prototype.reobserve=function(e,t){var n=this;this.isTornDown=!1;var r=t===Kr.refetch||t===Kr.fetchMore||t===Kr.poll,i=this.options.variables,o=this.options.fetchPolicy,s=hr(this.options,e||{}),l=r?s:ni(this.options,s);r||(this.updatePolling(),e&&e.variables&&!Zn(e.variables,i)&&"standby"!==l.fetchPolicy&&l.fetchPolicy===o&&(this.applyNextFetchPolicy("variables-changed",l),void 0===t&&(t=Kr.setVariables)));var u=l.variables&&a({},l.variables),c=this.fetch(l,t),f={next:function(e){n.reportResult(e,u)},error:function(e){n.reportError(e,u)}};return r||(this.concast&&this.observer&&this.concast.removeObserver(this.observer),this.concast=c,this.observer=f),c.addObserver(f),c.promise},t.prototype.observe=function(){this.reportResult(this.getCurrentResult(!1),this.variables)},t.prototype.reportResult=function(e,t){var n=this.getLastError();(n||this.isDifferentFromLastResult(e,t))&&((n||!e.partial||this.options.returnPartialData)&&this.updateLastResult(e,t),Wr(this.observers,"next",e))},t.prototype.reportError=function(e,t){var n=a(a({},this.getLastResult()),{error:e,errors:e.graphQLErrors,networkStatus:Kr.error,loading:!1});this.updateLastResult(n,t),Wr(this.observers,"error",this.last.error=e)},t.prototype.hasObservers=function(){return this.observers.size>0},t.prototype.tearDownQuery=function(){this.isTornDown||(this.concast&&this.observer&&(this.concast.removeObserver(this.observer),delete this.concast,delete this.observer),this.stopPolling(),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0)},t}(Dt);function oi(e){var t=e.options,n=t.fetchPolicy,r=t.nextFetchPolicy;return"cache-and-network"===n||"network-only"===n?e.reobserve({fetchPolicy:"cache-first",nextFetchPolicy:function(){return this.nextFetchPolicy=r,"function"==typeof r?r.apply(this,arguments):n}}):e.reobserve()}function ai(e){__DEV__&&m.error("Unhandled error",e.message,e.stack)}function si(e){__DEV__&&e&&__DEV__&&m.debug("Missing cache result fields: ".concat(JSON.stringify(e)),e)}$r(ii);var li=null,ui={},ci=1;function fi(e){try{return e()}catch(e){}}var di="@wry/context:Slot",pi=fi((function(){return globalThis}))||fi((function(){return i.g}))||Object.create(null),hi=pi[di]||Array[di]||function(e){try{Object.defineProperty(pi,di,{value:e,enumerable:!1,writable:!1,configurable:!0})}finally{return e}}(function(){function e(){this.id=["slot",ci++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=li;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===ui)break;return e!==li&&(li.slots[this.id]=t),!0}return li&&(li.slots[this.id]=ui),!1},e.prototype.getValue=function(){if(this.hasValue())return li.slots[this.id]},e.prototype.withValue=function(e,t,n,r){var i,o=((i={__proto__:null})[this.id]=e,i),a=li;li={parent:a,slots:o};try{return t.apply(r,n)}finally{li=a}},e.bind=function(e){var t=li;return function(){var n=li;try{return li=t,e.apply(this,arguments)}finally{li=n}}},e.noContext=function(e,t,n){if(!li)return e.apply(n,t);var r=li;try{return li=null,e.apply(n,t)}finally{li=r}},e}());function mi(){}hi.bind,hi.noContext;var vi,yi=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=mi),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getNode(e);return t&&t.value},e.prototype.getNode=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var n=t.older,r=t.newer;r&&(r.older=n),n&&(n.newer=r),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=r)}return t},e.prototype.set=function(e,t){var n=this.getNode(e);return n?n.value=t:(n={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=n),this.newest=n,this.oldest=this.oldest||n,this.map.set(e,n),n.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),gi=new hi,bi=Object.prototype.hasOwnProperty,Ai=void 0===(vi=Array.from)?function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t}:vi;function Ei(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var wi=[];function ki(e,t){if(!e)throw new Error(t||"assertion failure")}function Ci(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var Si=function(){function e(t){this.fn=t,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++e.count}return e.prototype.peek=function(){if(1===this.value.length&&!Oi(this))return xi(this),this.value[0]},e.prototype.recompute=function(e){return ki(!this.recomputing,"already recomputing"),xi(this),Oi(this)?function(e,t){return Ri(e),gi.withValue(e,_i,[e,t]),function(e,t){if("function"==typeof e.subscribe)try{Ei(e),e.unsubscribe=e.subscribe.apply(null,t)}catch(t){return e.setDirty(),!1}return!0}(e,t)&&function(e){e.dirty=!1,Oi(e)||Ni(e)}(e),Ci(e.value)}(this,e):Ci(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,Ii(this),Ei(this))},e.prototype.dispose=function(){var e=this;this.setDirty(),Ri(this),Ti(this,(function(t,n){t.setDirty(),ji(t,e)}))},e.prototype.forget=function(){this.dispose()},e.prototype.dependOn=function(e){e.add(this),this.deps||(this.deps=wi.pop()||new Set),this.deps.add(e)},e.prototype.forgetDeps=function(){var e=this;this.deps&&(Ai(this.deps).forEach((function(t){return t.delete(e)})),this.deps.clear(),wi.push(this.deps),this.deps=null)},e.count=0,e}();function xi(e){var t=gi.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),Oi(e)?Di(t,e):Bi(t,e),t}function _i(e,t){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,t)}catch(t){e.value[1]=t}e.recomputing=!1}function Oi(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function Ii(e){Ti(e,Di)}function Ni(e){Ti(e,Bi)}function Ti(e,t){var n=e.parents.size;if(n)for(var r=Ai(e.parents),i=0;i<n;++i)t(r[i],e)}function Di(e,t){ki(e.childValues.has(t)),ki(Oi(t));var n=!Oi(e);if(e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=wi.pop()||new Set;e.dirtyChildren.add(t),n&&Ii(e)}function Bi(e,t){ki(e.childValues.has(t)),ki(!Oi(t));var n,r,i,o=e.childValues.get(t);0===o.length?e.childValues.set(t,t.value.slice(0)):(n=o,r=t.value,(i=n.length)>0&&i===r.length&&n[i-1]===r[i-1]||e.setDirty()),Pi(e,t),Oi(e)||Ni(e)}function Pi(e,t){var n=e.dirtyChildren;n&&(n.delete(t),0===n.size&&(wi.length<100&&wi.push(n),e.dirtyChildren=null))}function Ri(e){e.childValues.size>0&&e.childValues.forEach((function(t,n){ji(e,n)})),e.forgetDeps(),ki(null===e.dirtyChildren)}function ji(e,t){t.parents.delete(e),e.childValues.delete(t),Pi(e,t)}var Fi={setDirty:!0,dispose:!0,forget:!0};function Li(e){var t=new Map,n=e&&e.subscribe;function r(e){var r=gi.getValue();if(r){var i=t.get(e);i||t.set(e,i=new Set),r.dependOn(i),"function"==typeof n&&(Ei(i),i.unsubscribe=n(e))}}return r.dirty=function(e,n){var r=t.get(e);if(r){var i=n&&bi.call(Fi,n)?n:"setDirty";Ai(r).forEach((function(e){return e[i]()})),t.delete(e),Ei(r)}},r}function Mi(){var e=new pr("function"==typeof WeakMap);return function(){return e.lookupArray(arguments)}}Mi();var zi=new Set;function Vi(e,t){void 0===t&&(t=Object.create(null));var n=new yi(t.max||Math.pow(2,16),(function(e){return e.dispose()})),r=t.keyArgs,i=t.makeCacheKey||Mi(),o=function(){var o=i.apply(null,r?r.apply(null,arguments):arguments);if(void 0===o)return e.apply(null,arguments);var a=n.get(o);a||(n.set(o,a=new Si(e)),a.subscribe=t.subscribe,a.forget=function(){return n.delete(o)});var s=a.recompute(Array.prototype.slice.call(arguments));return n.set(o,a),zi.add(n),gi.hasValue()||(zi.forEach((function(e){return e.clean()})),zi.clear()),s};function a(e){var t=n.get(e);t&&t.setDirty()}function s(e){var t=n.get(e);if(t)return t.peek()}function l(e){return n.delete(e)}return Object.defineProperty(o,"size",{get:function(){return n.map.size},configurable:!1,enumerable:!1}),o.dirtyKey=a,o.dirty=function(){a(i.apply(null,arguments))},o.peekKey=s,o.peek=function(){return s(i.apply(null,arguments))},o.forgetKey=l,o.forget=function(){return l(i.apply(null,arguments))},o.makeCacheKey=i,o.getKey=r?function(){return i.apply(null,r.apply(null,arguments))}:i,Object.freeze(o)}var qi=new hi,Qi=new WeakMap;function Ui(e){var t=Qi.get(e);return t||Qi.set(e,t={vars:new Set,dep:Li()}),t}function Yi(e){Ui(e).vars.forEach((function(t){return t.forgetCache(e)}))}function Wi(e){var t=new Set,n=new Set,r=function(o){if(arguments.length>0){if(e!==o){e=o,t.forEach((function(e){Ui(e).dep.dirty(r),$i(e)}));var a=Array.from(n);n.clear(),a.forEach((function(t){return t(e)}))}}else{var s=qi.getValue();s&&(i(s),Ui(s).dep(r))}return e};r.onNextChange=function(e){return n.add(e),function(){n.delete(e)}};var i=r.attachCache=function(e){return t.add(e),Ui(e).vars.add(r),r};return r.forgetCache=function(e){return t.delete(e)},r}function $i(e){e.broadcastWatches&&e.broadcastWatches()}var Hi=function(){function e(e){var t=e.cache,n=e.client,r=e.resolvers,i=e.fragmentMatcher;this.cache=t,n&&(this.client=n),r&&this.addResolvers(r),i&&this.setFragmentMatcher(i)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach((function(e){t.resolvers=rr(t.resolvers,e)})):this.resolvers=rr(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){var t=e.document,n=e.remoteResult,r=e.context,i=e.variables,o=e.onlyRunForcedResolvers,s=void 0!==o&&o;return l(this,void 0,void 0,(function(){return u(this,(function(e){return t?[2,this.resolveDocument(t,n.data,r,i,this.fragmentMatcher,s).then((function(e){return a(a({},n),{data:e.result})}))]:[2,n]}))}))},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return un(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return function(e){Zt(e);var t=Mr([{test:function(e){return"client"===e.name.value},remove:!0}],e);return t&&(t=ct(t,{FragmentDefinition:{enter:function(e){if(e.selectionSet&&e.selectionSet.selections.every((function(e){return $t(e)&&"__typename"===e.name.value})))return null}}})),t}(e)},e.prototype.prepareContext=function(e){var t=this.cache;return a(a({},e),{cache:t,getCacheKey:function(e){return t.identify(e)}})},e.prototype.addExportedVariables=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),l(this,void 0,void 0,(function(){return u(this,(function(r){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(n),t).then((function(e){return a(a({},t),e.exportedVariables)}))]:[2,a({},t)]}))}))},e.prototype.shouldForceResolvers=function(e){var t=!1;return ct(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some((function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value}))))return ut}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:Qr(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t,n,r,i,o){return void 0===n&&(n={}),void 0===r&&(r={}),void 0===i&&(i=function(){return!0}),void 0===o&&(o=!1),l(this,void 0,void 0,(function(){var s,l,c,f,d,p,h,m,v;return u(this,(function(u){return s=en(e),l=Gt(e),c=Rt(l),f=s.operation,d=f?f.charAt(0).toUpperCase()+f.slice(1):"Query",h=(p=this).cache,m=p.client,v={fragmentMap:c,context:a(a({},n),{cache:h,client:m}),variables:r,fragmentMatcher:i,defaultOperationType:d,exportedVariables:{},onlyRunForcedResolvers:o},[2,this.resolveSelectionSet(s.selectionSet,t,v).then((function(e){return{result:e,exportedVariables:v.exportedVariables}}))]}))}))},e.prototype.resolveSelectionSet=function(e,t,n){return l(this,void 0,void 0,(function(){var r,i,o,a,s,c=this;return u(this,(function(f){return r=n.fragmentMap,i=n.context,o=n.variables,a=[t],s=function(e){return l(c,void 0,void 0,(function(){var s,l;return u(this,(function(u){return ln(e,o)?$t(e)?[2,this.resolveField(e,t,n).then((function(t){var n;void 0!==t&&a.push(((n={})[Yt(e)]=t,n))}))]:(Ht(e)?s=e:(s=r[e.name.value],__DEV__?m(s,"No fragment named ".concat(e.name.value)):m(s,11)),s&&s.typeCondition&&(l=s.typeCondition.name.value,n.fragmentMatcher(t,l,i))?[2,this.resolveSelectionSet(s.selectionSet,t,n).then((function(e){a.push(e)}))]:[2]):[2]}))}))},[2,Promise.all(e.selections.map(s)).then((function(){return ir(a)}))]}))}))},e.prototype.resolveField=function(e,t,n){return l(this,void 0,void 0,(function(){var r,i,o,a,s,l,c,f,d,p=this;return u(this,(function(u){return r=n.variables,i=e.name.value,o=Yt(e),a=i!==o,s=t[o]||t[i],l=Promise.resolve(s),n.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(c=t.__typename||n.defaultOperationType,(f=this.resolvers&&this.resolvers[c])&&(d=f[a?i:o])&&(l=Promise.resolve(qi.withValue(this.cache,d,[t,Ut(e,r),n.context,{field:e,fragmentMap:n.fragmentMap}])))),[2,l.then((function(t){return void 0===t&&(t=s),e.directives&&e.directives.forEach((function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach((function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(n.exportedVariables[e.value.value]=t)}))})),e.selectionSet?null==t?t:Array.isArray(t)?p.resolveSubSelectedArray(e,t,n):e.selectionSet?p.resolveSelectionSet(e.selectionSet,t,n):void 0:t}))]}))}))},e.prototype.resolveSubSelectedArray=function(e,t,n){var r=this;return Promise.all(t.map((function(t){return null===t?null:Array.isArray(t)?r.resolveSubSelectedArray(e,t,n):e.selectionSet?r.resolveSelectionSet(e.selectionSet,t,n):void 0})))},e}(),Zi=new(D?WeakMap:Map);function Ki(e,t){var n=e[t];"function"==typeof n&&(e[t]=function(){return Zi.set(e,(Zi.get(e)+1)%1e15),n.apply(this,arguments)})}function Xi(e){e.notifyTimeout&&(clearTimeout(e.notifyTimeout),e.notifyTimeout=void 0)}var Gi=function(){function e(e,t){void 0===t&&(t=e.generateQueryId()),this.queryId=t,this.listeners=new Set,this.document=null,this.lastRequestId=1,this.subscriptions=new Set,this.stopped=!1,this.dirty=!1,this.observableQuery=null;var n=this.cache=e.cache;Zi.has(n)||(Zi.set(n,0),Ki(n,"evict"),Ki(n,"modify"),Ki(n,"reset"))}return e.prototype.init=function(e){var t=e.networkStatus||Kr.loading;return this.variables&&this.networkStatus!==Kr.loading&&!Zn(this.variables,e.variables)&&(t=Kr.setVariables),Zn(e.variables,this.variables)||(this.lastDiff=void 0),Object.assign(this,{document:e.document,variables:e.variables,networkError:null,graphQLErrors:this.graphQLErrors||[],networkStatus:t}),e.observableQuery&&this.setObservableQuery(e.observableQuery),e.lastRequestId&&(this.lastRequestId=e.lastRequestId),this},e.prototype.reset=function(){Xi(this),this.dirty=!1},e.prototype.getDiff=function(e){void 0===e&&(e=this.variables);var t=this.getDiffOptions(e);if(this.lastDiff&&Zn(t,this.lastDiff.options))return this.lastDiff.diff;this.updateWatch(this.variables=e);var n=this.observableQuery;if(n&&"no-cache"===n.options.fetchPolicy)return{complete:!1};var r=this.cache.diff(t);return this.updateLastDiff(r,t),r},e.prototype.updateLastDiff=function(e,t){this.lastDiff=e?{diff:e,options:t||this.getDiffOptions()}:void 0},e.prototype.getDiffOptions=function(e){var t;return void 0===e&&(e=this.variables),{query:this.document,variables:e,returnPartialData:!0,optimistic:!0,canonizeResults:null===(t=this.observableQuery)||void 0===t?void 0:t.options.canonizeResults}},e.prototype.setDiff=function(e){var t=this,n=this.lastDiff&&this.lastDiff.diff;this.updateLastDiff(e),this.dirty||Zn(n&&n.result,e&&e.result)||(this.dirty=!0,this.notifyTimeout||(this.notifyTimeout=setTimeout((function(){return t.notify()}),0)))},e.prototype.setObservableQuery=function(e){var t=this;e!==this.observableQuery&&(this.oqListener&&this.listeners.delete(this.oqListener),this.observableQuery=e,e?(e.queryInfo=this,this.listeners.add(this.oqListener=function(){t.getDiff().fromOptimisticTransaction?e.observe():oi(e)})):delete this.oqListener)},e.prototype.notify=function(){var e=this;Xi(this),this.shouldNotify()&&this.listeners.forEach((function(t){return t(e)})),this.dirty=!1},e.prototype.shouldNotify=function(){if(!this.dirty||!this.listeners.size)return!1;if(Gr(this.networkStatus)&&this.observableQuery){var e=this.observableQuery.options.fetchPolicy;if("cache-only"!==e&&"cache-and-network"!==e)return!1}return!0},e.prototype.stop=function(){if(!this.stopped){this.stopped=!0,this.reset(),this.cancel(),this.cancel=e.prototype.cancel,this.subscriptions.forEach((function(e){return e.unsubscribe()}));var t=this.observableQuery;t&&t.stopPolling()}},e.prototype.cancel=function(){},e.prototype.updateWatch=function(e){var t=this;void 0===e&&(e=this.variables);var n=this.observableQuery;if(!n||"no-cache"!==n.options.fetchPolicy){var r=a(a({},this.getDiffOptions(e)),{watcher:this,callback:function(e){return t.setDiff(e)}});this.lastWatch&&Zn(r,this.lastWatch)||(this.cancel(),this.cancel=this.cache.watch(this.lastWatch=r))}},e.prototype.resetLastWrite=function(){this.lastWrite=void 0},e.prototype.shouldWrite=function(e,t){var n=this.lastWrite;return!(n&&n.dmCount===Zi.get(this.cache)&&Zn(t,n.variables)&&Zn(e.data,n.result.data))},e.prototype.markResult=function(e,t,n,r){var i=this,o=new ar,a=tr(e.errors)?e.errors.slice(0):[];if(this.reset(),"incremental"in e&&tr(e.incremental)){var s=lr(this.getDiff().result,e);e.data=s}else if("hasNext"in e&&e.hasNext){var l=this.getDiff();e.data=o.merge(l.result,e.data)}this.graphQLErrors=a,"no-cache"===n.fetchPolicy?this.updateLastDiff({result:e.data,complete:!0},this.getDiffOptions(n.variables)):0!==r&&(Ji(e,n.errorPolicy)?this.cache.performTransaction((function(o){if(i.shouldWrite(e,n.variables))o.writeQuery({query:t,data:e.data,variables:n.variables,overwrite:1===r}),i.lastWrite={result:e,variables:n.variables,dmCount:Zi.get(i.cache)};else if(i.lastDiff&&i.lastDiff.diff.complete)return void(e.data=i.lastDiff.diff.result);var a=i.getDiffOptions(n.variables),s=o.diff(a);i.stopped||i.updateWatch(n.variables),i.updateLastDiff(s,a),s.complete&&(e.data=s.result)})):this.lastWrite=void 0)},e.prototype.markReady=function(){return this.networkError=null,this.networkStatus=Kr.ready},e.prototype.markError=function(e){return this.networkStatus=Kr.error,this.lastWrite=void 0,this.reset(),e.graphQLErrors&&(this.graphQLErrors=e.graphQLErrors),e.networkError&&(this.networkError=e.networkError),e},e}();function Ji(e,t){void 0===t&&(t="none");var n="ignore"===t||"all"===t,r=!Dr(e);return!r&&n&&e.data&&(r=!0),r}var eo=Object.prototype.hasOwnProperty,to=function(){function e(e){var t=e.cache,n=e.link,r=e.defaultOptions,i=e.queryDeduplication,o=void 0!==i&&i,a=e.onBroadcast,s=e.ssrMode,l=void 0!==s&&s,u=e.clientAwareness,c=void 0===u?{}:u,f=e.localState,d=e.assumeImmutableResults;this.clientAwareness={},this.queries=new Map,this.fetchCancelFns=new Map,this.transformCache=new(D?WeakMap:Map),this.queryIdCounter=1,this.requestIdCounter=1,this.mutationIdCounter=1,this.inFlightLinkObservables=new Map,this.cache=t,this.link=n,this.defaultOptions=r||Object.create(null),this.queryDeduplication=o,this.clientAwareness=c,this.localState=f||new Hi({cache:t}),this.ssrMode=l,this.assumeImmutableResults=!!d,(this.onBroadcast=a)&&(this.mutationStore=Object.create(null))}return e.prototype.stop=function(){var e=this;this.queries.forEach((function(t,n){e.stopQueryNoBroadcast(n)})),this.cancelPendingFetches(__DEV__?new h("QueryManager stopped while query was in flight"):new h(13))},e.prototype.cancelPendingFetches=function(e){this.fetchCancelFns.forEach((function(t){return t(e)})),this.fetchCancelFns.clear()},e.prototype.mutate=function(e){var t,n,r=e.mutation,i=e.variables,o=e.optimisticResponse,s=e.updateQueries,c=e.refetchQueries,f=void 0===c?[]:c,d=e.awaitRefetchQueries,p=void 0!==d&&d,h=e.update,v=e.onQueryUpdated,y=e.fetchPolicy,g=void 0===y?(null===(t=this.defaultOptions.mutate)||void 0===t?void 0:t.fetchPolicy)||"network-only":y,b=e.errorPolicy,A=void 0===b?(null===(n=this.defaultOptions.mutate)||void 0===n?void 0:n.errorPolicy)||"none":b,E=e.keepRootFields,w=e.context;return l(this,void 0,void 0,(function(){var e,t,n,l,c,d;return u(this,(function(u){switch(u.label){case 0:return __DEV__?m(r,"mutation option is required. You must specify your GraphQL document in the mutation option."):m(r,14),__DEV__?m("network-only"===g||"no-cache"===g,"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write."):m("network-only"===g||"no-cache"===g,15),e=this.generateMutationId(),t=this.transform(r),n=t.document,l=t.hasClientExports,r=this.cache.transformForLink(n),i=this.getVariables(r,i),l?[4,this.localState.addExportedVariables(r,i,w)]:[3,2];case 1:i=u.sent(),u.label=2;case 2:return c=this.mutationStore&&(this.mutationStore[e]={mutation:r,variables:i,loading:!0,error:null}),o&&this.markMutationOptimistic(o,{mutationId:e,document:r,variables:i,fetchPolicy:g,errorPolicy:A,context:w,updateQueries:s,update:h,keepRootFields:E}),this.broadcastQueries(),d=this,[2,new Promise((function(t,n){return Tr(d.getObservableFromLink(r,a(a({},w),{optimisticResponse:o}),i,!1),(function(t){if(Dr(t)&&"none"===A)throw new Xr({graphQLErrors:Br(t)});c&&(c.loading=!1,c.error=null);var n=a({},t);return"function"==typeof f&&(f=f(n)),"ignore"===A&&Dr(n)&&delete n.errors,d.markMutationResult({mutationId:e,result:n,document:r,variables:i,fetchPolicy:g,errorPolicy:A,context:w,update:h,updateQueries:s,awaitRefetchQueries:p,refetchQueries:f,removeOptimistic:o?e:void 0,onQueryUpdated:v,keepRootFields:E})})).subscribe({next:function(e){d.broadcastQueries(),"hasNext"in e&&!1!==e.hasNext||t(e)},error:function(t){c&&(c.loading=!1,c.error=t),o&&d.cache.removeOptimistic(e),d.broadcastQueries(),n(t instanceof Xr?t:new Xr({networkError:t}))}})}))]}}))}))},e.prototype.markMutationResult=function(e,t){var n=this;void 0===t&&(t=this.cache);var r=e.result,i=[],o="no-cache"===e.fetchPolicy;if(!o&&Ji(r,e.errorPolicy)){if(sr(r)||i.push({result:r.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}),sr(r)&&tr(r.incremental)){var s=lr(t.diff({id:"ROOT_MUTATION",query:this.transform(e.document).asQuery,variables:e.variables,optimistic:!1,returnPartialData:!0}).result,r);void 0!==s&&(r.data=s,i.push({result:s,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}))}var l=e.updateQueries;l&&this.queries.forEach((function(e,o){var a=e.observableQuery,s=a&&a.queryName;if(s&&eo.call(l,s)){var u=l[s],c=n.queries.get(o),f=c.document,d=c.variables,p=t.diff({query:f,variables:d,returnPartialData:!0,optimistic:!1}),h=p.result;if(p.complete&&h){var m=u(h,{mutationResult:r,queryName:f&&Xt(f)||void 0,queryVariables:d});m&&i.push({result:m,dataId:"ROOT_QUERY",query:f,variables:d})}}}))}if(i.length>0||e.refetchQueries||e.update||e.onQueryUpdated||e.removeOptimistic){var u=[];if(this.refetchQueries({updateCache:function(t){o||i.forEach((function(e){return t.write(e)}));var s,l=e.update,u=!(sr(s=r)||function(e){return"hasNext"in e&&"data"in e}(s))||sr(r)&&!r.hasNext;if(l){if(!o){var c=t.diff({id:"ROOT_MUTATION",query:n.transform(e.document).asQuery,variables:e.variables,optimistic:!1,returnPartialData:!0});c.complete&&("incremental"in(r=a(a({},r),{data:c.result}))&&delete r.incremental,"hasNext"in r&&delete r.hasNext)}u&&l(t,r,{context:e.context,variables:e.variables})}o||e.keepRootFields||!u||t.modify({id:"ROOT_MUTATION",fields:function(e,t){var n=t.fieldName,r=t.DELETE;return"__typename"===n?e:r}})},include:e.refetchQueries,optimistic:!1,removeOptimistic:e.removeOptimistic,onQueryUpdated:e.onQueryUpdated||null}).forEach((function(e){return u.push(e)})),e.awaitRefetchQueries||e.onQueryUpdated)return Promise.all(u).then((function(){return r}))}return Promise.resolve(r)},e.prototype.markMutationOptimistic=function(e,t){var n=this,r="function"==typeof e?e(t.variables):e;return this.cache.recordOptimisticTransaction((function(e){try{n.markMutationResult(a(a({},t),{result:{data:r}}),e)}catch(e){__DEV__&&m.error(e)}}),t.mutationId)},e.prototype.fetchQuery=function(e,t,n){return this.fetchQueryObservable(e,t,n).promise},e.prototype.getQueryStore=function(){var e=Object.create(null);return this.queries.forEach((function(t,n){e[n]={variables:t.variables,networkStatus:t.networkStatus,networkError:t.networkError,graphQLErrors:t.graphQLErrors}})),e},e.prototype.resetErrors=function(e){var t=this.queries.get(e);t&&(t.networkError=void 0,t.graphQLErrors=[])},e.prototype.transform=function(e){var t=this.transformCache;if(!t.has(e)){var n=this.cache.transformDocument(e),r=Mr([Vr],Zt(n)),i=this.localState.clientQuery(n),o=r&&this.localState.serverQuery(r),s={document:n,hasClientExports:cn(n),hasForcedResolvers:this.localState.shouldForceResolvers(n),clientQuery:i,serverQuery:o,defaultVars:tn(Kt(n)),asQuery:a(a({},n),{definitions:n.definitions.map((function(e){return"OperationDefinition"===e.kind&&"query"!==e.operation?a(a({},e),{operation:"query"}):e}))})},l=function(e){e&&!t.has(e)&&t.set(e,s)};l(e),l(n),l(i),l(o)}return t.get(e)},e.prototype.getVariables=function(e,t){return a(a({},this.transform(e).defaultVars),t)},e.prototype.watchQuery=function(e){void 0===(e=a(a({},e),{variables:this.getVariables(e.query,e.variables)})).notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var t=new Gi(this),n=new ii({queryManager:this,queryInfo:t,options:e});return this.queries.set(n.queryId,t),t.init({document:n.query,observableQuery:n,variables:n.variables}),n},e.prototype.query=function(e,t){var n=this;return void 0===t&&(t=this.generateQueryId()),__DEV__?m(e.query,"query option is required. You must specify your GraphQL document in the query option."):m(e.query,16),__DEV__?m("Document"===e.query.kind,'You must wrap the query string in a "gql" tag.'):m("Document"===e.query.kind,17),__DEV__?m(!e.returnPartialData,"returnPartialData option only supported on watchQuery."):m(!e.returnPartialData,18),__DEV__?m(!e.pollInterval,"pollInterval option only supported on watchQuery."):m(!e.pollInterval,19),this.fetchQuery(t,e).finally((function(){return n.stopQuery(t)}))},e.prototype.generateQueryId=function(){return String(this.queryIdCounter++)},e.prototype.generateRequestId=function(){return this.requestIdCounter++},e.prototype.generateMutationId=function(){return String(this.mutationIdCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){var t=this.queries.get(e);t&&t.stop()},e.prototype.clearStore=function(e){return void 0===e&&(e={discardWatches:!0}),this.cancelPendingFetches(__DEV__?new h("Store reset while query was in flight (not completed in link chain)"):new h(20)),this.queries.forEach((function(e){e.observableQuery?e.networkStatus=Kr.loading:e.stop()})),this.mutationStore&&(this.mutationStore=Object.create(null)),this.cache.reset(e)},e.prototype.getObservableQueries=function(e){var t=this;void 0===e&&(e="active");var n=new Map,r=new Map,i=new Set;return Array.isArray(e)&&e.forEach((function(e){var n;"string"==typeof e?r.set(e,!1):Bt(n=e)&&"Document"===n.kind&&Array.isArray(n.definitions)?r.set(t.transform(e).document,!1):Bt(e)&&e.query&&i.add(e)})),this.queries.forEach((function(t,i){var o=t.observableQuery,a=t.document;if(o){if("all"===e)return void n.set(i,o);var s=o.queryName;if("standby"===o.options.fetchPolicy||"active"===e&&!o.hasObservers())return;("active"===e||s&&r.has(s)||a&&r.has(a))&&(n.set(i,o),s&&r.set(s,!0),a&&r.set(a,!0))}})),i.size&&i.forEach((function(e){var r=Yr("legacyOneTimeQuery"),i=t.getQuery(r).init({document:e.query,variables:e.variables}),o=new ii({queryManager:t,queryInfo:i,options:a(a({},e),{fetchPolicy:"network-only"})});m(o.queryId===r),i.setObservableQuery(o),n.set(r,o)})),__DEV__&&r.size&&r.forEach((function(e,t){e||__DEV__&&m.warn("Unknown query ".concat("string"==typeof t?"named ":"").concat(JSON.stringify(t,null,2)," requested in refetchQueries options.include array"))})),n},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var n=[];return this.getObservableQueries(e?"all":"active").forEach((function(r,i){var o=r.options.fetchPolicy;r.resetLastResults(),(e||"standby"!==o&&"cache-only"!==o)&&n.push(r.refetch()),t.getQuery(i).setDiff(null)})),this.broadcastQueries(),Promise.all(n)},e.prototype.setObservableQuery=function(e){this.getQuery(e.queryId).setObservableQuery(e)},e.prototype.startGraphQLSubscription=function(e){var t=this,n=e.query,r=e.fetchPolicy,i=e.errorPolicy,o=e.variables,a=e.context,s=void 0===a?{}:a;n=this.transform(n).document,o=this.getVariables(n,o);var l=function(e){return t.getObservableFromLink(n,s,e).map((function(o){if("no-cache"!==r&&(Ji(o,i)&&t.cache.write({query:n,result:o.data,dataId:"ROOT_SUBSCRIPTION",variables:e}),t.broadcastQueries()),Dr(o))throw new Xr({graphQLErrors:o.errors});return o}))};if(this.transform(n).hasClientExports){var u=this.localState.addExportedVariables(n,o,s).then(l);return new Dt((function(e){var t=null;return u.then((function(n){return t=n.subscribe(e)}),e.error),function(){return t&&t.unsubscribe()}}))}return l(o)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){this.fetchCancelFns.delete(e),this.queries.has(e)&&(this.getQuery(e).stop(),this.queries.delete(e))},e.prototype.broadcastQueries=function(){this.onBroadcast&&this.onBroadcast(),this.queries.forEach((function(e){return e.notify()}))},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,n,r){var i,o,s=this;void 0===r&&(r=null!==(i=null==t?void 0:t.queryDeduplication)&&void 0!==i?i:this.queryDeduplication);var l=this.transform(e).serverQuery;if(l){var u=this.inFlightLinkObservables,c=this.link,f={query:l,variables:n,operationName:Xt(l)||void 0,context:this.prepareContext(a(a({},t),{forceFetch:!r}))};if(t=f.context,r){var d=u.get(l)||new Map;u.set(l,d);var p=Ir(n);if(!(o=d.get(p))){var h=new Zr([qn(c,f)]);d.set(p,o=h),h.beforeNext((function(){d.delete(p)&&d.size<1&&u.delete(l)}))}}else o=new Zr([qn(c,f)])}else o=new Zr([Dt.of({data:{}})]),t=this.prepareContext(t);var m=this.transform(e).clientQuery;return m&&(o=Tr(o,(function(e){return s.localState.runResolvers({document:m,remoteResult:e,context:t,variables:n})}))),o},e.prototype.getResultsFromLink=function(e,t,n){var r=e.lastRequestId=this.generateRequestId(),i=this.cache.transformForLink(this.transform(e.document).document);return Tr(this.getObservableFromLink(i,n.context,n.variables),(function(o){var a=Br(o),s=a.length>0;if(r>=e.lastRequestId){if(s&&"none"===n.errorPolicy)throw e.markError(new Xr({graphQLErrors:a}));e.markResult(o,i,n,t),e.markReady()}var l={data:o.data,loading:!1,networkStatus:Kr.ready};return s&&"ignore"!==n.errorPolicy&&(l.errors=a,l.networkStatus=Kr.error),l}),(function(t){var n=t.hasOwnProperty("graphQLErrors")?t:new Xr({networkError:t});throw r>=e.lastRequestId&&e.markError(n),n}))},e.prototype.fetchQueryObservable=function(e,t,n){var r=this;void 0===n&&(n=Kr.loading);var i=this.transform(t.query).document,o=this.getVariables(i,t.variables),a=this.getQuery(e),s=this.defaultOptions.watchQuery,l=t.fetchPolicy,u=void 0===l?s&&s.fetchPolicy||"cache-first":l,c=t.errorPolicy,f=void 0===c?s&&s.errorPolicy||"none":c,d=t.returnPartialData,p=void 0!==d&&d,h=t.notifyOnNetworkStatusChange,m=void 0!==h&&h,v=t.context,y=void 0===v?{}:v,g=Object.assign({},t,{query:i,variables:o,fetchPolicy:u,errorPolicy:f,returnPartialData:p,notifyOnNetworkStatusChange:m,context:y}),b=function(e){g.variables=e;var i=r.fetchQueryByPolicy(a,g,n);return"standby"!==g.fetchPolicy&&i.length>0&&a.observableQuery&&a.observableQuery.applyNextFetchPolicy("after-fetch",t),i},A=function(){return r.fetchCancelFns.delete(e)};this.fetchCancelFns.set(e,(function(e){A(),setTimeout((function(){return E.cancel(e)}))}));var E=new Zr(this.transform(g.query).hasClientExports?this.localState.addExportedVariables(g.query,g.variables,g.context).then(b):b(g.variables));return E.promise.then(A,A),E},e.prototype.refetchQueries=function(e){var t=this,n=e.updateCache,r=e.include,i=e.optimistic,o=void 0!==i&&i,a=e.removeOptimistic,s=void 0===a?o?Yr("refetchQueries"):void 0:a,l=e.onQueryUpdated,u=new Map;r&&this.getObservableQueries(r).forEach((function(e,n){u.set(n,{oq:e,lastDiff:t.getQuery(n).getDiff()})}));var c=new Map;return n&&this.cache.batch({update:n,optimistic:o&&s||!1,removeOptimistic:s,onWatchUpdated:function(e,t,n){var r=e.watcher instanceof Gi&&e.watcher.observableQuery;if(r){if(l){u.delete(r.queryId);var i=l(r,t,n);return!0===i&&(i=r.refetch()),!1!==i&&c.set(r,i),i}null!==l&&u.set(r.queryId,{oq:r,lastDiff:n,diff:t})}}}),u.size&&u.forEach((function(e,n){var r,i=e.oq,o=e.lastDiff,a=e.diff;if(l){if(!a){var s=i.queryInfo;s.reset(),a=s.getDiff()}r=l(i,a,o)}l&&!0!==r||(r=i.refetch()),!1!==r&&c.set(i,r),n.indexOf("legacyOneTimeQuery")>=0&&t.stopQueryNoBroadcast(n)})),s&&this.cache.removeOptimistic(s),c},e.prototype.fetchQueryByPolicy=function(e,t,n){var r=this,i=t.query,o=t.variables,s=t.fetchPolicy,l=t.refetchWritePolicy,u=t.errorPolicy,c=t.returnPartialData,f=t.context,d=t.notifyOnNetworkStatusChange,p=e.networkStatus;e.init({document:this.transform(i).document,variables:o,networkStatus:n});var h=function(){return e.getDiff(o)},m=function(t,n){void 0===n&&(n=e.networkStatus||Kr.loading);var s=t.result;!__DEV__||c||Zn(s,{})||si(t.missing);var l=function(e){return Dt.of(a({data:e,loading:Gr(n),networkStatus:n},t.complete?null:{partial:!0}))};return s&&r.transform(i).hasForcedResolvers?r.localState.runResolvers({document:i,remoteResult:{data:s},context:f,variables:o,onlyRunForcedResolvers:!0}).then((function(e){return l(e.data||void 0)})):l(s)},v="no-cache"===s?0:n===Kr.refetch&&"merge"!==l?1:2,y=function(){return r.getResultsFromLink(e,v,{variables:o,context:f,fetchPolicy:s,errorPolicy:u})},g=d&&"number"==typeof p&&p!==n&&Gr(n);switch(s){default:case"cache-first":return(b=h()).complete?[m(b,e.markReady())]:c||g?[m(b),y()]:[y()];case"cache-and-network":var b;return(b=h()).complete||c||g?[m(b),y()]:[y()];case"cache-only":return[m(h(),e.markReady())];case"network-only":return g?[m(h()),y()]:[y()];case"no-cache":return g?[m(e.getDiff()),y()]:[y()];case"standby":return[]}},e.prototype.getQuery=function(e){return e&&!this.queries.has(e)&&this.queries.set(e,new Gi(this,e)),this.queries.get(e)},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return a(a({},t),{clientAwareness:this.clientAwareness})},e}();function no(e,t){return hr(e,t,t.variables&&{variables:a(a({},e&&e.variables),t.variables)})}var ro=!1,io=function(){function e(e){var t=this;this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var n=e.uri,r=e.credentials,i=e.headers,o=e.cache,a=e.ssrMode,s=void 0!==a&&a,l=e.ssrForceFetchDelay,u=void 0===l?0:l,c=e.connectToDevTools,f=void 0===c?"object"==typeof window&&!window.__APOLLO_CLIENT__&&__DEV__:c,d=e.queryDeduplication,p=void 0===d||d,v=e.defaultOptions,y=e.assumeImmutableResults,g=void 0!==y&&y,b=e.resolvers,A=e.typeDefs,E=e.fragmentMatcher,w=e.name,k=e.version,C=e.link;if(C||(C=n?new Qn({uri:n,credentials:r,headers:i}):sn.empty()),!o)throw __DEV__?new h("To initialize Apollo Client, you must specify a 'cache' property in the options object. \nFor more information, please visit: https://go.apollo.dev/c/docs"):new h(9);if(this.link=C,this.cache=o,this.disableNetworkFetches=s||u>0,this.queryDeduplication=p,this.defaultOptions=v||Object.create(null),this.typeDefs=A,u&&setTimeout((function(){return t.disableNetworkFetches=!1}),u),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this),f&&"object"==typeof window&&(window.__APOLLO_CLIENT__=this),!ro&&f&&__DEV__&&(ro=!0,"undefined"!=typeof window&&window.document&&window.top===window.self&&!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__)){var S=window.navigator,x=S&&S.userAgent,_=void 0;"string"==typeof x&&(x.indexOf("Chrome/")>-1?_="https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm":x.indexOf("Firefox/")>-1&&(_="https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/")),_&&__DEV__&&m.log("Download the Apollo DevTools for a better development experience: "+_)}this.version="3.7.3",this.localState=new Hi({cache:o,client:this,resolvers:b,fragmentMatcher:E}),this.queryManager=new to({cache:this.cache,link:this.link,defaultOptions:this.defaultOptions,queryDeduplication:p,ssrMode:s,clientAwareness:{name:w,version:k},localState:this.localState,assumeImmutableResults:g,onBroadcast:f?function(){t.devToolsHookCb&&t.devToolsHookCb({action:{},state:{queries:t.queryManager.getQueryStore(),mutations:t.queryManager.mutationStore||{}},dataWithOptimisticResults:t.cache.extract(!0)})}:void 0})}return e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=no(this.defaultOptions.watchQuery,e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=a(a({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=no(this.defaultOptions.query,e)),__DEV__?m("cache-and-network"!==e.fetchPolicy,"The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only."):m("cache-and-network"!==e.fetchPolicy,10),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=a(a({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=no(this.defaultOptions.mutate,e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){this.cache.writeQuery(e),this.queryManager.broadcastQueries()},e.prototype.writeFragment=function(e){this.cache.writeFragment(e),this.queryManager.broadcastQueries()},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return qn(this.link,e)},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore({discardWatches:!1})})).then((function(){return Promise.all(e.resetStoreCallbacks.map((function(e){return e()})))})).then((function(){return e.reFetchObservableQueries()}))},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore({discardWatches:!0})})).then((function(){return Promise.all(e.clearStoreCallbacks.map((function(e){return e()})))}))},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.refetchQueries=function(e){var t=this.queryManager.refetchQueries(e),n=[],r=[];t.forEach((function(e,t){n.push(t),r.push(e)}));var i=Promise.all(r);return i.queries=n,i.results=r,i.catch((function(e){__DEV__&&m.debug("In client.refetchQueries, Promise.all promise rejected with error ".concat(e))})),i},e.prototype.getObservableQueries=function(e){return void 0===e&&(e="active"),this.queryManager.getObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e.prototype.setLink=function(e){this.link=this.queryManager.link=e},e}(),oo=function(){function e(){this.getFragmentDoc=Vi(Pt)}return e.prototype.batch=function(e){var t,n=this,r="string"==typeof e.optimistic?e.optimistic:!1===e.optimistic?null:void 0;return this.performTransaction((function(){return t=e.update(n)}),r),t},e.prototype.recordOptimisticTransaction=function(e,t){this.performTransaction(e,t)},e.prototype.transformDocument=function(e){return e},e.prototype.transformForLink=function(e){return e},e.prototype.identify=function(e){},e.prototype.gc=function(){return[]},e.prototype.modify=function(e){return!1},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read(a(a({},e),{rootId:e.id||"ROOT_QUERY",optimistic:t}))},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read(a(a({},e),{query:this.getFragmentDoc(e.fragment,e.fragmentName),rootId:e.id,optimistic:t}))},e.prototype.writeQuery=function(e){var t=e.id,n=e.data,r=s(e,["id","data"]);return this.write(Object.assign(r,{dataId:t||"ROOT_QUERY",result:n}))},e.prototype.writeFragment=function(e){var t=e.id,n=e.data,r=e.fragment,i=e.fragmentName,o=s(e,["id","data","fragment","fragmentName"]);return this.write(Object.assign(o,{query:this.getFragmentDoc(r,i),dataId:t,result:n}))},e.prototype.updateQuery=function(e,t){return this.batch({update:function(n){var r=n.readQuery(e),i=t(r);return null==i?r:(n.writeQuery(a(a({},e),{data:i})),i)}})},e.prototype.updateFragment=function(e,t){return this.batch({update:function(n){var r=n.readFragment(e),i=t(r);return null==i?r:(n.writeFragment(a(a({},e),{data:i})),i)}})},e}(),ao=function(e){function t(n,r,i,o){var a,s=e.call(this,n)||this;if(s.message=n,s.path=r,s.query=i,s.variables=o,Array.isArray(s.path)){s.missing=s.message;for(var l=s.path.length-1;l>=0;--l)s.missing=((a={})[s.path[l]]=s.missing,a)}else s.missing=s.path;return s.__proto__=t.prototype,s}return o(t,e),t}(Error);function so(e){return __DEV__&&(t=e,(n=new Set([t])).forEach((function(e){Bt(e)&&function(e){if(__DEV__&&!Object.isFrozen(e))try{Object.freeze(e)}catch(e){if(e instanceof TypeError)return null;throw e}return e}(e)===e&&Object.getOwnPropertyNames(e).forEach((function(t){Bt(e[t])&&n.add(e[t])}))}))),e;var t,n}var lo=Object.create(null),uo=function(){return lo},co=Object.create(null),fo=function(){function e(e,t){var n=this;this.policies=e,this.group=t,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(e,t){return so(Lt(e)?n.get(e.__ref,t):e&&e[t])},this.canRead=function(e){return Lt(e)?n.has(e.__ref):"object"==typeof e},this.toReference=function(e,t){if("string"==typeof e)return Ft(e);if(Lt(e))return e;var r=n.policies.identify(e)[0];if(r){var i=Ft(r);return t&&n.merge(r,e),i}}}return e.prototype.toObject=function(){return a({},this.data)},e.prototype.has=function(e){return void 0!==this.lookup(e,!0)},e.prototype.get=function(e,t){if(this.group.depend(e,t),mr.call(this.data,e)){var n=this.data[e];if(n&&mr.call(n,t))return n[t]}return"__typename"===t&&mr.call(this.policies.rootTypenamesById,e)?this.policies.rootTypenamesById[e]:this instanceof vo?this.parent.get(e,t):void 0},e.prototype.lookup=function(e,t){return t&&this.group.depend(e,"__exists"),mr.call(this.data,e)?this.data[e]:this instanceof vo?this.parent.lookup(e,t):this.policies.rootTypenamesById[e]?Object.create(null):void 0},e.prototype.merge=function(e,t){var n,r=this;Lt(e)&&(e=e.__ref),Lt(t)&&(t=t.__ref);var i="string"==typeof e?this.lookup(n=e):e,o="string"==typeof t?this.lookup(n=t):t;if(o){__DEV__?m("string"==typeof n,"store.merge expects a string ID"):m("string"==typeof n,1);var a=new ar(go).merge(i,o);if(this.data[n]=a,a!==i&&(delete this.refs[n],this.group.caching)){var s=Object.create(null);i||(s.__exists=1),Object.keys(o).forEach((function(e){if(!i||i[e]!==a[e]){s[e]=1;var t=wr(e);t===e||r.policies.hasKeyArgs(a.__typename,t)||(s[t]=1),void 0!==a[e]||r instanceof vo||delete a[e]}})),!s.__typename||i&&i.__typename||this.policies.rootTypenamesById[n]!==a.__typename||delete s.__typename,Object.keys(s).forEach((function(e){return r.group.dirty(n,e)}))}}},e.prototype.modify=function(e,t){var n=this,r=this.lookup(e);if(r){var i=Object.create(null),o=!1,s=!0,l={DELETE:lo,INVALIDATE:co,isReference:Lt,toReference:this.toReference,canRead:this.canRead,readField:function(t,r){return n.policies.readField("string"==typeof t?{fieldName:t,from:r||Ft(e)}:t,{store:n})}};if(Object.keys(r).forEach((function(u){var c=wr(u),f=r[u];if(void 0!==f){var d="function"==typeof t?t:t[u]||t[c];if(d){var p=d===uo?lo:d(so(f),a(a({},l),{fieldName:c,storeFieldName:u,storage:n.getStorage(e,u)}));p===co?n.group.dirty(e,u):(p===lo&&(p=void 0),p!==f&&(i[u]=p,o=!0,f=p))}void 0!==f&&(s=!1)}})),o)return this.merge(e,i),s&&(this instanceof vo?this.data[e]=void 0:delete this.data[e],this.group.dirty(e,"__exists")),!0}return!1},e.prototype.delete=function(e,t,n){var r,i=this.lookup(e);if(i){var o=this.getFieldValue(i,"__typename"),a=t&&n?this.policies.getStoreFieldName({typename:o,fieldName:t,args:n}):t;return this.modify(e,a?((r={})[a]=uo,r):uo)}return!1},e.prototype.evict=function(e,t){var n=!1;return e.id&&(mr.call(this.data,e.id)&&(n=this.delete(e.id,e.fieldName,e.args)),this instanceof vo&&this!==t&&(n=this.parent.evict(e,t)||n),(e.fieldName||n)&&this.group.dirty(e.id,e.fieldName||"__exists")),n},e.prototype.clear=function(){this.replace(null)},e.prototype.extract=function(){var e=this,t=this.toObject(),n=[];return this.getRootIdSet().forEach((function(t){mr.call(e.policies.rootTypenamesById,t)||n.push(t)})),n.length&&(t.__META={extraRootIds:n.sort()}),t},e.prototype.replace=function(e){var t=this;if(Object.keys(this.data).forEach((function(n){e&&mr.call(e,n)||t.delete(n)})),e){var n=e.__META,r=s(e,["__META"]);Object.keys(r).forEach((function(e){t.merge(e,r[e])})),n&&n.extraRootIds.forEach(this.retain,this)}},e.prototype.retain=function(e){return this.rootIds[e]=(this.rootIds[e]||0)+1},e.prototype.release=function(e){if(this.rootIds[e]>0){var t=--this.rootIds[e];return t||delete this.rootIds[e],t}return 0},e.prototype.getRootIdSet=function(e){return void 0===e&&(e=new Set),Object.keys(this.rootIds).forEach(e.add,e),this instanceof vo?this.parent.getRootIdSet(e):Object.keys(this.policies.rootTypenamesById).forEach(e.add,e),e},e.prototype.gc=function(){var e=this,t=this.getRootIdSet(),n=this.toObject();t.forEach((function(r){mr.call(n,r)&&(Object.keys(e.findChildRefIds(r)).forEach(t.add,t),delete n[r])}));var r=Object.keys(n);if(r.length){for(var i=this;i instanceof vo;)i=i.parent;r.forEach((function(e){return i.delete(e)}))}return r},e.prototype.findChildRefIds=function(e){if(!mr.call(this.refs,e)){var t=this.refs[e]=Object.create(null),n=this.data[e];if(!n)return t;var r=new Set([n]);r.forEach((function(e){Lt(e)&&(t[e.__ref]=!0),Bt(e)&&Object.keys(e).forEach((function(t){var n=e[t];Bt(n)&&r.add(n)}))}))}return this.refs[e]},e.prototype.makeCacheKey=function(){return this.group.keyMaker.lookupArray(arguments)},e}(),po=function(){function e(e,t){void 0===t&&(t=null),this.caching=e,this.parent=t,this.d=null,this.resetCaching()}return e.prototype.resetCaching=function(){this.d=this.caching?Li():null,this.keyMaker=new pr(D)},e.prototype.depend=function(e,t){if(this.d){this.d(ho(e,t));var n=wr(t);n!==t&&this.d(ho(e,n)),this.parent&&this.parent.depend(e,t)}},e.prototype.dirty=function(e,t){this.d&&this.d.dirty(ho(e,t),"__exists"===t?"forget":"setDirty")},e}();function ho(e,t){return t+"#"+e}function mo(e,t){bo(e)&&e.group.depend(t,"__exists")}!function(e){var t=function(e){function t(t){var n=t.policies,r=t.resultCaching,i=void 0===r||r,o=t.seed,a=e.call(this,n,new po(i))||this;return a.stump=new yo(a),a.storageTrie=new pr(D),o&&a.replace(o),a}return o(t,e),t.prototype.addLayer=function(e,t){return this.stump.addLayer(e,t)},t.prototype.removeLayer=function(){return this},t.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},t}(e);e.Root=t}(fo||(fo={}));var vo=function(e){function t(t,n,r,i){var o=e.call(this,n.policies,i)||this;return o.id=t,o.parent=n,o.replay=r,o.group=i,r(o),o}return o(t,e),t.prototype.addLayer=function(e,n){return new t(e,this,n,this.group)},t.prototype.removeLayer=function(e){var t=this,n=this.parent.removeLayer(e);return e===this.id?(this.group.caching&&Object.keys(this.data).forEach((function(e){var r=t.data[e],i=n.lookup(e);i?r?r!==i&&Object.keys(r).forEach((function(n){Zn(r[n],i[n])||t.group.dirty(e,n)})):(t.group.dirty(e,"__exists"),Object.keys(i).forEach((function(n){t.group.dirty(e,n)}))):t.delete(e)})),n):n===this.parent?this:n.addLayer(this.id,this.replay)},t.prototype.toObject=function(){return a(a({},this.parent.toObject()),this.data)},t.prototype.findChildRefIds=function(t){var n=this.parent.findChildRefIds(t);return mr.call(this.data,t)?a(a({},n),e.prototype.findChildRefIds.call(this,t)):n},t.prototype.getStorage=function(){for(var e=this.parent;e.parent;)e=e.parent;return e.getStorage.apply(e,arguments)},t}(fo),yo=function(e){function t(t){return e.call(this,"EntityStore.Stump",t,(function(){}),new po(t.group.caching,t.group))||this}return o(t,e),t.prototype.removeLayer=function(){return this},t.prototype.merge=function(){return this.parent.merge.apply(this.parent,arguments)},t}(vo);function go(e,t,n){var r=e[n],i=t[n];return Zn(r,i)?r:i}function bo(e){return!!(e instanceof fo&&e.group.caching)}function Ao(e){return[e.selectionSet,e.objectOrReference,e.context,e.context.canonizeResults]}var Eo=function(){function e(e){var t=this;this.knownResults=new(D?WeakMap:Map),this.config=hr(e,{addTypename:!1!==e.addTypename,canonizeResults:Ar(e)}),this.canon=e.canon||new Or,this.executeSelectionSet=Vi((function(e){var n,r=e.context.canonizeResults,i=Ao(e);i[3]=!r;var o=(n=t.executeSelectionSet).peek.apply(n,i);return o?r?a(a({},o),{result:t.canon.admit(o.result)}):o:(mo(e.context.store,e.enclosingRef.__ref),t.execSelectionSetImpl(e))}),{max:this.config.resultCacheMaxSize,keyArgs:Ao,makeCacheKey:function(e,t,n,r){if(bo(n.store))return n.store.makeCacheKey(e,Lt(t)?t.__ref:t,n.varString,r)}}),this.executeSubSelectedArray=Vi((function(e){return mo(e.context.store,e.enclosingRef.__ref),t.execSubSelectedArrayImpl(e)}),{max:this.config.resultCacheMaxSize,makeCacheKey:function(e){var t=e.field,n=e.array,r=e.context;if(bo(r.store))return r.store.makeCacheKey(t,n,r.varString)}})}return e.prototype.resetCanon=function(){this.canon=new Or},e.prototype.diffQueryAgainstStore=function(e){var t=e.store,n=e.query,r=e.rootId,i=void 0===r?"ROOT_QUERY":r,o=e.variables,s=e.returnPartialData,l=void 0===s||s,u=e.canonizeResults,c=void 0===u?this.config.canonizeResults:u,f=this.config.cache.policies;o=a(a({},tn(Jt(n))),o);var d,p=Ft(i),h=this.executeSelectionSet({selectionSet:en(n).selectionSet,objectOrReference:p,enclosingRef:p,context:a({store:t,query:n,policies:f,variables:o,varString:Ir(o),canonizeResults:c},Sr(n,this.config.fragments))});if(h.missing&&(d=[new ao(wo(h.missing),h.missing,n,o)],!l))throw d[0];return{result:h.result,complete:!d,missing:d}},e.prototype.isFresh=function(e,t,n,r){if(bo(r.store)&&this.knownResults.get(e)===n){var i=this.executeSelectionSet.peek(n,t,r,this.canon.isKnown(e));if(i&&e===i.result)return!0}return!1},e.prototype.execSelectionSetImpl=function(e){var t=this,n=e.selectionSet,r=e.objectOrReference,i=e.enclosingRef,o=e.context;if(Lt(r)&&!o.policies.rootTypenamesById[r.__ref]&&!o.store.has(r.__ref))return{result:this.canon.empty,missing:"Dangling reference to missing ".concat(r.__ref," object")};var a,s=o.variables,l=o.policies,u=o.store.getFieldValue(r,"__typename"),c=[],f=new ar;function d(e,t){var n;return e.missing&&(a=f.merge(a,((n={})[t]=e.missing,n))),e.result}this.config.addTypename&&"string"==typeof u&&!l.rootIdsByTypename[u]&&c.push({__typename:u});var p=new Set(n.selections);p.forEach((function(e){var n,m;if(ln(e,s))if($t(e)){var v=l.readField({fieldName:e.name.value,field:e,variables:o.variables,from:r},o),y=Yt(e);void 0===v?zr.added(e)||(a=f.merge(a,((n={})[y]="Can't find field '".concat(e.name.value,"' on ").concat(Lt(r)?r.__ref+" object":"object "+JSON.stringify(r,null,2)),n))):yr(v)?v=d(t.executeSubSelectedArray({field:e,array:v,enclosingRef:i,context:o}),y):e.selectionSet?null!=v&&(v=d(t.executeSelectionSet({selectionSet:e.selectionSet,objectOrReference:v,enclosingRef:Lt(v)?v:i,context:o}),y)):o.canonizeResults&&(v=t.canon.pass(v)),void 0!==v&&c.push(((m={})[y]=v,m))}else{var g=jt(e,o.lookupFragment);if(!g&&e.kind===st.FRAGMENT_SPREAD)throw __DEV__?new h("No fragment named ".concat(e.name.value)):new h(5);g&&l.fragmentMatches(g,u)&&g.selectionSet.selections.forEach(p.add,p)}}));var m={result:ir(c),missing:a},v=o.canonizeResults?this.canon.admit(m):so(m);return v.result&&this.knownResults.set(v.result,n),v},e.prototype.execSubSelectedArrayImpl=function(e){var t,n=this,r=e.field,i=e.array,o=e.enclosingRef,a=e.context,s=new ar;function l(e,n){var r;return e.missing&&(t=s.merge(t,((r={})[n]=e.missing,r))),e.result}return r.selectionSet&&(i=i.filter(a.store.canRead)),i=i.map((function(e,t){return null===e?null:yr(e)?l(n.executeSubSelectedArray({field:r,array:e,enclosingRef:o,context:a}),t):r.selectionSet?l(n.executeSelectionSet({selectionSet:r.selectionSet,objectOrReference:e,enclosingRef:Lt(e)?e:o,context:a}),t):(__DEV__&&function(e,t,n){if(!t.selectionSet){var r=new Set([n]);r.forEach((function(n){Bt(n)&&(__DEV__?m(!Lt(n),"Missing selection set for object of type ".concat(function(e,t){return Lt(t)?e.get(t.__ref,"__typename"):t&&t.__typename}(e,n)," returned for query field ").concat(t.name.value)):m(!Lt(n),6),Object.values(n).forEach(r.add,r))}))}}(a.store,r,e),e)})),{result:a.canonizeResults?this.canon.admit(i):i,missing:t}},e}();function wo(e){try{JSON.stringify(e,(function(e,t){if("string"==typeof t)throw t;return t}))}catch(e){return e}}var ko=Object.create(null);function Co(e){var t=JSON.stringify(e);return ko[t]||(ko[t]=Object.create(null))}function So(e){var t=Co(e);return t.keyFieldsFn||(t.keyFieldsFn=function(t,n){var r=function(e,t){return n.readField(t,e)},i=n.keyObject=_o(e,(function(e){var i=No(n.storeObject,e,r);return void 0===i&&t!==n.storeObject&&mr.call(t,e[0])&&(i=No(t,e,Io)),__DEV__?m(void 0!==i,"Missing field '".concat(e.join("."),"' while extracting keyFields from ").concat(JSON.stringify(t))):m(void 0!==i,2),i}));return"".concat(n.typename,":").concat(JSON.stringify(i))})}function xo(e){var t=Co(e);return t.keyArgsFn||(t.keyArgsFn=function(t,n){var r=n.field,i=n.variables,o=n.fieldName,a=_o(e,(function(e){var n=e[0],o=n.charAt(0);if("@"!==o)if("$"!==o){if(t)return No(t,e)}else{var a=n.slice(1);if(i&&mr.call(i,a)){var s=e.slice(0);return s[0]=a,No(i,s)}}else if(r&&tr(r.directives)){var l=n.slice(1),u=r.directives.find((function(e){return e.name.value===l})),c=u&&Ut(u,i);return c&&No(c,e.slice(1))}})),s=JSON.stringify(a);return(t||"{}"!==s)&&(o+=":"+s),o})}function _o(e,t){var n=new ar;return Oo(e).reduce((function(e,r){var i,o=t(r);if(void 0!==o){for(var a=r.length-1;a>=0;--a)(i={})[r[a]]=o,o=i;e=n.merge(e,o)}return e}),Object.create(null))}function Oo(e){var t=Co(e);if(!t.paths){var n=t.paths=[],r=[];e.forEach((function(t,i){yr(t)?(Oo(t).forEach((function(e){return n.push(r.concat(e))})),r.length=0):(r.push(t),yr(e[i+1])||(n.push(r.slice(0)),r.length=0))}))}return t.paths}function Io(e,t){return e[t]}function No(e,t,n){return n=n||Io,To(t.reduce((function e(t,r){return yr(t)?t.map((function(t){return e(t,r)})):t&&n(t,r)}),e))}function To(e){return Bt(e)?yr(e)?e.map(To):_o(Object.keys(e).sort(),(function(t){return No(e,t)})):e}function Do(e){return void 0!==e.args?e.args:e.field?Ut(e.field,e.variables):null}Vt.setStringify(Ir);var Bo=function(){},Po=function(e,t){return t.fieldName},Ro=function(e,t,n){return(0,n.mergeObjects)(e,t)},jo=function(e,t){return t},Fo=function(){function e(e){this.config=e,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=a({dataIdFromObject:gr},e),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),e.possibleTypes&&this.addPossibleTypes(e.possibleTypes),e.typePolicies&&this.addTypePolicies(e.typePolicies)}return e.prototype.identify=function(e,t){var n,r=this,i=t&&(t.typename||(null===(n=t.storeObject)||void 0===n?void 0:n.__typename))||e.__typename;if(i===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];for(var o,s=t&&t.storeObject||e,l=a(a({},t),{typename:i,storeObject:s,readField:t&&t.readField||function(){var e=Mo(arguments,s);return r.readField(e,{store:r.cache.data,variables:e.variables})}}),u=i&&this.getTypePolicy(i),c=u&&u.keyFn||this.config.dataIdFromObject;c;){var f=c(e,l);if(!yr(f)){o=f;break}c=So(f)}return o=o?String(o):void 0,l.keyObject?[o,l.keyObject]:[o]},e.prototype.addTypePolicies=function(e){var t=this;Object.keys(e).forEach((function(n){var r=e[n],i=r.queryType,o=r.mutationType,a=r.subscriptionType,l=s(r,["queryType","mutationType","subscriptionType"]);i&&t.setRootTypename("Query",n),o&&t.setRootTypename("Mutation",n),a&&t.setRootTypename("Subscription",n),mr.call(t.toBeAdded,n)?t.toBeAdded[n].push(l):t.toBeAdded[n]=[l]}))},e.prototype.updateTypePolicy=function(e,t){var n=this,r=this.getTypePolicy(e),i=t.keyFields,o=t.fields;function a(e,t){e.merge="function"==typeof t?t:!0===t?Ro:!1===t?jo:e.merge}a(r,t.merge),r.keyFn=!1===i?Bo:yr(i)?So(i):"function"==typeof i?i:r.keyFn,o&&Object.keys(o).forEach((function(t){var r=n.getFieldPolicy(e,t,!0),i=o[t];if("function"==typeof i)r.read=i;else{var s=i.keyArgs,l=i.read,u=i.merge;r.keyFn=!1===s?Po:yr(s)?xo(s):"function"==typeof s?s:r.keyFn,"function"==typeof l&&(r.read=l),a(r,u)}r.read&&r.merge&&(r.keyFn=r.keyFn||Po)}))},e.prototype.setRootTypename=function(e,t){void 0===t&&(t=e);var n="ROOT_"+e.toUpperCase(),r=this.rootTypenamesById[n];t!==r&&(__DEV__?m(!r||r===e,"Cannot change root ".concat(e," __typename more than once")):m(!r||r===e,3),r&&delete this.rootIdsByTypename[r],this.rootIdsByTypename[t]=n,this.rootTypenamesById[n]=t)},e.prototype.addPossibleTypes=function(e){var t=this;this.usingPossibleTypes=!0,Object.keys(e).forEach((function(n){t.getSupertypeSet(n,!0),e[n].forEach((function(e){t.getSupertypeSet(e,!0).add(n);var r=e.match(Er);r&&r[0]===e||t.fuzzySubtypes.set(e,new RegExp(e))}))}))},e.prototype.getTypePolicy=function(e){var t=this;if(!mr.call(this.typePolicies,e)){var n=this.typePolicies[e]=Object.create(null);n.fields=Object.create(null);var r=this.supertypeMap.get(e);r&&r.size&&r.forEach((function(e){var r=t.getTypePolicy(e),i=r.fields,o=s(r,["fields"]);Object.assign(n,o),Object.assign(n.fields,i)}))}var i=this.toBeAdded[e];return i&&i.length&&i.splice(0).forEach((function(n){t.updateTypePolicy(e,n)})),this.typePolicies[e]},e.prototype.getFieldPolicy=function(e,t,n){if(e){var r=this.getTypePolicy(e).fields;return r[t]||n&&(r[t]=Object.create(null))}},e.prototype.getSupertypeSet=function(e,t){var n=this.supertypeMap.get(e);return!n&&t&&this.supertypeMap.set(e,n=new Set),n},e.prototype.fragmentMatches=function(e,t,n,r){var i=this;if(!e.typeCondition)return!0;if(!t)return!1;var o=e.typeCondition.name.value;if(t===o)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(o))for(var a=this.getSupertypeSet(t,!0),s=[a],l=function(e){var t=i.getSupertypeSet(e,!1);t&&t.size&&s.indexOf(t)<0&&s.push(t)},u=!(!n||!this.fuzzySubtypes.size),c=!1,f=0;f<s.length;++f){var d=s[f];if(d.has(o))return a.has(o)||(c&&__DEV__&&m.warn("Inferring subtype ".concat(t," of supertype ").concat(o)),a.add(o)),!0;d.forEach(l),u&&f===s.length-1&&kr(e.selectionSet,n,r)&&(u=!1,c=!0,this.fuzzySubtypes.forEach((function(e,n){var r=t.match(e);r&&r[0]===t&&l(n)})))}return!1},e.prototype.hasKeyArgs=function(e,t){var n=this.getFieldPolicy(e,t,!1);return!(!n||!n.keyFn)},e.prototype.getStoreFieldName=function(e){var t,n=e.typename,r=e.fieldName,i=this.getFieldPolicy(n,r,!1),o=i&&i.keyFn;if(o&&n)for(var a={typename:n,fieldName:r,field:e.field||null,variables:e.variables},s=Do(e);o;){var l=o(s,a);if(!yr(l)){t=l||r;break}o=xo(l)}return void 0===t&&(t=e.field?function(e,t){var n=null;e.directives&&(n={},e.directives.forEach((function(e){n[e.name.value]={},e.arguments&&e.arguments.forEach((function(r){var i=r.name,o=r.value;return Mt(n[e.name.value],i,o,t)}))})));var r=null;return e.arguments&&e.arguments.length&&(r={},e.arguments.forEach((function(e){var n=e.name,i=e.value;return Mt(r,n,i,t)}))),Vt(e.name.value,r,n)}(e.field,e.variables):Vt(r,Do(e))),!1===t?r:r===wr(t)?t:r+":"+t},e.prototype.readField=function(e,t){var n=e.from;if(n&&(e.field||e.fieldName)){if(void 0===e.typename){var r=t.store.getFieldValue(n,"__typename");r&&(e.typename=r)}var i=this.getStoreFieldName(e),o=wr(i),a=t.store.getFieldValue(n,i),s=this.getFieldPolicy(e.typename,o,!1),l=s&&s.read;if(l){var u=Lo(this,n,e,t,t.store.getStorage(Lt(n)?n.__ref:n,i));return qi.withValue(this.cache,l,[a,u])}return a}},e.prototype.getReadFunction=function(e,t){var n=this.getFieldPolicy(e,t,!1);return n&&n.read},e.prototype.getMergeFunction=function(e,t,n){var r=this.getFieldPolicy(e,t,!1),i=r&&r.merge;return!i&&n&&(i=(r=this.getTypePolicy(n))&&r.merge),i},e.prototype.runMergeFunction=function(e,t,n,r,i){var o=n.field,a=n.typename,s=n.merge;return s===Ro?zo(r.store)(e,t):s===jo?t:(r.overwrite&&(e=void 0),s(e,t,Lo(this,void 0,{typename:a,fieldName:o.name.value,field:o,variables:r.variables},r,i||Object.create(null))))},e}();function Lo(e,t,n,r,i){var o=e.getStoreFieldName(n),a=wr(o),s=n.variables||r.variables,l=r.store,u=l.toReference,c=l.canRead;return{args:Do(n),field:n.field||null,fieldName:a,storeFieldName:o,variables:s,isReference:Lt,toReference:u,storage:i,cache:e.cache,canRead:c,readField:function(){return e.readField(Mo(arguments,t,s),r)},mergeObjects:zo(r.store)}}function Mo(e,t,n){var r,i,o,s=e[0],l=e[1],u=e.length;return"string"==typeof s?r={fieldName:s,from:u>1?l:t}:(r=a({},s),mr.call(r,"from")||(r.from=t)),__DEV__&&void 0===r.from&&__DEV__&&m.warn("Undefined 'from' passed to readField with arguments ".concat((i=Array.from(e),o=Yr("stringifyForDisplay"),JSON.stringify(i,(function(e,t){return void 0===t?o:t})).split(JSON.stringify(o)).join("<undefined>")))),void 0===r.variables&&(r.variables=n),r}function zo(e){return function(t,n){if(yr(t)||yr(n))throw __DEV__?new h("Cannot automatically merge arrays"):new h(4);if(Bt(t)&&Bt(n)){var r=e.getFieldValue(t,"__typename"),i=e.getFieldValue(n,"__typename");if(r&&i&&r!==i)return n;if(Lt(t)&&Cr(n))return e.merge(t.__ref,n),t;if(Cr(t)&&Lt(n))return e.merge(t,n.__ref),n;if(Cr(t)&&Cr(n))return a(a({},t),n)}return n}}function Vo(e,t,n){var r="".concat(t).concat(n),i=e.flavors.get(r);return i||e.flavors.set(r,i=e.clientOnly===t&&e.deferred===n?e:a(a({},e),{clientOnly:t,deferred:n})),i}var qo=function(){function e(e,t,n){this.cache=e,this.reader=t,this.fragments=n}return e.prototype.writeToStore=function(e,t){var n=this,r=t.query,i=t.result,o=t.dataId,s=t.variables,l=t.overwrite,u=Kt(r),c=new ar;s=a(a({},tn(u)),s);var f=a(a({store:e,written:Object.create(null),merge:function(e,t){return c.merge(e,t)},variables:s,varString:Ir(s)},Sr(r,this.fragments)),{overwrite:!!l,incomingById:new Map,clientOnly:!1,deferred:!1,flavors:new Map}),d=this.processSelectionSet({result:i||Object.create(null),dataId:o,selectionSet:u.selectionSet,mergeTree:{map:new Map},context:f});if(!Lt(d))throw __DEV__?new h("Could not identify object ".concat(JSON.stringify(i))):new h(7);return f.incomingById.forEach((function(t,r){var i=t.storeObject,o=t.mergeTree,a=t.fieldNodeSet,s=Ft(r);if(o&&o.map.size){var l=n.applyMerges(o,s,i,f);if(Lt(l))return;i=l}if(__DEV__&&!f.overwrite){var u=Object.create(null);a.forEach((function(e){e.selectionSet&&(u[e.name.value]=!0)})),Object.keys(i).forEach((function(e){(function(e){return!0===u[wr(e)]})(e)&&!function(e){var t=o&&o.map.get(e);return Boolean(t&&t.info&&t.info.merge)}(e)&&function(e,t,n,r){var i=function(e){var t=r.getFieldValue(e,n);return"object"==typeof t&&t},o=i(e);if(o){var a=i(t);if(a&&!Lt(o)&&!Zn(o,a)&&!Object.keys(o).every((function(e){return void 0!==r.getFieldValue(a,e)}))){var s=r.getFieldValue(e,"__typename")||r.getFieldValue(t,"__typename"),l=wr(n),u="".concat(s,".").concat(l);if(!Ho.has(u)){Ho.add(u);var c=[];yr(o)||yr(a)||[o,a].forEach((function(e){var t=r.getFieldValue(e,"__typename");"string"!=typeof t||c.includes(t)||c.push(t)})),__DEV__&&m.warn("Cache data may be lost when replacing the ".concat(l," field of a ").concat(s," object.\n\nTo address this problem (which is not a bug in Apollo Client), ").concat(c.length?"either ensure all objects of type "+c.join(" and ")+" have an ID or a custom merge function, or ":"","define a custom merge function for the ").concat(u," field, so InMemoryCache can safely merge these objects:\n\n  existing: ").concat(JSON.stringify(o).slice(0,1e3),"\n  incoming: ").concat(JSON.stringify(a).slice(0,1e3),"\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n"))}}}}(s,i,e,f.store)}))}e.merge(r,i)})),e.retain(d.__ref),d},e.prototype.processSelectionSet=function(e){var t=this,n=e.dataId,r=e.result,i=e.selectionSet,o=e.context,s=e.mergeTree,l=this.cache.policies,u=Object.create(null),c=n&&l.rootTypenamesById[n]||Wt(r,i,o.fragmentMap)||n&&o.store.get(n,"__typename");"string"==typeof c&&(u.__typename=c);var f=function(){var e=Mo(arguments,u,o.variables);if(Lt(e.from)){var t=o.incomingById.get(e.from.__ref);if(t){var n=l.readField(a(a({},e),{from:t.storeObject}),o);if(void 0!==n)return n}}return l.readField(e,o)},d=new Set;this.flattenFields(i,r,o,c).forEach((function(e,n){var i,o=Yt(n),a=r[o];if(d.add(n),void 0!==a){var p=l.getStoreFieldName({typename:c,fieldName:n.name.value,field:n,variables:e.variables}),h=Uo(s,p),v=t.processFieldValue(a,n,n.selectionSet?Vo(e,!1,!1):e,h),y=void 0;n.selectionSet&&(Lt(v)||Cr(v))&&(y=f("__typename",v));var g=l.getMergeFunction(c,n.name.value,y);g?h.info={field:n,typename:c,merge:g}:$o(s,p),u=e.merge(u,((i={})[p]=v,i))}else!__DEV__||e.clientOnly||e.deferred||zr.added(n)||l.getReadFunction(c,n.name.value)||__DEV__&&m.error("Missing field '".concat(Yt(n),"' while writing result ").concat(JSON.stringify(r,null,2)).substring(0,1e3))}));try{var p=l.identify(r,{typename:c,selectionSet:i,fragmentMap:o.fragmentMap,storeObject:u,readField:f}),h=p[0],v=p[1];n=n||h,v&&(u=o.merge(u,v))}catch(e){if(!n)throw e}if("string"==typeof n){var y=Ft(n),g=o.written[n]||(o.written[n]=[]);if(g.indexOf(i)>=0)return y;if(g.push(i),this.reader&&this.reader.isFresh(r,y,i,o))return y;var b=o.incomingById.get(n);return b?(b.storeObject=o.merge(b.storeObject,u),b.mergeTree=Yo(b.mergeTree,s),d.forEach((function(e){return b.fieldNodeSet.add(e)}))):o.incomingById.set(n,{storeObject:u,mergeTree:Wo(s)?void 0:s,fieldNodeSet:d}),y}return u},e.prototype.processFieldValue=function(e,t,n,r){var i=this;return t.selectionSet&&null!==e?yr(e)?e.map((function(e,o){var a=i.processFieldValue(e,t,n,Uo(r,o));return $o(r,o),a})):this.processSelectionSet({result:e,selectionSet:t.selectionSet,context:n,mergeTree:r}):__DEV__?ei(e):e},e.prototype.flattenFields=function(e,t,n,r){void 0===r&&(r=Wt(t,e,n.fragmentMap));var i=new Map,o=this.cache.policies,a=new pr(!1);return function e(s,l){var u=a.lookup(s,l.clientOnly,l.deferred);u.visited||(u.visited=!0,s.selections.forEach((function(a){if(ln(a,n.variables)){var s=l.clientOnly,u=l.deferred;if(s&&u||!tr(a.directives)||a.directives.forEach((function(e){var t=e.name.value;if("client"===t&&(s=!0),"defer"===t){var r=Ut(e,n.variables);r&&!1===r.if||(u=!0)}})),$t(a)){var c=i.get(a);c&&(s=s&&c.clientOnly,u=u&&c.deferred),i.set(a,Vo(n,s,u))}else{var f=jt(a,n.lookupFragment);if(!f&&a.kind===st.FRAGMENT_SPREAD)throw __DEV__?new h("No fragment named ".concat(a.name.value)):new h(8);f&&o.fragmentMatches(f,r,t,n.variables)&&e(f.selectionSet,Vo(n,s,u))}}})))}(e,n),i},e.prototype.applyMerges=function(e,t,n,r,i){var o,s=this;if(e.map.size&&!Lt(n)){var l,u=yr(n)||!Lt(t)&&!Cr(t)?void 0:t,c=n;u&&!i&&(i=[Lt(u)?u.__ref:u]);var f=function(e,t){return yr(e)?"number"==typeof t?e[t]:void 0:r.store.getFieldValue(e,String(t))};e.map.forEach((function(e,t){var n=f(u,t),o=f(c,t);if(void 0!==o){i&&i.push(t);var a=s.applyMerges(e,n,o,r,i);a!==o&&(l=l||new Map).set(t,a),i&&m(i.pop()===t)}})),l&&(n=yr(c)?c.slice(0):a({},c),l.forEach((function(e,t){n[t]=e})))}return e.info?this.cache.policies.runMergeFunction(t,n,e.info,r,i&&(o=r.store).getStorage.apply(o,i)):n},e}(),Qo=[];function Uo(e,t){var n=e.map;return n.has(t)||n.set(t,Qo.pop()||{map:new Map}),n.get(t)}function Yo(e,t){if(e===t||!t||Wo(t))return e;if(!e||Wo(e))return t;var n=e.info&&t.info?a(a({},e.info),t.info):e.info||t.info,r=e.map.size&&t.map.size,i={info:n,map:r?new Map:e.map.size?e.map:t.map};if(r){var o=new Set(t.map.keys());e.map.forEach((function(e,n){i.map.set(n,Yo(e,t.map.get(n))),o.delete(n)})),o.forEach((function(n){i.map.set(n,Yo(t.map.get(n),e.map.get(n)))}))}return i}function Wo(e){return!e||!(e.info||e.map.size)}function $o(e,t){var n=e.map,r=n.get(t);r&&Wo(r)&&(Qo.push(r),n.delete(t))}var Ho=new Set,Zo=function(e){function t(t){void 0===t&&(t={});var n=e.call(this)||this;return n.watches=new Set,n.typenameDocumentCache=new Map,n.makeVar=Wi,n.txCount=0,n.config=function(e){return hr(br,e)}(t),n.addTypename=!!n.config.addTypename,n.policies=new Fo({cache:n,dataIdFromObject:n.config.dataIdFromObject,possibleTypes:n.config.possibleTypes,typePolicies:n.config.typePolicies}),n.init(),n}return o(t,e),t.prototype.init=function(){var e=this.data=new fo.Root({policies:this.policies,resultCaching:this.config.resultCaching});this.optimisticData=e.stump,this.resetResultCache()},t.prototype.resetResultCache=function(e){var t=this,n=this.storeReader,r=this.config.fragments;this.storeWriter=new qo(this,this.storeReader=new Eo({cache:this,addTypename:this.addTypename,resultCacheMaxSize:this.config.resultCacheMaxSize,canonizeResults:Ar(this.config),canon:e?void 0:n&&n.canon,fragments:r}),r),this.maybeBroadcastWatch=Vi((function(e,n){return t.broadcastWatch(e,n)}),{max:this.config.resultCacheMaxSize,makeCacheKey:function(e){var n=e.optimistic?t.optimisticData:t.data;if(bo(n)){var r=e.optimistic,i=e.id,o=e.variables;return n.makeCacheKey(e.query,e.callback,Ir({optimistic:r,id:i,variables:o}))}}}),new Set([this.data.group,this.optimisticData.group]).forEach((function(e){return e.resetCaching()}))},t.prototype.restore=function(e){return this.init(),e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).extract()},t.prototype.read=function(e){var t=e.returnPartialData,n=void 0!==t&&t;try{return this.storeReader.diffQueryAgainstStore(a(a({},e),{store:e.optimistic?this.optimisticData:this.data,config:this.config,returnPartialData:n})).result||null}catch(e){if(e instanceof ao)return null;throw e}},t.prototype.write=function(e){try{return++this.txCount,this.storeWriter.writeToStore(this.data,e)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.modify=function(e){if(mr.call(e,"id")&&!e.id)return!1;var t=e.optimistic?this.optimisticData:this.data;try{return++this.txCount,t.modify(e.id||"ROOT_QUERY",e.fields)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.diff=function(e){return this.storeReader.diffQueryAgainstStore(a(a({},e),{store:e.optimistic?this.optimisticData:this.data,rootId:e.id||"ROOT_QUERY",config:this.config}))},t.prototype.watch=function(e){var t=this;return this.watches.size||function(e){Ui(e).vars.forEach((function(t){return t.attachCache(e)}))}(this),this.watches.add(e),e.immediate&&this.maybeBroadcastWatch(e),function(){t.watches.delete(e)&&!t.watches.size&&Yi(t),t.maybeBroadcastWatch.forget(e)}},t.prototype.gc=function(e){Ir.reset();var t=this.optimisticData.gc();return e&&!this.txCount&&(e.resetResultCache?this.resetResultCache(e.resetResultIdentities):e.resetResultIdentities&&this.storeReader.resetCanon()),t},t.prototype.retain=function(e,t){return(t?this.optimisticData:this.data).retain(e)},t.prototype.release=function(e,t){return(t?this.optimisticData:this.data).release(e)},t.prototype.identify=function(e){if(Lt(e))return e.__ref;try{return this.policies.identify(e)[0]}catch(e){__DEV__&&m.warn(e)}},t.prototype.evict=function(e){if(!e.id){if(mr.call(e,"id"))return!1;e=a(a({},e),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(e,this.data)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.reset=function(e){var t=this;return this.init(),Ir.reset(),e&&e.discardWatches?(this.watches.forEach((function(e){return t.maybeBroadcastWatch.forget(e)})),this.watches.clear(),Yi(this)):this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){var t=this.optimisticData.removeLayer(e);t!==this.optimisticData&&(this.optimisticData=t,this.broadcastWatches())},t.prototype.batch=function(e){var t,n=this,r=e.update,i=e.optimistic,o=void 0===i||i,s=e.removeOptimistic,l=e.onWatchUpdated,u=function(e){var i=n,o=i.data,a=i.optimisticData;++n.txCount,e&&(n.data=n.optimisticData=e);try{return t=r(n)}finally{--n.txCount,n.data=o,n.optimisticData=a}},c=new Set;return l&&!this.txCount&&this.broadcastWatches(a(a({},e),{onWatchUpdated:function(e){return c.add(e),!1}})),"string"==typeof o?this.optimisticData=this.optimisticData.addLayer(o,u):!1===o?u(this.data):u(),"string"==typeof s&&(this.optimisticData=this.optimisticData.removeLayer(s)),l&&c.size?(this.broadcastWatches(a(a({},e),{onWatchUpdated:function(e,t){var n=l.call(this,e,t);return!1!==n&&c.delete(e),n}})),c.size&&c.forEach((function(e){return n.maybeBroadcastWatch.dirty(e)}))):this.broadcastWatches(e),t},t.prototype.performTransaction=function(e,t){return this.batch({update:e,optimistic:t||null!==t})},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=zr(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.transformForLink=function(e){var t=this.config.fragments;return t?t.transform(e):e},t.prototype.broadcastWatches=function(e){var t=this;this.txCount||this.watches.forEach((function(n){return t.maybeBroadcastWatch(n,e)}))},t.prototype.broadcastWatch=function(e,t){var n=e.lastDiff,r=this.diff(e);t&&(e.optimistic&&"string"==typeof t.optimistic&&(r.fromOptimisticTransaction=!0),t.onWatchUpdated&&!1===t.onWatchUpdated.call(this,e,r,n))||n&&Zn(n.result,r.result)||e.callback(e.lastDiff=r,n)},t}(oo);function Ko(e){return Ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ko(e)}function Xo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Go(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xo(Object(n),!0).forEach((function(t){Jo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Jo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ko(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ko(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ko(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ea,ta=new Vn({uri:"http://localhost:".concat(5e3,"/api")}),na=(ea=function(e,t){var n=t.headers,r=localStorage.getItem("token");return{headers:Go(Go({},n),{},{authorization:r||""})}},new sn((function(e,t){var n=s(e,[]);return new Dt((function(r){var i,o=!1;return Promise.resolve(n).then((function(t){return ea(0,e.getContext())})).then(e.setContext).then((function(){o||(i=t(e).subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}))})).catch(r.error.bind(r)),function(){o=!0,i&&i.unsubscribe()}}))}))),ra=new io({link:na.concat(ta),cache:new Zo});function ia(e){this.message=e}ia.prototype=new Error,ia.prototype.name="InvalidCharacterError";var oa="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new ia("'atob' failed: The string to be decoded is not correctly encoded.");for(var n,r,i=0,o=0,a="";r=t.charAt(o++);~r&&(n=i%4?64*n+r:r,i++%4)?a+=String.fromCharCode(255&n>>(-2*i&6)):0)r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r);return a};function aa(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(oa(e).replace(/(.)/g,(function(e,t){var n=t.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n})))}(t)}catch(e){return oa(t)}}function sa(e){this.message=e}sa.prototype=new Error,sa.prototype.name="InvalidTokenError";function la(e){return la="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},la(e)}function ua(){return ua=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ua.apply(this,arguments)}function ca(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function fa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function da(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fa(Object(n),!0).forEach((function(t){pa(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fa(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pa(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==la(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==la(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===la(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ha={user:null},ma=localStorage.getItem("token");if(ma){var va=function(e,t){if("string"!=typeof e)throw new sa("Invalid token specified");var n=!0===(t=t||{}).header?0:1;try{return JSON.parse(aa(e.split(".")[n]))}catch(e){throw new sa("Invalid token specified: "+e.message)}}(ma);1e3*va.exp<Date.now()?localStorage.removeItem("token"):ha.user=va}var ya=(0,t.createContext)({user:null,login:function(e){},logout:function(){}}),ga=function(e,t){switch(t.type){case"LOGIN":return da(da({},e),{},{user:t.payload});case"LOGOUT":return da(da({},e),{},{user:null});default:return e}},ba=function(e){var n,r,i=(n=(0,t.useReducer)(ga,ha),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ca(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ca(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[0],a=i[1];return t.createElement(ya.Provider,ua({value:{user:o.user,login:function(e){localStorage.setItem("token",e.token),a({type:"LOGIN",payload:e})},logout:function(){localStorage.removeItem("token"),a({type:"LOGOUT"})}}},e))},Aa=i(379),Ea=i.n(Aa),wa=i(795),ka=i.n(wa),Ca=i(569),Sa=i.n(Ca),xa=i(565),_a=i.n(xa),Oa=i(216),Ia=i.n(Oa),Na=i(589),Ta=i.n(Na),Da=i(293),Ba={};Ba.styleTagTransform=Ta(),Ba.setAttributes=_a(),Ba.insert=Sa().bind(null,"head"),Ba.domAPI=ka(),Ba.insertStyleElement=Ia(),Ea()(Da.Z,Ba),Da.Z&&Da.Z.locals&&Da.Z.locals;var Pa,Ra=!1,ja=n.useSyncExternalStore||function(e,n,r){var i=n();__DEV__&&!Ra&&i!==n()&&(Ra=!0,__DEV__&&m.error("The result of getSnapshot should be cached to avoid an infinite loop"));var o=t.useState({inst:{value:i,getSnapshot:n}}),a=o[0].inst,s=o[1];return L?t.useLayoutEffect((function(){Object.assign(a,{value:i,getSnapshot:n}),Fa(a)&&s({inst:a})}),[e,i,n]):Object.assign(a,{value:i,getSnapshot:n}),t.useEffect((function(){return Fa(a)&&s({inst:a}),e((function(){Fa(a)&&s({inst:a})}))}),[e]),i};function Fa(e){var t=e.value,n=e.getSnapshot;try{return t!==n()}catch(e){return!0}}!function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}(Pa||(Pa={}));var La=new Map;function Ma(e){var t;switch(e){case Pa.Query:t="Query";break;case Pa.Mutation:t="Mutation";break;case Pa.Subscription:t="Subscription"}return t}function za(e,t){var n=function(e){var t,n,r=La.get(e);if(r)return r;__DEV__?m(!!e&&!!e.kind,"Argument of ".concat(e," passed to parser was not a valid GraphQL ")+"DocumentNode. You may need to use 'graphql-tag' or another method to convert your operation into a document"):m(!!e&&!!e.kind,32);for(var i=[],o=[],a=[],s=[],l=0,u=e.definitions;l<u.length;l++){var c=u[l];if("FragmentDefinition"!==c.kind){if("OperationDefinition"===c.kind)switch(c.operation){case"query":o.push(c);break;case"mutation":a.push(c);break;case"subscription":s.push(c)}}else i.push(c)}__DEV__?m(!i.length||o.length||a.length||s.length,"Passing only a fragment to 'graphql' is not yet supported. You must include a query, subscription or mutation as well"):m(!i.length||o.length||a.length||s.length,33),__DEV__?m(o.length+a.length+s.length<=1,"react-apollo only supports a query, subscription, or a mutation per HOC. "+"".concat(e," had ").concat(o.length," queries, ").concat(s.length," ")+"subscriptions and ".concat(a.length," mutations. ")+"You can use 'compose' to join multiple operation types to a component"):m(o.length+a.length+s.length<=1,34),n=o.length?Pa.Query:Pa.Mutation,o.length||a.length||(n=Pa.Subscription);var f=o.length?o:a.length?a:s;__DEV__?m(1===f.length,"react-apollo only supports one definition per HOC. ".concat(e," had ")+"".concat(f.length," definitions. ")+"You can use 'compose' to join multiple operation types to a component"):m(1===f.length,35);var d=f[0];t=d.variableDefinitions||[];var p={name:d.name&&"Name"===d.name.kind?d.name.value:"data",type:n,variables:t};return La.set(e,p),p}(e),r=Ma(t),i=Ma(n.type);__DEV__?m(n.type===t,"Running a ".concat(r," requires a graphql ")+"".concat(r,", but a ").concat(i," was used instead.")):m(n.type===t,36)}function Va(e){var n=(0,t.useContext)(z()),r=e||n.client;return __DEV__?m(!!r,'Could not find "client" in the context or passed in as an option. Wrap the root component in an <ApolloProvider>, or pass an ApolloClient instance in via options.'):m(!!r,31),r}var qa=Object.prototype.hasOwnProperty;function Qa(e,t){return void 0===t&&(t=Object.create(null)),Ua(Va(t.client),e).useQuery(t)}function Ua(e,n){var r=(0,t.useRef)();r.current&&e===r.current.client&&n===r.current.query||(r.current=new Ya(e,n,r.current));var i=r.current,o=(0,t.useState)(0),a=(o[0],o[1]);return i.forceUpdate=function(){a((function(e){return e+1}))},i}var Ya=function(){function e(e,t,n){this.client=e,this.query=t,this.asyncResolveFns=new Set,this.optionsToIgnoreOnce=new(B?WeakSet:Set),this.ssrDisabledResult=so({loading:!0,data:void 0,error:void 0,networkStatus:Kr.loading}),this.skipStandbyResult=so({loading:!1,data:void 0,error:void 0,networkStatus:Kr.ready}),this.toQueryResultCache=new(D?WeakMap:Map),za(t,Pa.Query);var r=n&&n.result,i=r&&r.data;i&&(this.previousData=i)}return e.prototype.forceUpdate=function(){__DEV__&&m.warn("Calling default no-op implementation of InternalState#forceUpdate")},e.prototype.asyncUpdate=function(){var e=this;return new Promise((function(t){e.asyncResolveFns.add(t),e.optionsToIgnoreOnce.add(e.watchQueryOptions),e.forceUpdate()}))},e.prototype.useQuery=function(e){var n=this;this.renderPromises=(0,t.useContext)(z()).renderPromises,this.useOptions(e);var r=this.useObservableQuery(),i=ja((0,t.useCallback)((function(){if(n.renderPromises)return function(){};var e=function(){var e=n.result,t=r.getCurrentResult();e&&e.loading===t.loading&&e.networkStatus===t.networkStatus&&Zn(e.data,t.data)||n.setResult(t)},t=function(o){var a=r.last;i.unsubscribe();try{r.resetLastResults(),i=r.subscribe(e,t)}finally{r.last=a}if(!qa.call(o,"graphQLErrors"))throw o;var s=n.result;(!s||s&&s.loading||!Zn(o,s.error))&&n.setResult({data:s&&s.data,error:o,loading:!1,networkStatus:Kr.error})},i=r.subscribe(e,t);return function(){return i.unsubscribe()}}),[r,this.renderPromises,this.client.disableNetworkFetches]),(function(){return n.getCurrentResult()}),(function(){return n.getCurrentResult()}));this.unsafeHandlePartialRefetch(i);var o=this.toQueryResult(i);return!o.loading&&this.asyncResolveFns.size&&(this.asyncResolveFns.forEach((function(e){return e(o)})),this.asyncResolveFns.clear()),o},e.prototype.useOptions=function(t){var n,r=this.createWatchQueryOptions(this.queryHookOptions=t),i=this.watchQueryOptions;!this.optionsToIgnoreOnce.has(i)&&Zn(r,i)||(this.watchQueryOptions=r,i&&this.observable&&(this.optionsToIgnoreOnce.delete(i),this.observable.reobserve(this.getObsQueryOptions()),this.previousData=(null===(n=this.result)||void 0===n?void 0:n.data)||this.previousData,this.result=void 0)),this.onCompleted=t.onCompleted||e.prototype.onCompleted,this.onError=t.onError||e.prototype.onError,!this.renderPromises&&!this.client.disableNetworkFetches||!1!==this.queryHookOptions.ssr||this.queryHookOptions.skip?this.queryHookOptions.skip||"standby"===this.watchQueryOptions.fetchPolicy?this.result=this.skipStandbyResult:this.result!==this.ssrDisabledResult&&this.result!==this.skipStandbyResult||(this.result=void 0):this.result=this.ssrDisabledResult},e.prototype.getObsQueryOptions=function(){var e=[],t=this.client.defaultOptions.watchQuery;return t&&e.push(t),this.queryHookOptions.defaultOptions&&e.push(this.queryHookOptions.defaultOptions),e.push(hr(this.observable&&this.observable.options,this.watchQueryOptions)),e.reduce(no)},e.prototype.createWatchQueryOptions=function(e){var t;void 0===e&&(e={});var n=e.skip,r=(e.ssr,e.onCompleted,e.onError,e.defaultOptions,s(e,["skip","ssr","onCompleted","onError","defaultOptions"])),i=Object.assign(r,{query:this.query});if(!this.renderPromises||"network-only"!==i.fetchPolicy&&"cache-and-network"!==i.fetchPolicy||(i.fetchPolicy="cache-first"),i.variables||(i.variables={}),n){var o=i.fetchPolicy,a=void 0===o?this.getDefaultFetchPolicy():o,l=i.initialFetchPolicy,u=void 0===l?a:l;Object.assign(i,{initialFetchPolicy:u,fetchPolicy:"standby"})}else i.fetchPolicy||(i.fetchPolicy=(null===(t=this.observable)||void 0===t?void 0:t.options.initialFetchPolicy)||this.getDefaultFetchPolicy());return i},e.prototype.getDefaultFetchPolicy=function(){var e,t;return(null===(e=this.queryHookOptions.defaultOptions)||void 0===e?void 0:e.fetchPolicy)||(null===(t=this.client.defaultOptions.watchQuery)||void 0===t?void 0:t.fetchPolicy)||"cache-first"},e.prototype.onCompleted=function(e){},e.prototype.onError=function(e){},e.prototype.useObservableQuery=function(){var e=this.observable=this.renderPromises&&this.renderPromises.getSSRObservable(this.watchQueryOptions)||this.observable||this.client.watchQuery(this.getObsQueryOptions());this.obsQueryFields=(0,t.useMemo)((function(){return{refetch:e.refetch.bind(e),reobserve:e.reobserve.bind(e),fetchMore:e.fetchMore.bind(e),updateQuery:e.updateQuery.bind(e),startPolling:e.startPolling.bind(e),stopPolling:e.stopPolling.bind(e),subscribeToMore:e.subscribeToMore.bind(e)}}),[e]);var n=!(!1===this.queryHookOptions.ssr||this.queryHookOptions.skip);return this.renderPromises&&n&&(this.renderPromises.registerSSRObservable(e),e.getCurrentResult().loading&&this.renderPromises.addObservableQueryPromise(e)),e},e.prototype.setResult=function(e){var t=this.result;t&&t.data&&(this.previousData=t.data),this.result=e,this.forceUpdate(),this.handleErrorOrCompleted(e)},e.prototype.handleErrorOrCompleted=function(e){var t=this;e.loading||Promise.resolve().then((function(){e.error?t.onError(e.error):e.data&&t.onCompleted(e.data)})).catch((function(e){__DEV__&&m.warn(e)}))},e.prototype.getCurrentResult=function(){return this.result||this.handleErrorOrCompleted(this.result=this.observable.getCurrentResult()),this.result},e.prototype.toQueryResult=function(e){var t=this.toQueryResultCache.get(e);if(t)return t;var n=e.data,r=(e.partial,s(e,["data","partial"]));return this.toQueryResultCache.set(e,t=a(a(a({data:n},r),this.obsQueryFields),{client:this.client,observable:this.observable,variables:this.observable.variables,called:!this.queryHookOptions.skip,previousData:this.previousData})),!t.error&&tr(e.errors)&&(t.error=new Xr({graphQLErrors:e.errors})),t},e.prototype.unsafeHandlePartialRefetch=function(e){!e.partial||!this.queryHookOptions.partialRefetch||e.loading||e.data&&0!==Object.keys(e.data).length||"cache-only"===this.observable.options.fetchPolicy||(Object.assign(e,{loading:!0,networkStatus:Kr.refetch}),this.observable.refetch())},e}();function Wa(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}const $a=/\r\n|[\n\r]/g;function Ha(e,t){let n=0,r=1;for(const i of e.body.matchAll($a)){if("number"==typeof i.index||Wa(!1),i.index>=t)break;n=i.index+i[0].length,r+=1}return{line:r,column:t+1-n}}function Za(e,t){const n=e.locationOffset.column-1,r="".padStart(n)+e.body,i=t.line-1,o=e.locationOffset.line-1,a=t.line+o,s=1===t.line?n:0,l=t.column+s,u=`${e.name}:${a}:${l}\n`,c=r.split(/\r\n|[\n\r]/g),f=c[i];if(f.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<f.length;e+=80)n.push(f.slice(e,e+80));return u+Ka([[`${a} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+Ka([[a-1+" |",c[i-1]],[`${a} |`,f],["|","^".padStart(l)],[`${a+1} |`,c[i+1]]])}function Ka(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}class Xa extends Error{constructor(e,...t){var n,r,i;const{nodes:o,source:a,positions:s,path:l,originalError:u,extensions:c}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=u?u:void 0,this.nodes=Ga(Array.isArray(o)?o:o?[o]:void 0);const f=Ga(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=a?a:null==f||null===(r=f[0])||void 0===r?void 0:r.source,this.positions=null!=s?s:null==f?void 0:f.map((e=>e.start)),this.locations=s&&a?s.map((e=>Ha(a,e))):null==f?void 0:f.map((e=>Ha(e.source,e.start)));const d="object"==typeof(p=null==u?void 0:u.extensions)&&null!==p?null==u?void 0:u.extensions:void 0;var p;this.extensions=null!==(i=null!=c?c:d)&&void 0!==i?i:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=u&&u.stack?Object.defineProperty(this,"stack",{value:u.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,Xa):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const n of this.nodes)n.loc&&(e+="\n\n"+Za((t=n.loc).source,Ha(t.source,t.start)));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+Za(this.source,t);var t;return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function Ga(e){return void 0===e||0===e.length?void 0:e}function Ja(e,t,n){return new Xa(`Syntax Error: ${n}`,{source:e,positions:[t]})}var es,ts,ns;!function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"}(es||(es={})),(ns=ts||(ts={})).SOF="<SOF>",ns.EOF="<EOF>",ns.BANG="!",ns.DOLLAR="$",ns.AMP="&",ns.PAREN_L="(",ns.PAREN_R=")",ns.SPREAD="...",ns.COLON=":",ns.EQUALS="=",ns.AT="@",ns.BRACKET_L="[",ns.BRACKET_R="]",ns.BRACE_L="{",ns.PIPE="|",ns.BRACE_R="}",ns.NAME="Name",ns.INT="Int",ns.FLOAT="Float",ns.STRING="String",ns.BLOCK_STRING="BlockString",ns.COMMENT="Comment";class rs{constructor(e){const t=new nt(ts.SOF,0,0,0,0);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let e=this.token;if(e.kind!==ts.EOF)do{if(e.next)e=e.next;else{const t=cs(this,e.end);e.next=t,t.prev=e,e=t}}while(e.kind===ts.COMMENT);return e}}function is(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function os(e,t){return as(e.charCodeAt(t))&&ss(e.charCodeAt(t+1))}function as(e){return e>=55296&&e<=56319}function ss(e){return e>=56320&&e<=57343}function ls(e,t){const n=e.source.body.codePointAt(t);if(void 0===n)return ts.EOF;if(n>=32&&n<=126){const e=String.fromCodePoint(n);return'"'===e?"'\"'":`"${e}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function us(e,t,n,r,i){const o=e.line,a=1+n-e.lineStart;return new nt(t,n,r,o,a,i)}function cs(e,t){const n=e.source.body,r=n.length;let i=t;for(;i<r;){const t=n.charCodeAt(i);switch(t){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:10===n.charCodeAt(i+1)?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return fs(e,i);case 33:return us(e,ts.BANG,i,i+1);case 36:return us(e,ts.DOLLAR,i,i+1);case 38:return us(e,ts.AMP,i,i+1);case 40:return us(e,ts.PAREN_L,i,i+1);case 41:return us(e,ts.PAREN_R,i,i+1);case 46:if(46===n.charCodeAt(i+1)&&46===n.charCodeAt(i+2))return us(e,ts.SPREAD,i,i+3);break;case 58:return us(e,ts.COLON,i,i+1);case 61:return us(e,ts.EQUALS,i,i+1);case 64:return us(e,ts.AT,i,i+1);case 91:return us(e,ts.BRACKET_L,i,i+1);case 93:return us(e,ts.BRACKET_R,i,i+1);case 123:return us(e,ts.BRACE_L,i,i+1);case 124:return us(e,ts.PIPE,i,i+1);case 125:return us(e,ts.BRACE_R,i,i+1);case 34:return 34===n.charCodeAt(i+1)&&34===n.charCodeAt(i+2)?As(e,i):hs(e,i)}if(An(t)||45===t)return ds(e,i,t);if(wn(t))return Es(e,i);throw Ja(e.source,i,39===t?"Unexpected single quote character ('), did you mean to use a double quote (\")?":is(t)||os(n,i)?`Unexpected character: ${ls(e,i)}.`:`Invalid character: ${ls(e,i)}.`)}return us(e,ts.EOF,r,r)}function fs(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r;){const e=n.charCodeAt(i);if(10===e||13===e)break;if(is(e))++i;else{if(!os(n,i))break;i+=2}}return us(e,ts.COMMENT,t,i,n.slice(t+1,i))}function ds(e,t,n){const r=e.source.body;let i=t,o=n,a=!1;if(45===o&&(o=r.charCodeAt(++i)),48===o){if(o=r.charCodeAt(++i),An(o))throw Ja(e.source,i,`Invalid number, unexpected digit after 0: ${ls(e,i)}.`)}else i=ps(e,i,o),o=r.charCodeAt(i);if(46===o&&(a=!0,o=r.charCodeAt(++i),i=ps(e,i,o),o=r.charCodeAt(i)),69!==o&&101!==o||(a=!0,o=r.charCodeAt(++i),43!==o&&45!==o||(o=r.charCodeAt(++i)),i=ps(e,i,o),o=r.charCodeAt(i)),46===o||wn(o))throw Ja(e.source,i,`Invalid number, expected digit but got: ${ls(e,i)}.`);return us(e,a?ts.FLOAT:ts.INT,t,i,r.slice(t,i))}function ps(e,t,n){if(!An(n))throw Ja(e.source,t,`Invalid number, expected digit but got: ${ls(e,t)}.`);const r=e.source.body;let i=t+1;for(;An(r.charCodeAt(i));)++i;return i}function hs(e,t){const n=e.source.body,r=n.length;let i=t+1,o=i,a="";for(;i<r;){const r=n.charCodeAt(i);if(34===r)return a+=n.slice(o,i),us(e,ts.STRING,t,i+1,a);if(92!==r){if(10===r||13===r)break;if(is(r))++i;else{if(!os(n,i))throw Ja(e.source,i,`Invalid character within String: ${ls(e,i)}.`);i+=2}}else{a+=n.slice(o,i);const t=117===n.charCodeAt(i+1)?123===n.charCodeAt(i+2)?ms(e,i):vs(e,i):bs(e,i);a+=t.value,i+=t.size,o=i}}throw Ja(e.source,i,"Unterminated string.")}function ms(e,t){const n=e.source.body;let r=0,i=3;for(;i<12;){const e=n.charCodeAt(t+i++);if(125===e){if(i<5||!is(r))break;return{value:String.fromCodePoint(r),size:i}}if(r=r<<4|gs(e),r<0)break}throw Ja(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+i)}".`)}function vs(e,t){const n=e.source.body,r=ys(n,t+2);if(is(r))return{value:String.fromCodePoint(r),size:6};if(as(r)&&92===n.charCodeAt(t+6)&&117===n.charCodeAt(t+7)){const e=ys(n,t+8);if(ss(e))return{value:String.fromCodePoint(r,e),size:12}}throw Ja(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function ys(e,t){return gs(e.charCodeAt(t))<<12|gs(e.charCodeAt(t+1))<<8|gs(e.charCodeAt(t+2))<<4|gs(e.charCodeAt(t+3))}function gs(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function bs(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:"\n",size:2};case 114:return{value:"\r",size:2};case 116:return{value:"\t",size:2}}throw Ja(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function As(e,t){const n=e.source.body,r=n.length;let i=e.lineStart,o=t+3,a=o,s="";const l=[];for(;o<r;){const r=n.charCodeAt(o);if(34===r&&34===n.charCodeAt(o+1)&&34===n.charCodeAt(o+2)){s+=n.slice(a,o),l.push(s);const r=us(e,ts.BLOCK_STRING,t,o+3,kn(l).join("\n"));return e.line+=l.length-1,e.lineStart=i,r}if(92!==r||34!==n.charCodeAt(o+1)||34!==n.charCodeAt(o+2)||34!==n.charCodeAt(o+3))if(10!==r&&13!==r)if(is(r))++o;else{if(!os(n,o))throw Ja(e.source,o,`Invalid character within String: ${ls(e,o)}.`);o+=2}else s+=n.slice(a,o),l.push(s),13===r&&10===n.charCodeAt(o+1)?o+=2:++o,s="",a=o,i=o;else s+=n.slice(a,o),a=o+1,o+=4}throw Ja(e.source,o,"Unterminated string.")}function Es(e,t){const n=e.source.body,r=n.length;let i=t+1;for(;i<r&&(En(o=n.charCodeAt(i))||An(o)||95===o);)++i;var o;return us(e,ts.NAME,t,i,n.slice(t,i))}class ws{constructor(e,t={}){const n=function(e){return e instanceof T}(e)?e:new T(e);this._lexer=new rs(n),this._options=t,this._tokenCounter=0}parseName(){const e=this.expectToken(ts.NAME);return this.node(e,{kind:st.NAME,value:e.value})}parseDocument(){return this.node(this._lexer.token,{kind:st.DOCUMENT,definitions:this.many(ts.SOF,this.parseDefinition,ts.EOF)})}parseDefinition(){if(this.peek(ts.BRACE_L))return this.parseOperationDefinition();const e=this.peekDescription(),t=e?this._lexer.lookahead():this._lexer.token;if(t.kind===ts.NAME){switch(t.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(e)throw Ja(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(t.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(t)}parseOperationDefinition(){const e=this._lexer.token;if(this.peek(ts.BRACE_L))return this.node(e,{kind:st.OPERATION_DEFINITION,operation:at.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const t=this.parseOperationType();let n;return this.peek(ts.NAME)&&(n=this.parseName()),this.node(e,{kind:st.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const e=this.expectToken(ts.NAME);switch(e.value){case"query":return at.QUERY;case"mutation":return at.MUTATION;case"subscription":return at.SUBSCRIPTION}throw this.unexpected(e)}parseVariableDefinitions(){return this.optionalMany(ts.PAREN_L,this.parseVariableDefinition,ts.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:st.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(ts.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(ts.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const e=this._lexer.token;return this.expectToken(ts.DOLLAR),this.node(e,{kind:st.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:st.SELECTION_SET,selections:this.many(ts.BRACE_L,this.parseSelection,ts.BRACE_R)})}parseSelection(){return this.peek(ts.SPREAD)?this.parseFragment():this.parseField()}parseField(){const e=this._lexer.token,t=this.parseName();let n,r;return this.expectOptionalToken(ts.COLON)?(n=t,r=this.parseName()):r=t,this.node(e,{kind:st.FIELD,alias:n,name:r,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(ts.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(e){const t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(ts.PAREN_L,t,ts.PAREN_R)}parseArgument(e=!1){const t=this._lexer.token,n=this.parseName();return this.expectToken(ts.COLON),this.node(t,{kind:st.ARGUMENT,name:n,value:this.parseValueLiteral(e)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const e=this._lexer.token;this.expectToken(ts.SPREAD);const t=this.expectOptionalKeyword("on");return!t&&this.peek(ts.NAME)?this.node(e,{kind:st.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(e,{kind:st.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const e=this._lexer.token;return this.expectKeyword("fragment"),!0===this._options.allowLegacyFragmentVariables?this.node(e,{kind:st.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(e,{kind:st.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()}parseValueLiteral(e){const t=this._lexer.token;switch(t.kind){case ts.BRACKET_L:return this.parseList(e);case ts.BRACE_L:return this.parseObject(e);case ts.INT:return this.advanceLexer(),this.node(t,{kind:st.INT,value:t.value});case ts.FLOAT:return this.advanceLexer(),this.node(t,{kind:st.FLOAT,value:t.value});case ts.STRING:case ts.BLOCK_STRING:return this.parseStringLiteral();case ts.NAME:switch(this.advanceLexer(),t.value){case"true":return this.node(t,{kind:st.BOOLEAN,value:!0});case"false":return this.node(t,{kind:st.BOOLEAN,value:!1});case"null":return this.node(t,{kind:st.NULL});default:return this.node(t,{kind:st.ENUM,value:t.value})}case ts.DOLLAR:if(e){if(this.expectToken(ts.DOLLAR),this._lexer.token.kind===ts.NAME){const e=this._lexer.token.value;throw Ja(this._lexer.source,t.start,`Unexpected variable "$${e}" in constant value.`)}throw this.unexpected(t)}return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const e=this._lexer.token;return this.advanceLexer(),this.node(e,{kind:st.STRING,value:e.value,block:e.kind===ts.BLOCK_STRING})}parseList(e){return this.node(this._lexer.token,{kind:st.LIST,values:this.any(ts.BRACKET_L,(()=>this.parseValueLiteral(e)),ts.BRACKET_R)})}parseObject(e){return this.node(this._lexer.token,{kind:st.OBJECT,fields:this.any(ts.BRACE_L,(()=>this.parseObjectField(e)),ts.BRACE_R)})}parseObjectField(e){const t=this._lexer.token,n=this.parseName();return this.expectToken(ts.COLON),this.node(t,{kind:st.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e)})}parseDirectives(e){const t=[];for(;this.peek(ts.AT);)t.push(this.parseDirective(e));return t}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(e){const t=this._lexer.token;return this.expectToken(ts.AT),this.node(t,{kind:st.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e)})}parseTypeReference(){const e=this._lexer.token;let t;if(this.expectOptionalToken(ts.BRACKET_L)){const n=this.parseTypeReference();this.expectToken(ts.BRACKET_R),t=this.node(e,{kind:st.LIST_TYPE,type:n})}else t=this.parseNamedType();return this.expectOptionalToken(ts.BANG)?this.node(e,{kind:st.NON_NULL_TYPE,type:t}):t}parseNamedType(){return this.node(this._lexer.token,{kind:st.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(ts.STRING)||this.peek(ts.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");const n=this.parseConstDirectives(),r=this.many(ts.BRACE_L,this.parseOperationTypeDefinition,ts.BRACE_R);return this.node(e,{kind:st.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r})}parseOperationTypeDefinition(){const e=this._lexer.token,t=this.parseOperationType();this.expectToken(ts.COLON);const n=this.parseNamedType();return this.node(e,{kind:st.OPERATION_TYPE_DEFINITION,operation:t,type:n})}parseScalarTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");const n=this.parseName(),r=this.parseConstDirectives();return this.node(e,{kind:st.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r})}parseObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:st.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(ts.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(ts.BRACE_L,this.parseFieldDefinition,ts.BRACE_R)}parseFieldDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(ts.COLON);const i=this.parseTypeReference(),o=this.parseConstDirectives();return this.node(e,{kind:st.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:o})}parseArgumentDefs(){return this.optionalMany(ts.PAREN_L,this.parseInputValueDef,ts.PAREN_R)}parseInputValueDef(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(ts.COLON);const r=this.parseTypeReference();let i;this.expectOptionalToken(ts.EQUALS)&&(i=this.parseConstValueLiteral());const o=this.parseConstDirectives();return this.node(e,{kind:st.INPUT_VALUE_DEFINITION,description:t,name:n,type:r,defaultValue:i,directives:o})}parseInterfaceTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");const n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();return this.node(e,{kind:st.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o})}parseUnionTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseUnionMemberTypes();return this.node(e,{kind:st.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i})}parseUnionMemberTypes(){return this.expectOptionalToken(ts.EQUALS)?this.delimitedMany(ts.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();return this.node(e,{kind:st.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i})}parseEnumValuesDefinition(){return this.optionalMany(ts.BRACE_L,this.parseEnumValueDefinition,ts.BRACE_R)}parseEnumValueDefinition(){const e=this._lexer.token,t=this.parseDescription(),n=this.parseEnumValueName(),r=this.parseConstDirectives();return this.node(e,{kind:st.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r})}parseEnumValueName(){if("true"===this._lexer.token.value||"false"===this._lexer.token.value||"null"===this._lexer.token.value)throw Ja(this._lexer.source,this._lexer.token.start,`${ks(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");const n=this.parseName(),r=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();return this.node(e,{kind:st.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i})}parseInputFieldsDefinition(){return this.optionalMany(ts.BRACE_L,this.parseInputValueDef,ts.BRACE_R)}parseTypeSystemExtension(){const e=this._lexer.lookahead();if(e.kind===ts.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)}parseSchemaExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const t=this.parseConstDirectives(),n=this.optionalMany(ts.BRACE_L,this.parseOperationTypeDefinition,ts.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return this.node(e,{kind:st.SCHEMA_EXTENSION,directives:t,operationTypes:n})}parseScalarTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const t=this.parseName(),n=this.parseConstDirectives();if(0===n.length)throw this.unexpected();return this.node(e,{kind:st.SCALAR_TYPE_EXTENSION,name:t,directives:n})}parseObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:st.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseInterfaceTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return this.node(e,{kind:st.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i})}parseUnionTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:st.UNION_TYPE_EXTENSION,name:t,directives:n,types:r})}parseEnumTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:st.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r})}parseInputObjectTypeExtension(){const e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const t=this.parseName(),n=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return this.node(e,{kind:st.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r})}parseDirectiveDefinition(){const e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(ts.AT);const n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const o=this.parseDirectiveLocations();return this.node(e,{kind:st.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:o})}parseDirectiveLocations(){return this.delimitedMany(ts.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const e=this._lexer.token,t=this.parseName();if(Object.prototype.hasOwnProperty.call(es,t.value))return t;throw this.unexpected(e)}node(e,t){return!0!==this._options.noLocation&&(t.loc=new tt(e,this._lexer.lastToken,this._lexer.source)),t}peek(e){return this._lexer.token.kind===e}expectToken(e){const t=this._lexer.token;if(t.kind===e)return this.advanceLexer(),t;throw Ja(this._lexer.source,t.start,`Expected ${Cs(e)}, found ${ks(t)}.`)}expectOptionalToken(e){return this._lexer.token.kind===e&&(this.advanceLexer(),!0)}expectKeyword(e){const t=this._lexer.token;if(t.kind!==ts.NAME||t.value!==e)throw Ja(this._lexer.source,t.start,`Expected "${e}", found ${ks(t)}.`);this.advanceLexer()}expectOptionalKeyword(e){const t=this._lexer.token;return t.kind===ts.NAME&&t.value===e&&(this.advanceLexer(),!0)}unexpected(e){const t=null!=e?e:this._lexer.token;return Ja(this._lexer.source,t.start,`Unexpected ${ks(t)}.`)}any(e,t,n){this.expectToken(e);const r=[];for(;!this.expectOptionalToken(n);)r.push(t.call(this));return r}optionalMany(e,t,n){if(this.expectOptionalToken(e)){const e=[];do{e.push(t.call(this))}while(!this.expectOptionalToken(n));return e}return[]}many(e,t,n){this.expectToken(e);const r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}delimitedMany(e,t){this.expectOptionalToken(e);const n=[];do{n.push(t.call(this))}while(this.expectOptionalToken(e));return n}advanceLexer(){const{maxTokens:e}=this._options,t=this._lexer.advance();if(void 0!==e&&t.kind!==ts.EOF&&(++this._tokenCounter,this._tokenCounter>e))throw Ja(this._lexer.source,t.start,`Document contains more that ${e} tokens. Parsing aborted.`)}}function ks(e){const t=e.value;return Cs(e.kind)+(null!=t?` "${t}"`:"")}function Cs(e){return function(e){return e===ts.BANG||e===ts.DOLLAR||e===ts.AMP||e===ts.PAREN_L||e===ts.PAREN_R||e===ts.SPREAD||e===ts.COLON||e===ts.EQUALS||e===ts.AT||e===ts.BRACKET_L||e===ts.BRACKET_R||e===ts.BRACE_L||e===ts.PIPE||e===ts.BRACE_R}(e)?`"${e}"`:e}var Ss=new Map,xs=new Map,_s=!0,Os=!1;function Is(e){return e.replace(/[\s,]+/g," ").trim()}function Ns(e){var t,n,r,i=Is(e);if(!Ss.has(i)){var o=function(e,t){return new ws(e,t).parseDocument()}(e,{experimentalFragmentVariables:Os,allowLegacyFragmentVariables:Os});if(!o||"Document"!==o.kind)throw new Error("Not a valid GraphQL document.");Ss.set(i,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(n){var r=e[n];r&&"object"==typeof r&&t.add(r)}))}));var n=e.loc;return n&&(delete n.startToken,delete n.endToken),e}((t=o,n=new Set,r=[],t.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var t=e.name.value,i=Is((a=e.loc).source.body.substring(a.start,a.end)),o=xs.get(t);o&&!o.has(i)?_s&&console.warn("Warning: fragment with name "+t+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):o||xs.set(t,o=new Set),o.add(i),n.has(i)||(n.add(i),r.push(e))}else r.push(e);var a})),a(a({},t),{definitions:r}))))}return Ss.get(i)}function Ts(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"string"==typeof e&&(e=[e]);var r=e[0];return t.forEach((function(t,n){t&&"Document"===t.kind?r+=t.loc.source.body:r+=t,r+=e[n+1]})),Ns(r)}var Ds,Bs,Ps,Rs,js,Fs,Ls,Ms,zs,Vs,qs,Qs,Us=Ts;function Ys(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(Ds=Ts||(Ts={})).gql=Us,Ds.resetCaches=function(){Ss.clear(),xs.clear()},Ds.disableFragmentWarnings=function(){_s=!1},Ds.enableExperimentalFragmentVariables=function(){Os=!0},Ds.disableExperimentalFragmentVariables=function(){Os=!1},Ts.default=Ts;var Ws=Ts(Bs||(Bs=Ys(["\n  mutation CreateUser($registerInput: RegisterInput) {\n    createUser(registerInput: $registerInput) {\n      username\n      email\n      password\n      token\n    }\n  }\n"]))),$s=Ts(Ps||(Ps=Ys(["\n  mutation LoginUser($loginInput: LoginInput) {\n    loginUser(loginInput: $loginInput) {\n      username\n      email\n      password\n      token\n    }\n  }\n"]))),Hs=Ts(Rs||(Rs=Ys(["\n  query GetIndexMovies {\n    getIndexMovies {\n      type\n      movies {\n        id\n        title\n        img\n        releaseDate {\n          day\n          month\n          year\n        }\n      }\n    }\n  }\n"]))),Zs=Ts(js||(js=Ys(["\n  query GetMovies($apiInput: ApiInput) {\n    getMovies(apiInput: $apiInput) {\n      id\n      title\n      img\n      releaseDate {\n        day\n        month\n        year\n      }\n    }\n  }\n"]))),Ks=Ts(Fs||(Fs=Ys(["\n  query GetMovie($id: String) {\n    getMovie(id: $id) {\n      title\n      id\n      img\n      plot\n      length\n      rating {\n        count\n        score\n      }\n      releaseDate {\n        day\n        month\n        year\n      }\n      genres {\n        description\n      }\n      actors {\n        name\n        img\n      }\n    }\n  }\n"]))),Xs=Ts(Ls||(Ls=Ys(["\n  query GetGenres {\n    getGenres {\n      description\n    }\n  }\n"]))),Gs=Ts(Ms||(Ms=Ys(["\n  query GetAllCommentsByMovieID($movieID: String!) {\n    getAllCommentsByMovieID(movieID: $movieID) {\n      _id\n      username\n      movieID\n      body\n    }\n  }\n"]))),Js=(Ts(zs||(zs=Ys(["\n  query GetAllCommentsByUsername($username: String!) {\n    getAllCommentsByUsername(username: $username) {\n      _id\n      username\n      movieID\n      body\n      date {\n        day\n        month\n        year\n      }\n    }\n  }\n"]))),Ts(Vs||(Vs=Ys(["\n  mutation CreateComment($commentInput: CommentInput) {\n    createComment(commentInput: $commentInput) {\n      _id\n      username\n      movieID\n      body\n    }\n  }\n"])))),el=Ts(qs||(qs=Ys(["\n  mutation DeleteComment($id: ID!, $username: String) {\n    deleteComment(id: $id, username: $username) {\n      _id\n      username\n      movieID\n      body\n    }\n  }\n"]))),tl=(Ts(Qs||(Qs=Ys(["\n  mutation EditComment($editCommentId: ID!, $body: String, $username: String!) {\n    editComment(id: $editCommentId, body: $body, username: $username) {\n      _id\n      username\n      movieID\n      body\n    }\n  }\n"]))),i(757)),nl={};nl.styleTagTransform=Ta(),nl.setAttributes=_a(),nl.insert=Sa().bind(null,"head"),nl.domAPI=ka(),nl.insertStyleElement=Ia(),Ea()(tl.Z,nl);var rl=tl.Z&&tl.Z.locals?tl.Z.locals:void 0;function il(e,t){e.forEach((function(e){e.childNodes[0].classList.add(rl.passiveContainer)})),e[t].childNodes[0].classList.add(rl.activeContainer);for(var n=0;n<e.length;n++){var r,i=e[n];r=t!==n?.5:1,i.style.transition="transform 0.6s",i.style.transform="scale(".concat(r,") translateY(CALC(").concat(n-t,"* 150vh))")}}var ol=i(805),al={};al.styleTagTransform=Ta(),al.setAttributes=_a(),al.insert=Sa().bind(null,"head"),al.domAPI=ka(),al.insertStyleElement=Ia(),Ea()(ol.Z,al);var sl=ol.Z&&ol.Z.locals?ol.Z.locals:void 0,ll=i.p+"a7fc9ff870034b71c1fa035a8995d6d0.jpg",ul=function(e){var n=e.movie,r=Re(),i=Pe(),o=(0,t.useRef)(null);return void 0===n.title?t.createElement("div",null,"loading.."):t.createElement("div",{ref:o,className:sl.card,onMouseMove:function(e){return function(e){var t=e.card,n=e.e,r=t.childNodes[0].childNodes[1],i=t.childNodes[0],o=t.getBoundingClientRect(),a=t.offsetWidth,s=t.offsetHeight,l=(n.pageX-o.left-a/2)/a*17,u=-1*(n.pageY-o.top-s/2)/s*17;r.style.transitionDelay="0s",r.style.transition="0.1s",r.style.transform="perspective(200px) translateY("+2*u+"px) translateX("+-2*l+"px)  scale(1.4) translateX(-1%) translateY(-1%)",i.style.transitionDelay="0s",i.style.transition="0.1s",i.style.transform="perspective(400px) rotateY("+l+"deg) rotateX("+u+"deg)"}({card:o.current,e:e,id:n.id})},onMouseLeave:function(e){return t={card:o.current},r=(n=t.card).childNodes[0],i=n.childNodes[0].childNodes[1],void setTimeout((function(){i.style.transform="perspective(400px) scale(1.4) translateX(-1%) translateY(-1%)",i.style.transition="1s",r.style.transform="perspective(400px)",r.style.transition="1s"}),1e3);var t,n,r,i},onClick:function(){return e=n.id,t="/movie/".concat(e),void(i.pathname!==t&&r(t));var e,t}},t.createElement("div",null,t.createElement("div",{className:sl.info},t.createElement("h4",{className:sl.title},n.title),t.createElement("p",{className:sl.year},n.releaseDate.year?n.releaseDate.year:"-")),t.createElement("img",{className:sl.img,src:n.img,onError:function(e){var t=e.target;t.src!==ll?(t.onerror=null,t.src=ll):t.src=""},alt:""}),t.createElement("div",{className:sl.innerBorder})))};function cl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var fl=(0,t.createContext)(),dl=function(e){var n,r,i=(n=(0,t.useState)("most_pop_movies"),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(n,r)||function(e,t){if(e){if("string"==typeof e)return cl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cl(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[0],a=i[1];return t.createElement(fl.Provider,{value:{movie:o,setMovie:a}},e.children)},pl=i(184),hl=i.n(pl),ml=i(716),vl={};vl.styleTagTransform=Ta(),vl.setAttributes=_a(),vl.insert=Sa().bind(null,"head"),vl.domAPI=ka(),vl.insertStyleElement=Ia(),Ea()(ml.Z,vl);var yl=ml.Z&&ml.Z.locals?ml.Z.locals:void 0,gl=function(e){var n=e.name,r=e.handleClick,i=e.direction;return t.createElement("div",null,t.createElement("div",{className:hl()(yl.button,yl[i]),onClick:r,onTouchStart:r},t.createElement("div",{className:yl.title},n)))},bl=i.p+"604b2533259b1a90436ee384705570ed.svg",Al=function(e){var n=e.list,r=e.cList,i=e.cards,o=Re(),a=(0,t.useContext)(fl),s=(0,t.useRef)(null);return t.createElement("div",{className:rl.panel,ref:s},t.createElement("div",{className:rl.container},t.createElement("h2",{className:rl.title},r),t.createElement("div",{className:hl()(sl.container,rl.cards)},i),t.createElement("div",{className:rl.buttonContainer},t.createElement(gl,{name:"More",handleClick:function(){return e=n,a.setMovie(e),void o("/movies/1");var e},direction:"buttonRight"})),t.createElement("div",{className:rl.arrowContainer},t.createElement("img",{className:rl.arrow,src:bl,alt:""}))))},El=i(447),wl={};wl.styleTagTransform=Ta(),wl.setAttributes=_a(),wl.insert=Sa().bind(null,"head"),wl.domAPI=ka(),wl.insertStyleElement=Ia(),Ea()(El.Z,wl);var kl=El.Z&&El.Z.locals?El.Z.locals:void 0;function Cl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Sl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var xl=function(){var e=Cl((0,t.useState)([]),2),n=e[0],r=e[1],i=Cl((0,t.useState)([]),2),o=i[0],a=i[1],s=Qa(Hs),l=s.data,u=s.loading;(0,t.useEffect)((function(){l&&(r(l.getIndexMovies.map((function(e){return e.movies}))),a(l.getIndexMovies.map((function(e){return e.type}))))}),[l]);var c=["Most popular movies","Most popular series","Top box office ever","Top box office last weekend","Top rated movies","Top rated english movies","Lowest rated","Top rated series","Every movie and TV show"],f=function(){return o.map((function(e,r){var i=n[r].map((function(e){return t.createElement(ul,{key:e.id,movie:e})}));return t.createElement(Al,{key:e,list:e,cList:c[r],cards:i})}))},d=(0,t.useRef)(null);return(0,t.useEffect)((function(){d.current&&d.current.childNodes.length>0&&function(e){for(var t=e.childNodes,n=1;n<t.length;n++){var r=t[n];r.style.transition="0s",r.style.transform="translateY(CALC(".concat(n,"*150vh)) scale(0.5)")}t[0].childNodes[0].classList.add(rl.activeContainer);var i,o,a=0,s="up",l=0,u=0,c=0,f=0,d=!1;e.addEventListener("wheel",(i=function(){t.length-1!==a&&"down"===s?a++:0!==a&&"up"===s&&a--,il(t,a)},700,o=0,function(e){e.preventDefault(),120===Math.abs(e.wheelDeltaY)&&(f=0),Math.abs(e.deltaY)<10||(d=e.deltaY-2*f>0,f=c,c=u,u=l,l=e.deltaY,e.deltaY<0?s="up":e.deltaY>0&&(s="down"),!1===d&&"down"===s||!0===d&&"up"===s||"down"===s&&a===t.length-1||"up"===s&&0===a||new Date-o>700&&(o=new Date,i()))}),{passive:!1});var p="up",h=0;e.addEventListener("touchmove",(function(e){e.preventDefault(),p=e.changedTouches[0].clientY>h?"up":"down",h=e.changedTouches[0].clientY}),{passive:!1}),e.addEventListener("touchend",(function(){"down"===p&&a===t.length-1||"up"===p&&0===a||(t.length-1!==a&&"down"===p?a++:0!==a&&"up"===p&&a--,il(t,a))}))}(d.current)}),[o,n]),t.createElement("div",{className:kl.container},u?t.createElement("div",null,"loading..."):t.createElement("div",{ref:d},t.createElement(f,null)))},_l=["refetch","reobserve","fetchMore","updateQuery","startPolling","subscribeToMore"],Ol=i(909),Il={};Il.styleTagTransform=Ta(),Il.setAttributes=_a(),Il.insert=Sa().bind(null,"head"),Il.domAPI=ka(),Il.insertStyleElement=Ia(),Ea()(Ol.Z,Il);var Nl=Ol.Z&&Ol.Z.locals?Ol.Z.locals:void 0;function Tl(e){return Tl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tl(e)}function Dl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dl(Object(n),!0).forEach((function(t){Pl(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Pl(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Tl(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Tl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tl(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return jl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Fl=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(0,t.useState)(n),i=Rl(r,2),o=i[0],a=i[1],s=function(e){"INPUT"===e.target.nodeName||"TEXTAREA"===e.target.nodeName?a(Bl(Bl({},o),{},Pl({},e.target.name,e.target.value))):a(Bl(Bl({},o),{},Pl({},e.target.getAttribute("name"),e.target.innerText)))},l=function(t){t.preventDefault(),e(),a(n)};return{onChange:s,onSubmit:l,values:o,setValues:a}},Ll=i(104),Ml=i.n(Ll),zl=i(770),Vl={};Vl.styleTagTransform=Ta(),Vl.setAttributes=_a(),Vl.insert=Sa().bind(null,"head"),Vl.domAPI=ka(),Vl.insertStyleElement=Ia(),Ea()(zl.Z,Vl);var ql=zl.Z&&zl.Z.locals?zl.Z.locals:void 0,Ql=function(e){var n=e.handleSelect,r=e.list,i=e.value,o=e.name;return t.createElement("div",{className:ql.container},t.createElement("h4",{className:ql.title},o+":"),t.createElement("div",null,t.createElement("div",{className:ql.button},t.createElement("div",null,i||"choose one"),t.createElement("ul",{className:ql.list},r.map((function(e){return t.createElement("li",{key:Ml()(),className:e.description===i?ql.selected:ql.notSelected,name:"genre",onClick:function(e){return n(e)}},e.description)}))))))};function Ul(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Yl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Wl=function(){var e=Re(),n=je().page;n=Number(n);var r=(0,t.useContext)(fl),i=Fl({genre:""}),o=i.onChange,s=i.values,l=Qa(Xs),u=Ul((0,t.useState)([]),2),c=u[0],f=u[1];(0,t.useEffect)((function(){l.data&&f(l.data.getGenres)}),[l.data]);var d=function(e,n){var r=Ua(Va(n&&n.client),e),i=(0,t.useRef)(),o=i.current?no(n,i.current):n,s=r.useQuery(a(a({},o),{skip:!i.current})),l=s.observable.options.initialFetchPolicy||r.getDefaultFetchPolicy(),u=Object.assign(s,{called:!!i.current}),c=(0,t.useMemo)((function(){for(var e={},t=function(t){var n=u[t];e[t]=function(){return i.current||(i.current=Object.create(null),r.forceUpdate()),n.apply(this,arguments)}},n=0,o=_l;n<o.length;n++)t(o[n]);return e}),[]);return Object.assign(u,c),[(0,t.useCallback)((function(e){i.current=e?a(a({},e),{fetchPolicy:e.fetchPolicy||l}):{fetchPolicy:l};var t=r.asyncUpdate().then((function(e){return Object.assign(e,c)}));return t.catch((function(){})),t}),[]),u]}(Zs,{variables:{apiInput:{list:r.movie,genre:s.genre,page:n}}}),p=Ul(d,2),h=p[0],m=p[1],v=Ul((0,t.useState)([]),2),y=v[0],g=v[1];(0,t.useEffect)((function(){h(),m.data&&g(m.data.getMovies)}),[m.data]);var b=function(t){e("/movies/".concat(n+t))};return m.loading?t.createElement("div",null,"...loading"):t.createElement("div",{className:Nl.container},t.createElement(Ql,{name:"Genre",list:c,handleSelect:function(e){[].filter.call(e.target.parentNode.children,(function(t){return t!==e.target})).map((function(e){return e.className="",e})),o(e),b(1-n),h()},value:s.genre}),t.createElement("div",{className:hl()(sl.container,Nl.cards)},0===y.length?t.createElement("h3",null,"No results"):y.map((function(e){return t.createElement(ul,{key:e.id,movie:e})}))),t.createElement("div",{className:Nl.buttons},1===n?t.createElement(t.Fragment,null):20===y.length&&t.createElement(gl,{name:"Back",handleClick:function(){return b(-1)},direction:"buttonLeft"}),20===y.length&&t.createElement(t.Fragment,null,t.createElement(gl,{name:"Next",handleClick:function(){return b(1)},direction:"buttonRight"}))))};function $l(e,n){var r=Va(null==n?void 0:n.client);za(e,Pa.Mutation);var i=(0,t.useState)({called:!1,loading:!1,client:r}),o=i[0],s=i[1],l=(0,t.useRef)({result:o,mutationId:0,isMounted:!0,client:r,mutation:e,options:n});Object.assign(l.current,{client:r,options:n,mutation:e});var u=(0,t.useCallback)((function(e){void 0===e&&(e={});var t=l.current,n=t.client,r=t.options,i=t.mutation,o=a(a({},r),{mutation:i});l.current.result.loading||o.ignoreResults||!l.current.isMounted||s(l.current.result={loading:!0,error:void 0,data:void 0,called:!0,client:n});var u=++l.current.mutationId,c=no(o,e);return n.mutate(c).then((function(t){var r,i,o,a=t.data,f=t.errors,d=f&&f.length>0?new Xr({graphQLErrors:f}):void 0;if(u===l.current.mutationId&&!c.ignoreResults){var p={called:!0,loading:!1,data:a,error:d,client:n};l.current.isMounted&&!Zn(l.current.result,p)&&s(l.current.result=p)}return null===(i=null===(r=l.current.options)||void 0===r?void 0:r.onCompleted)||void 0===i||i.call(r,t.data,c),null===(o=e.onCompleted)||void 0===o||o.call(e,t.data,c),t})).catch((function(t){var r,i,o,a;if(u===l.current.mutationId&&l.current.isMounted){var f={loading:!1,error:t,data:void 0,called:!0,client:n};Zn(l.current.result,f)||s(l.current.result=f)}if((null===(r=l.current.options)||void 0===r?void 0:r.onError)||c.onError)return null===(o=null===(i=l.current.options)||void 0===i?void 0:i.onError)||void 0===o||o.call(i,t,c),null===(a=e.onError)||void 0===a||a.call(e,t,c),{data:void 0,errors:t};throw t}))}),[]),c=(0,t.useCallback)((function(){l.current.isMounted&&s({called:!1,loading:!1,client:r})}),[]);return(0,t.useEffect)((function(){return l.current.isMounted=!0,function(){l.current.isMounted=!1}}),[]),[u,a({reset:c},o)]}var Hl=i(921),Zl={};Zl.styleTagTransform=Ta(),Zl.setAttributes=_a(),Zl.insert=Sa().bind(null,"head"),Zl.domAPI=ka(),Zl.insertStyleElement=Ia(),Ea()(Hl.Z,Zl);var Kl=Hl.Z&&Hl.Z.locals?Hl.Z.locals:void 0;function Xl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Gl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Gl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Jl=function(){var e=Re(),n=(0,t.useContext)(ya),r=Xl((0,t.useState)([]),2),i=r[0],o=r[1],a=Fl((function(){console.log("Callback hit"),console.log(u),c()}),{username:"",password:""}),s=a.onChange,l=a.onSubmit,u=a.values,c=Xl($l($s,{update:function(t,r){var i=r.data.loginUser;n.login(i),e("/")},onError:function(e){var t=e.graphQLErrors;o(t)},variables:{loginInput:u}}),1)[0];return t.createElement("div",{className:Kl.container},t.createElement("p",{className:Kl.title},"Sign in"),t.createElement("form",{onSubmit:l,className:Kl.form,autocomplete:"off"},t.createElement("label",{htmlFor:"username",className:Kl.label},"username:"),t.createElement("input",{className:Kl.input,name:"username",id:"username",value:u.username,onChange:s}),t.createElement("label",{htmlFor:"password",className:Kl.label},"password:"),t.createElement("input",{className:Kl.input,name:"password",id:"password",type:"password",value:u.password,onChange:s})),t.createElement(gl,{className:Kl.button,name:"log in",handleClick:l,direction:"buttonRight"}),i.map((function(e){return t.createElement("div",{key:Ml()()},t.createElement("h2",null,"Error"),e.message)})))};function eu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return tu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var nu=function(e){var n=(0,t.useContext)(ya),r=Re(),i=eu((0,t.useState)([]),2),o=i[0],a=i[1],s=Fl((function(){console.log("Callback hit"),console.log(c),f()}),{username:"",email:"",password:"",confirmPassword:""}),l=s.onChange,u=s.onSubmit,c=s.values,f=eu($l(Ws,{update:function(e,t){var i=t.data.createUser;n.login(i),r("/")},onError:function(e){var t=e.graphQLErrors;a(t)},variables:{registerInput:c}}),1)[0];return t.createElement("div",{className:Kl.container},t.createElement("p",{className:Kl.title},"Sign up"),t.createElement("form",{onSubmit:u,className:Kl.form,autoComplete:"off"},t.createElement("label",{htmlFor:"username",className:Kl.label},"username:"),t.createElement("input",{className:Kl.input,name:"username",id:"username",value:c.username,onChange:l}),t.createElement("br",null),t.createElement("label",{htmlFor:"email",className:Kl.label},"email:"),t.createElement("input",{className:Kl.input,name:"email",id:"email",value:c.email,onChange:l}),t.createElement("br",null),t.createElement("label",{htmlFor:"password",className:Kl.label},"password:"),t.createElement("input",{className:Kl.input,name:"password",id:"password",type:"password",value:c.password,onChange:l}),t.createElement("br",null),t.createElement("label",{htmlFor:"confirmPassword",className:Kl.label},"confirm password:"),t.createElement("input",{className:Kl.input,name:"confirmPassword",id:"confirmPassword",type:"password",value:c.confirmPassword,onChange:l}),t.createElement("br",null),t.createElement(gl,{name:"register",handleClick:u,direction:"buttonRight"})),o.map((function(e){return t.createElement("div",{key:Ml()()},t.createElement("h2",null,"Error"),e.message)})))},ru=i(553),iu={};iu.styleTagTransform=Ta(),iu.setAttributes=_a(),iu.insert=Sa().bind(null,"head"),iu.domAPI=ka(),iu.insertStyleElement=Ia(),Ea()(ru.Z,iu);var ou=ru.Z&&ru.Z.locals?ru.Z.locals:void 0,au=function(){var e=(0,t.useContext)(ya),n=e.user,r=e.logout,i=Re(),o=Fl((function(){i("/movie/".concat(l.search))}),{search:""}),a=o.onChange,s=o.onSubmit,l=o.values;return t.createElement("div",{className:ou.container},t.createElement(Ge,{to:"/",className:ou.title},"Movies"),t.createElement("form",{className:ou.form,onSubmit:s,autoComplete:"off"},t.createElement("input",{className:ou.input,type:"text",name:"search",id:"search",value:l.search,onChange:a,placeholder:"Search by movie ID"}),t.createElement(gl,{name:"search",handleClick:s,direction:"buttonRight"})),t.createElement("div",{className:ou.login},n?t.createElement(t.Fragment,null,t.createElement("h4",{className:ou.loggedin},t.createElement("span",{className:ou.username},n.username)," logged in"),t.createElement(gl,{name:"log out",handleClick:function(){r(),i("/")},direction:"buttonLeft"})):t.createElement(t.Fragment,null,t.createElement(Ge,{to:"/login",className:ou.link},"Sign in"),t.createElement(Ge,{to:"/register",className:ou.link},"Sign up"))))},su=i(876),lu={};lu.styleTagTransform=Ta(),lu.setAttributes=_a(),lu.insert=Sa().bind(null,"head"),lu.domAPI=ka(),lu.insertStyleElement=Ia(),Ea()(su.Z,lu);var uu=su.Z&&su.Z.locals?su.Z.locals:void 0,cu=i(711),fu={};fu.styleTagTransform=Ta(),fu.setAttributes=_a(),fu.insert=Sa().bind(null,"head"),fu.domAPI=ka(),fu.insertStyleElement=Ia(),Ea()(cu.Z,fu);var du=cu.Z&&cu.Z.locals?cu.Z.locals:void 0;function pu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,t)||hu(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hu(e,t){if(e){if("string"==typeof e)return mu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mu(e,t):void 0}}function mu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var vu=function(e){var n=e.movieID,r=(0,t.useContext)(ya).user,i=pu((0,t.useState)([]),2),o=(i[0],i[1]),a=pu((0,t.useState)([]),2),s=a[0],l=a[1],u=Fl((function(){h()}),{body:""}),c=u.onChange,f=u.onSubmit,d=u.values,p=$l(Js,{variables:{commentInput:{username:r?r.username:"",movieID:n,body:d.body}},onError:function(e){var t=e.graphQLErrors;o(t)},onCompleted:function(e){var t,n=e.createComment;l([].concat(function(e){if(Array.isArray(e))return mu(e)}(t=s)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||hu(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[n]))}}),h=pu(p,1)[0],m=$l(el,{onError:function(e){var t=e.graphQLErrors;o(t)},onCompleted:function(e){var t=e.deleteComment;l(s.filter((function(e){return e._id!==t._id})))}}),v=pu(m,1)[0],y=Qa(Gs,{variables:{movieID:n},fetchPolicy:"network-only"}),g=y.data,b=y.error;return(0,t.useEffect)((function(){g&&l(g.getAllCommentsByMovieID)}),[g]),b?t.createElement("p",null,"Error message: ",b.message):t.createElement("div",{className:du.container},t.createElement("div",{className:du.test},t.createElement("h1",{className:du.title},"Comments"),r?t.createElement("form",{className:du.addComment,onSubmit:f,autocomplete:"off"},t.createElement("textarea",{className:du.newComment,type:"textarea",name:"body",id:"body",value:d.body,onChange:c}),t.createElement(gl,{className:du.addButton,name:"Add comment",handleClick:f,direction:"buttonRight"})):t.createElement("div",{className:du.reminder},"Log in, to write a comment!"),t.createElement("ul",{className:du.commentsContainer},s.slice().reverse().map((function(e){return t.createElement("li",{className:du.comment,key:e._id},t.createElement("div",{className:du.data},t.createElement("p",{className:du.author},"Author: ",e.username),t.createElement("p",{className:du.body},e.body)),r&&(r.username===e.username?t.createElement("button",{className:du.button,onClick:function(){return t=e._id,void v({variables:{id:t,username:r?r.username:""}});var t}},"Delete"):t.createElement(t.Fragment,null)))})))))};function yu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gu=function(){var e,n,r=je().id,i=Qa(Ks,{variables:{id:r}}),o=(e=(0,t.useState)([]),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw i}}return s}}(e,n)||function(e,t){if(e){if("string"==typeof e)return yu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yu(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],s=o[1];return(0,t.useEffect)((function(){i.data&&s(i.data.getMovie)}),[i.data]),i.loading||void 0===a.title?t.createElement("div",null,"loading..."):t.createElement("div",{className:uu.container},t.createElement("div",{className:uu.movieContainer},t.createElement("div",{className:uu.cardContainer},t.createElement(ul,{movie:a})),t.createElement("div",{className:uu.info},t.createElement("div",{className:uu.oneInfo},t.createElement("h4",{className:uu.label},"Full title:"),t.createElement("p",{className:uu.description},a.title)),t.createElement("div",{className:uu.oneInfo},t.createElement("h4",{className:uu.label},"Rating:"),t.createElement("p",{className:uu.description},a.rating.score)),t.createElement("div",{className:uu.oneInfo},t.createElement("h4",{className:uu.label},"Runtime:"),t.createElement("p",{className:uu.description},a.length/60," minutes")),t.createElement("div",{className:uu.oneInfo},t.createElement("h4",{className:uu.label},"Genres:"),t.createElement("div",{className:uu.description},a.genres.map((function(e){return t.createElement("p",{key:e.description,className:uu.genre},e.description)})))),t.createElement("div",{className:uu.oneInfo},t.createElement("h4",{className:uu.label},"Plot:"),t.createElement("p",{className:uu.description},a.plot)))),t.createElement(vu,{movieID:r}))},bu=i(521),Au={};Au.styleTagTransform=Ta(),Au.setAttributes=_a(),Au.insert=Sa().bind(null,"head"),Au.domAPI=ka(),Au.insertStyleElement=Ia(),Ea()(bu.Z,Au);var Eu=bu.Z&&bu.Z.locals?bu.Z.locals:void 0,wu=function(){return t.createElement("div",{className:Eu.container},t.createElement(au,null),t.createElement(We,null,t.createElement(Ue,{path:"/",element:t.createElement(xl,null)}),t.createElement(Ue,{path:"/movie/:id",element:t.createElement(gu,null)}),t.createElement(Ue,{path:"/movies/:page",element:t.createElement(Wl,null)}),t.createElement(Ue,{path:"/login",element:t.createElement(Jl,null)}),t.createElement(Ue,{path:"/register",element:t.createElement(nu,null)})))},ku=document.getElementById("root");(0,e.s)(ku).render(t.createElement(ba,null,t.createElement(dl,null,t.createElement(q,{client:ra},t.createElement(Xe,null,t.createElement(wu,null))))))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,